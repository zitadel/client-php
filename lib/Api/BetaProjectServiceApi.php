<?php
/**
 * BetaProjectServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zitadel\Client\ApiException;
use Zitadel\Client\Configuration;
use Zitadel\Client\ObjectSerializer;
use RuntimeException;
use Exception;

/**
 * BetaProjectServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BetaProjectServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateProject' => [
            'application/json',
        ],
        'activateProjectGrant' => [
            'application/json',
        ],
        'addProjectRole' => [
            'application/json',
        ],
        'createProject' => [
            'application/json',
        ],
        'createProjectGrant' => [
            'application/json',
        ],
        'deactivateProject' => [
            'application/json',
        ],
        'deactivateProjectGrant' => [
            'application/json',
        ],
        'deleteProject' => [
            'application/json',
        ],
        'deleteProjectGrant' => [
            'application/json',
        ],
        'getProject' => [
            'application/json',
        ],
        'listProjectGrants' => [
            'application/json',
        ],
        'listProjectRoles' => [
            'application/json',
        ],
        'listProjects' => [
            'application/json',
        ],
        'removeProjectRole' => [
            'application/json',
        ],
        'updateProject' => [
            'application/json',
        ],
        'updateProjectGrant' => [
            'application/json',
        ],
        'updateProjectRole' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        Configuration $config = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client([
            'http_errors' => false,
        ]);
        $this->config = $config;
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param string[] $accept
     * @param string $contentType
     * @param bool $isMultipart
     * @return string[]
     */
    private function selectHeaders(array $accept, string $contentType, bool $isMultipart): array
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($accept);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        if (!$isMultipart) {
            if ($contentType === '') {
                $contentType = 'application/json';
            }

            $headers['Content-Type'] = $contentType;
        }

        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided.
     *
     * @param string[] $accept Array of header
     *
     * @return null|string Accept (e.g. application/json)
     */
    private function selectAcceptHeader(array $accept): ?string
    {
        # filter out empty entries
        $accept = array_filter($accept);

        if (count($accept) === 0) {
            return null;
        }

        # If there's only one Accept header, just use it
        if (count($accept) === 1) {
            return reset($accept);
        }

        # If none of the available Accept headers is of type "json", then just use all them
        $headersWithJson = $this->selectJsonMimeList($accept);
        if (count($headersWithJson) === 0) {
            return implode(',', $accept);
        }

        # If we got here, then we need add quality values (weight), as described in IETF RFC 9110, Items 12.4.2/12.5.1,
        # to give the highest priority to json-like headers - recalculating the existing ones, if needed
        return $this->getAcceptHeaderWithAdjustedWeight($accept, $headersWithJson);
    }

    /**
     * Select all items from a list containing a JSON mime type
     *
     * @param array $mimeList
     * @return array
     */
    private function selectJsonMimeList(array $mimeList): array
    {
        $jsonMimeList = [];
        foreach ($mimeList as $mime) {
            if ($this->isJsonMime($mime)) {
                $jsonMimeList[] = $mime;
            }
        }
        return $jsonMimeList;
    }

    /**
     * Detects whether a string contains a valid JSON mime type
     *
     * @param string $searchString
     * @return bool
     */
    private function isJsonMime(string $searchString): bool
    {
        /** @noinspection PhpCoveredCharacterInClassInspection */
        return preg_match('~^application/(json|[\w!#$&.+-^_]+\+json)\s*(;|$)~', $searchString) === 1;
    }

    /**
     * Create an Accept header string from the given "Accept" headers array, recalculating all weights
     *
     * @param string[] $accept Array of Accept Headers
     * @param string[] $headersWithJson Array of Accept Headers of type "json"
     *
     * @return string "Accept" Header (e.g. "application/json, text/html; q=0.9")
     */
    private function getAcceptHeaderWithAdjustedWeight(array $accept, array $headersWithJson): string
    {
        $processedHeaders = [
          'withApplicationJson' => [],
          'withJson' => [],
          'withoutJson' => [],
        ];

        foreach ($accept as $header) {

            $headerData = $this->getHeaderAndWeight($header);

            if (stripos($headerData['header'], 'application/json') === 0) {
                $processedHeaders['withApplicationJson'][] = $headerData;
            } elseif (in_array($header, $headersWithJson, true)) {
                $processedHeaders['withJson'][] = $headerData;
            } else {
                $processedHeaders['withoutJson'][] = $headerData;
            }
        }

        $acceptHeaders = [];
        $currentWeight = 1000;

        $hasMoreThan28Headers = count($accept) > 28;

        foreach ($processedHeaders as $headers) {
            if (count($headers) > 0) {
                $acceptHeaders[] = $this->adjustWeight($headers, $currentWeight, $hasMoreThan28Headers);
            }
        }

        $acceptHeaders = array_merge(...$acceptHeaders);

        return implode(',', $acceptHeaders);
    }

    /**
     * Given an Accept header, returns an associative array splitting the header and its weight
     *
     * @param string $header "Accept" Header
     *
     * @return array with the header and its weight
     */
    private function getHeaderAndWeight(string $header): array
    {
        # matches headers with weight, splitting the header and the weight in $outputArray
        if (preg_match('/(.*);\s*q=(1(?:\.0+)?|0\.\d+)$/', $header, $outputArray) === 1) {
            $headerData = [
              'header' => $outputArray[1],
              'weight' => (int)($outputArray[2] * 1000),
            ];
        } else {
            $headerData = [
              'header' => trim($header),
              'weight' => 1000,
            ];
        }

        return $headerData;
    }

    /**
     * @param array[] $headers
     * @param float $currentWeight
     * @param bool $hasMoreThan28Headers
     * @return string[] array of adjusted "Accept" headers
     */
    private function adjustWeight(array $headers, float &$currentWeight, bool $hasMoreThan28Headers): array
    {
        usort($headers, fn (array $a, array $b) => $b['weight'] - $a['weight']);

        $acceptHeaders = [];
        foreach ($headers as $index => $header) {
            if ($index > 0 && $headers[$index - 1]['weight'] > $header['weight']) {
                $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);
            }

            $weight = $currentWeight;

            $acceptHeaders[] = $this->buildAcceptHeader($header['header'], $weight);
        }

        $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);

        return $acceptHeaders;
    }

    /**
     * Calculate the next weight, based on the current one.
     *
     * If there are less than 28 "Accept" headers, the weights will be decreased by 1 on its highest significant digit, using the
     * following formula:
     *
     *    next weight = current weight - 10 ^ (floor(log(current weight - 1)))
     *
     *    ( current weight minus ( 10 raised to the power of ( floor of (log to the base 10 of ( current weight minus 1 ) ) ) ) )
     *
     * Starting from 1000, this generates the following series:
     *
     * 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
     *
     * The resulting quality codes are closer to the average "normal" usage of them (like "q=0.9", "q=0.8" and so on), but it only works
     * if there is a maximum of 28 "Accept" headers. If we have more than that (which is extremely unlikely), then we fall back to a 1-by-1
     * decrement rule, which will result in quality codes like "q=0.999", "q=0.998" etc.
     *
     * @param int $currentWeight varying from 1 to 1000 (will be divided by 1000 to build the quality value)
     * @param bool $hasMoreThan28Headers
     * @return int
     */
    private function getNextWeight(int $currentWeight, bool $hasMoreThan28Headers): int
    {
        if ($currentWeight <= 1) {
            return 1;
        }

        if ($hasMoreThan28Headers) {
            return $currentWeight - 1;
        }

        return $currentWeight - 10 ** floor(log10($currentWeight - 1));
    }

    /**
     * @param string $header
     * @param int $weight
     * @return string
     */
    private function buildAcceptHeader(string $header, int $weight): string
    {
        if ($weight === 1000) {
            return $header;
        }

        return trim($header, '; ') . ';q=' . rtrim(sprintf('%0.3f', $weight / 1000), '0');
    }


        /**
     * @throws ApiException
     */
    private function executeRequest(
        Request $request,
        array $responseTypes,
        string $defaultResponseType
    ): mixed {
        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);
        } catch (GuzzleException $e) {
            throw new RuntimeException(
                "API Request failed: [{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $e
            );
        }

        $statusCode = $response->getStatusCode();
        $responseBody = $response->getBody();
        $responseHeaders = $response->getHeaders();

        if ($statusCode >= 200 && $statusCode < 300) {
            $returnType = $responseTypes[$statusCode] ?? $defaultResponseType;

            if ($returnType === '\SplFileObject') {
                return $responseBody;
            } else {
                $content = (string) $responseBody;

                if (empty(trim($content)) && $returnType !== 'string') {
                    $content = null;
                }

                try {
                    return ObjectSerializer::deserialize($content, $returnType, $this->config, []);
                } catch (Exception $e) {
                    throw new RuntimeException(
                        "Failed to process successful response for status $statusCode",
                        $statusCode,
                        $e
                    );
                }
            }
        } else {
            $errorType = $responseTypes[$statusCode] ?? $defaultResponseType;

            if ($errorType === '\SplFileObject') {
                throw new ApiException(
                    sprintf('[%d] API Error (%s) - Expected file object', $statusCode, $request->getUri()),
                    $statusCode,
                    $responseHeaders,
                    $responseBody
                );
            } elseif ($errorType !== 'string' && !empty(trim((string) $responseBody))) {
                try {
                    $decodedContent = json_decode((string)$responseBody, false, 512, JSON_THROW_ON_ERROR);
                    throw new ApiException(
                        sprintf('[%d] API Error (%s)', $statusCode, (string)$request->getUri()),
                        $statusCode,
                        $responseHeaders,
                        $decodedContent,
                    );
                } catch (ApiException $e) {
                    throw $e;
                } catch (Exception $e) {
                    throw new RuntimeException(
                        "Failed to process error response for status $statusCode",
                        $statusCode,
                        $e
                    );
                }
            } else {
                throw new ApiException(
                    sprintf('[%d] API Error (%s)', $statusCode, $request->getUri()),
                    $statusCode,
                    $responseHeaders,
                    $responseBody
                );
            }
        }
    }

    /**
     * Operation activateProject
     *
     * ActivateProject
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceActivateProjectRequest $betaProjectServiceActivateProjectRequest betaProjectServiceActivateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateProject'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceActivateProjectResponse
     * @throws ApiException
     */
    public function activateProject(    $betaProjectServiceActivateProjectRequest,string $contentType = self::contentTypes['activateProject'][0])
    {
        $request = $this->activateProjectRequest($betaProjectServiceActivateProjectRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceActivateProjectResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceActivateProjectResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'activateProject'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceActivateProjectRequest $betaProjectServiceActivateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function activateProjectRequest($betaProjectServiceActivateProjectRequest, string $contentType = self::contentTypes['activateProject'][0])
    {

        if ($betaProjectServiceActivateProjectRequest === null || (is_array($betaProjectServiceActivateProjectRequest) && count($betaProjectServiceActivateProjectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceActivateProjectRequest when calling activateProject'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/ActivateProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceActivateProjectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceActivateProjectRequest));
            } else {
                $httpBody = $betaProjectServiceActivateProjectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation activateProjectGrant
     *
     * ActivateProjectGrant
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceActivateProjectGrantRequest $betaProjectServiceActivateProjectGrantRequest betaProjectServiceActivateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateProjectGrant'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceActivateProjectGrantResponse
     * @throws ApiException
     */
    public function activateProjectGrant(    $betaProjectServiceActivateProjectGrantRequest,string $contentType = self::contentTypes['activateProjectGrant'][0])
    {
        $request = $this->activateProjectGrantRequest($betaProjectServiceActivateProjectGrantRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceActivateProjectGrantResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceActivateProjectGrantResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'activateProjectGrant'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceActivateProjectGrantRequest $betaProjectServiceActivateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateProjectGrant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function activateProjectGrantRequest($betaProjectServiceActivateProjectGrantRequest, string $contentType = self::contentTypes['activateProjectGrant'][0])
    {

        if ($betaProjectServiceActivateProjectGrantRequest === null || (is_array($betaProjectServiceActivateProjectGrantRequest) && count($betaProjectServiceActivateProjectGrantRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceActivateProjectGrantRequest when calling activateProjectGrant'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/ActivateProjectGrant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceActivateProjectGrantRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceActivateProjectGrantRequest));
            } else {
                $httpBody = $betaProjectServiceActivateProjectGrantRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addProjectRole
     *
     * AddProjectRole
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceAddProjectRoleRequest $betaProjectServiceAddProjectRoleRequest betaProjectServiceAddProjectRoleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectRole'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceAddProjectRoleResponse
     * @throws ApiException
     */
    public function addProjectRole(    $betaProjectServiceAddProjectRoleRequest,string $contentType = self::contentTypes['addProjectRole'][0])
    {
        $request = $this->addProjectRoleRequest($betaProjectServiceAddProjectRoleRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceAddProjectRoleResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceAddProjectRoleResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'addProjectRole'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceAddProjectRoleRequest $betaProjectServiceAddProjectRoleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addProjectRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function addProjectRoleRequest($betaProjectServiceAddProjectRoleRequest, string $contentType = self::contentTypes['addProjectRole'][0])
    {

        if ($betaProjectServiceAddProjectRoleRequest === null || (is_array($betaProjectServiceAddProjectRoleRequest) && count($betaProjectServiceAddProjectRoleRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceAddProjectRoleRequest when calling addProjectRole'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/AddProjectRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceAddProjectRoleRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceAddProjectRoleRequest));
            } else {
                $httpBody = $betaProjectServiceAddProjectRoleRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProject
     *
     * CreateProject
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceCreateProjectRequest $betaProjectServiceCreateProjectRequest betaProjectServiceCreateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceCreateProjectResponse
     * @throws ApiException
     */
    public function createProject(    $betaProjectServiceCreateProjectRequest,string $contentType = self::contentTypes['createProject'][0])
    {
        $request = $this->createProjectRequest($betaProjectServiceCreateProjectRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceCreateProjectResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceCreateProjectResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'createProject'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceCreateProjectRequest $betaProjectServiceCreateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function createProjectRequest($betaProjectServiceCreateProjectRequest, string $contentType = self::contentTypes['createProject'][0])
    {

        if ($betaProjectServiceCreateProjectRequest === null || (is_array($betaProjectServiceCreateProjectRequest) && count($betaProjectServiceCreateProjectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceCreateProjectRequest when calling createProject'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/CreateProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceCreateProjectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceCreateProjectRequest));
            } else {
                $httpBody = $betaProjectServiceCreateProjectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProjectGrant
     *
     * CreateProjectGrant
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceCreateProjectGrantRequest $betaProjectServiceCreateProjectGrantRequest betaProjectServiceCreateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectGrant'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceCreateProjectGrantResponse
     * @throws ApiException
     */
    public function createProjectGrant(    $betaProjectServiceCreateProjectGrantRequest,string $contentType = self::contentTypes['createProjectGrant'][0])
    {
        $request = $this->createProjectGrantRequest($betaProjectServiceCreateProjectGrantRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceCreateProjectGrantResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceCreateProjectGrantResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'createProjectGrant'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceCreateProjectGrantRequest $betaProjectServiceCreateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProjectGrant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function createProjectGrantRequest($betaProjectServiceCreateProjectGrantRequest, string $contentType = self::contentTypes['createProjectGrant'][0])
    {

        if ($betaProjectServiceCreateProjectGrantRequest === null || (is_array($betaProjectServiceCreateProjectGrantRequest) && count($betaProjectServiceCreateProjectGrantRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceCreateProjectGrantRequest when calling createProjectGrant'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/CreateProjectGrant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceCreateProjectGrantRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceCreateProjectGrantRequest));
            } else {
                $httpBody = $betaProjectServiceCreateProjectGrantRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deactivateProject
     *
     * DeactivateProject
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeactivateProjectRequest $betaProjectServiceDeactivateProjectRequest betaProjectServiceDeactivateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateProject'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceDeactivateProjectResponse
     * @throws ApiException
     */
    public function deactivateProject(    $betaProjectServiceDeactivateProjectRequest,string $contentType = self::contentTypes['deactivateProject'][0])
    {
        $request = $this->deactivateProjectRequest($betaProjectServiceDeactivateProjectRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceDeactivateProjectResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceDeactivateProjectResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deactivateProject'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeactivateProjectRequest $betaProjectServiceDeactivateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deactivateProjectRequest($betaProjectServiceDeactivateProjectRequest, string $contentType = self::contentTypes['deactivateProject'][0])
    {

        if ($betaProjectServiceDeactivateProjectRequest === null || (is_array($betaProjectServiceDeactivateProjectRequest) && count($betaProjectServiceDeactivateProjectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceDeactivateProjectRequest when calling deactivateProject'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/DeactivateProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceDeactivateProjectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceDeactivateProjectRequest));
            } else {
                $httpBody = $betaProjectServiceDeactivateProjectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deactivateProjectGrant
     *
     * DeactivateProjectGrant
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeactivateProjectGrantRequest $betaProjectServiceDeactivateProjectGrantRequest betaProjectServiceDeactivateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateProjectGrant'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceDeactivateProjectGrantResponse
     * @throws ApiException
     */
    public function deactivateProjectGrant(    $betaProjectServiceDeactivateProjectGrantRequest,string $contentType = self::contentTypes['deactivateProjectGrant'][0])
    {
        $request = $this->deactivateProjectGrantRequest($betaProjectServiceDeactivateProjectGrantRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceDeactivateProjectGrantResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceDeactivateProjectGrantResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deactivateProjectGrant'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeactivateProjectGrantRequest $betaProjectServiceDeactivateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateProjectGrant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deactivateProjectGrantRequest($betaProjectServiceDeactivateProjectGrantRequest, string $contentType = self::contentTypes['deactivateProjectGrant'][0])
    {

        if ($betaProjectServiceDeactivateProjectGrantRequest === null || (is_array($betaProjectServiceDeactivateProjectGrantRequest) && count($betaProjectServiceDeactivateProjectGrantRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceDeactivateProjectGrantRequest when calling deactivateProjectGrant'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/DeactivateProjectGrant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceDeactivateProjectGrantRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceDeactivateProjectGrantRequest));
            } else {
                $httpBody = $betaProjectServiceDeactivateProjectGrantRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProject
     *
     * DeleteProject
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeleteProjectRequest $betaProjectServiceDeleteProjectRequest betaProjectServiceDeleteProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceDeleteProjectResponse
     * @throws ApiException
     */
    public function deleteProject(    $betaProjectServiceDeleteProjectRequest,string $contentType = self::contentTypes['deleteProject'][0])
    {
        $request = $this->deleteProjectRequest($betaProjectServiceDeleteProjectRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceDeleteProjectResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceDeleteProjectResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deleteProject'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeleteProjectRequest $betaProjectServiceDeleteProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deleteProjectRequest($betaProjectServiceDeleteProjectRequest, string $contentType = self::contentTypes['deleteProject'][0])
    {

        if ($betaProjectServiceDeleteProjectRequest === null || (is_array($betaProjectServiceDeleteProjectRequest) && count($betaProjectServiceDeleteProjectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceDeleteProjectRequest when calling deleteProject'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/DeleteProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceDeleteProjectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceDeleteProjectRequest));
            } else {
                $httpBody = $betaProjectServiceDeleteProjectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProjectGrant
     *
     * DeleteProjectGrant
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeleteProjectGrantRequest $betaProjectServiceDeleteProjectGrantRequest betaProjectServiceDeleteProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectGrant'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceDeleteProjectGrantResponse
     * @throws ApiException
     */
    public function deleteProjectGrant(    $betaProjectServiceDeleteProjectGrantRequest,string $contentType = self::contentTypes['deleteProjectGrant'][0])
    {
        $request = $this->deleteProjectGrantRequest($betaProjectServiceDeleteProjectGrantRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceDeleteProjectGrantResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceDeleteProjectGrantResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deleteProjectGrant'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceDeleteProjectGrantRequest $betaProjectServiceDeleteProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteProjectGrant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deleteProjectGrantRequest($betaProjectServiceDeleteProjectGrantRequest, string $contentType = self::contentTypes['deleteProjectGrant'][0])
    {

        if ($betaProjectServiceDeleteProjectGrantRequest === null || (is_array($betaProjectServiceDeleteProjectGrantRequest) && count($betaProjectServiceDeleteProjectGrantRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceDeleteProjectGrantRequest when calling deleteProjectGrant'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/DeleteProjectGrant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceDeleteProjectGrantRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceDeleteProjectGrantRequest));
            } else {
                $httpBody = $betaProjectServiceDeleteProjectGrantRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProject
     *
     * GetProject
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceGetProjectRequest $betaProjectServiceGetProjectRequest betaProjectServiceGetProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceGetProjectResponse
     * @throws ApiException
     */
    public function getProject(    $betaProjectServiceGetProjectRequest,string $contentType = self::contentTypes['getProject'][0])
    {
        $request = $this->getProjectRequest($betaProjectServiceGetProjectRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceGetProjectResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceGetProjectResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'getProject'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceGetProjectRequest $betaProjectServiceGetProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function getProjectRequest($betaProjectServiceGetProjectRequest, string $contentType = self::contentTypes['getProject'][0])
    {

        if ($betaProjectServiceGetProjectRequest === null || (is_array($betaProjectServiceGetProjectRequest) && count($betaProjectServiceGetProjectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceGetProjectRequest when calling getProject'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/GetProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceGetProjectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceGetProjectRequest));
            } else {
                $httpBody = $betaProjectServiceGetProjectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProjectGrants
     *
     * ListProjectGrants
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceListProjectGrantsRequest $betaProjectServiceListProjectGrantsRequest betaProjectServiceListProjectGrantsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProjectGrants'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceListProjectGrantsResponse
     * @throws ApiException
     */
    public function listProjectGrants(    $betaProjectServiceListProjectGrantsRequest,string $contentType = self::contentTypes['listProjectGrants'][0])
    {
        $request = $this->listProjectGrantsRequest($betaProjectServiceListProjectGrantsRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceListProjectGrantsResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceListProjectGrantsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'listProjectGrants'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceListProjectGrantsRequest $betaProjectServiceListProjectGrantsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProjectGrants'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function listProjectGrantsRequest($betaProjectServiceListProjectGrantsRequest, string $contentType = self::contentTypes['listProjectGrants'][0])
    {

        if ($betaProjectServiceListProjectGrantsRequest === null || (is_array($betaProjectServiceListProjectGrantsRequest) && count($betaProjectServiceListProjectGrantsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceListProjectGrantsRequest when calling listProjectGrants'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/ListProjectGrants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceListProjectGrantsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceListProjectGrantsRequest));
            } else {
                $httpBody = $betaProjectServiceListProjectGrantsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProjectRoles
     *
     * ListProjectRoles
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceListProjectRolesRequest $betaProjectServiceListProjectRolesRequest betaProjectServiceListProjectRolesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProjectRoles'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceListProjectRolesResponse
     * @throws ApiException
     */
    public function listProjectRoles(    $betaProjectServiceListProjectRolesRequest,string $contentType = self::contentTypes['listProjectRoles'][0])
    {
        $request = $this->listProjectRolesRequest($betaProjectServiceListProjectRolesRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceListProjectRolesResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceListProjectRolesResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'listProjectRoles'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceListProjectRolesRequest $betaProjectServiceListProjectRolesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProjectRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function listProjectRolesRequest($betaProjectServiceListProjectRolesRequest, string $contentType = self::contentTypes['listProjectRoles'][0])
    {

        if ($betaProjectServiceListProjectRolesRequest === null || (is_array($betaProjectServiceListProjectRolesRequest) && count($betaProjectServiceListProjectRolesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceListProjectRolesRequest when calling listProjectRoles'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/ListProjectRoles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceListProjectRolesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceListProjectRolesRequest));
            } else {
                $httpBody = $betaProjectServiceListProjectRolesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listProjects
     *
     * ListProjects
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceListProjectsRequest $betaProjectServiceListProjectsRequest betaProjectServiceListProjectsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProjects'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceListProjectsResponse
     * @throws ApiException
     */
    public function listProjects(    $betaProjectServiceListProjectsRequest,string $contentType = self::contentTypes['listProjects'][0])
    {
        $request = $this->listProjectsRequest($betaProjectServiceListProjectsRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceListProjectsResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceListProjectsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'listProjects'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceListProjectsRequest $betaProjectServiceListProjectsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listProjects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function listProjectsRequest($betaProjectServiceListProjectsRequest, string $contentType = self::contentTypes['listProjects'][0])
    {

        if ($betaProjectServiceListProjectsRequest === null || (is_array($betaProjectServiceListProjectsRequest) && count($betaProjectServiceListProjectsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceListProjectsRequest when calling listProjects'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/ListProjects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceListProjectsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceListProjectsRequest));
            } else {
                $httpBody = $betaProjectServiceListProjectsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeProjectRole
     *
     * RemoveProjectRole
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceRemoveProjectRoleRequest $betaProjectServiceRemoveProjectRoleRequest betaProjectServiceRemoveProjectRoleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProjectRole'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceRemoveProjectRoleResponse
     * @throws ApiException
     */
    public function removeProjectRole(    $betaProjectServiceRemoveProjectRoleRequest,string $contentType = self::contentTypes['removeProjectRole'][0])
    {
        $request = $this->removeProjectRoleRequest($betaProjectServiceRemoveProjectRoleRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceRemoveProjectRoleResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceRemoveProjectRoleResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'removeProjectRole'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceRemoveProjectRoleRequest $betaProjectServiceRemoveProjectRoleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeProjectRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function removeProjectRoleRequest($betaProjectServiceRemoveProjectRoleRequest, string $contentType = self::contentTypes['removeProjectRole'][0])
    {

        if ($betaProjectServiceRemoveProjectRoleRequest === null || (is_array($betaProjectServiceRemoveProjectRoleRequest) && count($betaProjectServiceRemoveProjectRoleRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceRemoveProjectRoleRequest when calling removeProjectRole'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/RemoveProjectRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceRemoveProjectRoleRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceRemoveProjectRoleRequest));
            } else {
                $httpBody = $betaProjectServiceRemoveProjectRoleRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProject
     *
     * UpdateProject
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceUpdateProjectRequest $betaProjectServiceUpdateProjectRequest betaProjectServiceUpdateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceUpdateProjectResponse
     * @throws ApiException
     */
    public function updateProject(    $betaProjectServiceUpdateProjectRequest,string $contentType = self::contentTypes['updateProject'][0])
    {
        $request = $this->updateProjectRequest($betaProjectServiceUpdateProjectRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceUpdateProjectResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceUpdateProjectResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'updateProject'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceUpdateProjectRequest $betaProjectServiceUpdateProjectRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProject'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function updateProjectRequest($betaProjectServiceUpdateProjectRequest, string $contentType = self::contentTypes['updateProject'][0])
    {

        if ($betaProjectServiceUpdateProjectRequest === null || (is_array($betaProjectServiceUpdateProjectRequest) && count($betaProjectServiceUpdateProjectRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceUpdateProjectRequest when calling updateProject'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/UpdateProject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceUpdateProjectRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceUpdateProjectRequest));
            } else {
                $httpBody = $betaProjectServiceUpdateProjectRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProjectGrant
     *
     * UpdateProjectGrant
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceUpdateProjectGrantRequest $betaProjectServiceUpdateProjectGrantRequest betaProjectServiceUpdateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectGrant'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceUpdateProjectGrantResponse
     * @throws ApiException
     */
    public function updateProjectGrant(    $betaProjectServiceUpdateProjectGrantRequest,string $contentType = self::contentTypes['updateProjectGrant'][0])
    {
        $request = $this->updateProjectGrantRequest($betaProjectServiceUpdateProjectGrantRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceUpdateProjectGrantResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceUpdateProjectGrantResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'updateProjectGrant'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceUpdateProjectGrantRequest $betaProjectServiceUpdateProjectGrantRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectGrant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function updateProjectGrantRequest($betaProjectServiceUpdateProjectGrantRequest, string $contentType = self::contentTypes['updateProjectGrant'][0])
    {

        if ($betaProjectServiceUpdateProjectGrantRequest === null || (is_array($betaProjectServiceUpdateProjectGrantRequest) && count($betaProjectServiceUpdateProjectGrantRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceUpdateProjectGrantRequest when calling updateProjectGrant'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/UpdateProjectGrant';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceUpdateProjectGrantRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceUpdateProjectGrantRequest));
            } else {
                $httpBody = $betaProjectServiceUpdateProjectGrantRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateProjectRole
     *
     * UpdateProjectRole
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceUpdateProjectRoleRequest $betaProjectServiceUpdateProjectRoleRequest betaProjectServiceUpdateProjectRoleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectRole'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceUpdateProjectRoleResponse
     * @throws ApiException
     */
    public function updateProjectRole(    $betaProjectServiceUpdateProjectRoleRequest,string $contentType = self::contentTypes['updateProjectRole'][0])
    {
        $request = $this->updateProjectRoleRequest($betaProjectServiceUpdateProjectRoleRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaProjectServiceUpdateProjectRoleResponse',
            'default' => '\Zitadel\Client\Model\BetaProjectServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaProjectServiceUpdateProjectRoleResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'updateProjectRole'
     *
     * @param  \Zitadel\Client\Model\BetaProjectServiceUpdateProjectRoleRequest $betaProjectServiceUpdateProjectRoleRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateProjectRole'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function updateProjectRoleRequest($betaProjectServiceUpdateProjectRoleRequest, string $contentType = self::contentTypes['updateProjectRole'][0])
    {

        if ($betaProjectServiceUpdateProjectRoleRequest === null || (is_array($betaProjectServiceUpdateProjectRoleRequest) && count($betaProjectServiceUpdateProjectRoleRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaProjectServiceUpdateProjectRoleRequest when calling updateProjectRole'
            );
        }


        $resourcePath = '/zitadel.project.v2beta.ProjectService/UpdateProjectRole';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaProjectServiceUpdateProjectRoleRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaProjectServiceUpdateProjectRoleRequest));
            } else {
                $httpBody = $betaProjectServiceUpdateProjectRoleRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];


        return $options;
    }
}
