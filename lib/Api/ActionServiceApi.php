<?php
/**
 * ActionServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zitadel\Client\ApiException;
use Zitadel\Client\Configuration;
use Zitadel\Client\ObjectSerializer;
use RuntimeException;
use Exception;

/**
 * ActionServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ActionServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'actionServiceCreateTarget' => [
            'application/json',
        ],
        'actionServiceDeleteTarget' => [
            'application/json',
        ],
        'actionServiceGetTarget' => [
            'application/json',
        ],
        'actionServiceListExecutionFunctions' => [
            'application/json',
        ],
        'actionServiceListExecutionMethods' => [
            'application/json',
        ],
        'actionServiceListExecutionServices' => [
            'application/json',
        ],
        'actionServiceListExecutions' => [
            'application/json',
        ],
        'actionServiceListTargets' => [
            'application/json',
        ],
        'actionServiceSetExecution' => [
            'application/json',
        ],
        'actionServiceUpdateTarget' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        Configuration $config = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client([
            'http_errors' => false,
        ]);
        $this->config = $config;
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param string[] $accept
     * @param string $contentType
     * @param bool $isMultipart
     * @return string[]
     */
    private function selectHeaders(array $accept, string $contentType, bool $isMultipart): array
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($accept);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        if (!$isMultipart) {
            if ($contentType === '') {
                $contentType = 'application/json';
            }

            $headers['Content-Type'] = $contentType;
        }

        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided.
     *
     * @param string[] $accept Array of header
     *
     * @return null|string Accept (e.g. application/json)
     */
    private function selectAcceptHeader(array $accept): ?string
    {
        # filter out empty entries
        $accept = array_filter($accept);

        if (count($accept) === 0) {
            return null;
        }

        # If there's only one Accept header, just use it
        if (count($accept) === 1) {
            return reset($accept);
        }

        # If none of the available Accept headers is of type "json", then just use all them
        $headersWithJson = $this->selectJsonMimeList($accept);
        if (count($headersWithJson) === 0) {
            return implode(',', $accept);
        }

        # If we got here, then we need add quality values (weight), as described in IETF RFC 9110, Items 12.4.2/12.5.1,
        # to give the highest priority to json-like headers - recalculating the existing ones, if needed
        return $this->getAcceptHeaderWithAdjustedWeight($accept, $headersWithJson);
    }

    /**
     * Select all items from a list containing a JSON mime type
     *
     * @param array $mimeList
     * @return array
     */
    private function selectJsonMimeList(array $mimeList): array
    {
        $jsonMimeList = [];
        foreach ($mimeList as $mime) {
            if ($this->isJsonMime($mime)) {
                $jsonMimeList[] = $mime;
            }
        }
        return $jsonMimeList;
    }

    /**
     * Detects whether a string contains a valid JSON mime type
     *
     * @param string $searchString
     * @return bool
     */
    private function isJsonMime(string $searchString): bool
    {
        /** @noinspection PhpCoveredCharacterInClassInspection */
        return preg_match('~^application/(json|[\w!#$&.+-^_]+\+json)\s*(;|$)~', $searchString) === 1;
    }

    /**
     * Create an Accept header string from the given "Accept" headers array, recalculating all weights
     *
     * @param string[] $accept Array of Accept Headers
     * @param string[] $headersWithJson Array of Accept Headers of type "json"
     *
     * @return string "Accept" Header (e.g. "application/json, text/html; q=0.9")
     */
    private function getAcceptHeaderWithAdjustedWeight(array $accept, array $headersWithJson): string
    {
        $processedHeaders = [
          'withApplicationJson' => [],
          'withJson' => [],
          'withoutJson' => [],
        ];

        foreach ($accept as $header) {

            $headerData = $this->getHeaderAndWeight($header);

            if (stripos($headerData['header'], 'application/json') === 0) {
                $processedHeaders['withApplicationJson'][] = $headerData;
            } elseif (in_array($header, $headersWithJson, true)) {
                $processedHeaders['withJson'][] = $headerData;
            } else {
                $processedHeaders['withoutJson'][] = $headerData;
            }
        }

        $acceptHeaders = [];
        $currentWeight = 1000;

        $hasMoreThan28Headers = count($accept) > 28;

        foreach ($processedHeaders as $headers) {
            if (count($headers) > 0) {
                $acceptHeaders[] = $this->adjustWeight($headers, $currentWeight, $hasMoreThan28Headers);
            }
        }

        $acceptHeaders = array_merge(...$acceptHeaders);

        return implode(',', $acceptHeaders);
    }

    /**
     * Given an Accept header, returns an associative array splitting the header and its weight
     *
     * @param string $header "Accept" Header
     *
     * @return array with the header and its weight
     */
    private function getHeaderAndWeight(string $header): array
    {
        # matches headers with weight, splitting the header and the weight in $outputArray
        if (preg_match('/(.*);\s*q=(1(?:\.0+)?|0\.\d+)$/', $header, $outputArray) === 1) {
            $headerData = [
              'header' => $outputArray[1],
              'weight' => (int)($outputArray[2] * 1000),
            ];
        } else {
            $headerData = [
              'header' => trim($header),
              'weight' => 1000,
            ];
        }

        return $headerData;
    }

    /**
     * @param array[] $headers
     * @param float $currentWeight
     * @param bool $hasMoreThan28Headers
     * @return string[] array of adjusted "Accept" headers
     */
    private function adjustWeight(array $headers, float &$currentWeight, bool $hasMoreThan28Headers): array
    {
        usort($headers, fn (array $a, array $b) => $b['weight'] - $a['weight']);

        $acceptHeaders = [];
        foreach ($headers as $index => $header) {
            if ($index > 0 && $headers[$index - 1]['weight'] > $header['weight']) {
                $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);
            }

            $weight = $currentWeight;

            $acceptHeaders[] = $this->buildAcceptHeader($header['header'], $weight);
        }

        $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);

        return $acceptHeaders;
    }

    /**
     * Calculate the next weight, based on the current one.
     *
     * If there are less than 28 "Accept" headers, the weights will be decreased by 1 on its highest significant digit, using the
     * following formula:
     *
     *    next weight = current weight - 10 ^ (floor(log(current weight - 1)))
     *
     *    ( current weight minus ( 10 raised to the power of ( floor of (log to the base 10 of ( current weight minus 1 ) ) ) ) )
     *
     * Starting from 1000, this generates the following series:
     *
     * 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
     *
     * The resulting quality codes are closer to the average "normal" usage of them (like "q=0.9", "q=0.8" and so on), but it only works
     * if there is a maximum of 28 "Accept" headers. If we have more than that (which is extremely unlikely), then we fall back to a 1-by-1
     * decrement rule, which will result in quality codes like "q=0.999", "q=0.998" etc.
     *
     * @param int $currentWeight varying from 1 to 1000 (will be divided by 1000 to build the quality value)
     * @param bool $hasMoreThan28Headers
     * @return int
     */
    private function getNextWeight(int $currentWeight, bool $hasMoreThan28Headers): int
    {
        if ($currentWeight <= 1) {
            return 1;
        }

        if ($hasMoreThan28Headers) {
            return $currentWeight - 1;
        }

        return $currentWeight - 10 ** floor(log10($currentWeight - 1));
    }

    /**
     * @param string $header
     * @param int $weight
     * @return string
     */
    private function buildAcceptHeader(string $header, int $weight): string
    {
        if ($weight === 1000) {
            return $header;
        }

        return trim($header, '; ') . ';q=' . rtrim(sprintf('%0.3f', $weight / 1000), '0');
    }


        /**
     * @throws ApiException
     */
    private function executeRequest(
        Request $request,
        array $responseTypes,
        string $defaultResponseType
    ): mixed {
        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);
        } catch (GuzzleException $e) {
            throw new RuntimeException(
                "API Request failed: [{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $e
            );
        }

        $statusCode = $response->getStatusCode();
        $responseBody = $response->getBody();
        $responseHeaders = $response->getHeaders();

        if ($statusCode >= 200 && $statusCode < 300) {
            $returnType = $responseTypes[$statusCode] ?? $defaultResponseType;

            if ($returnType === '\SplFileObject') {
                return $responseBody;
            } else {
                $content = (string) $responseBody;

                if (empty(trim($content)) && $returnType !== 'string') {
                    $content = null;
                }

                try {
                    return ObjectSerializer::deserialize($content, $returnType, $this->config, []);
                } catch (Exception $e) {
                    throw new RuntimeException(
                        "Failed to process successful response for status $statusCode",
                        $statusCode,
                        $e
                    );
                }
            }
        } else {
            $errorType = $responseTypes[$statusCode] ?? $defaultResponseType;

            if ($errorType === '\SplFileObject') {
                throw new ApiException(
                    sprintf('[%d] API Error (%s) - Expected file object', $statusCode, $request->getUri()),
                    $statusCode,
                    $responseHeaders,
                    $responseBody
                );
            } elseif ($errorType !== 'string' && !empty(trim((string) $responseBody))) {
                try {
                    $decodedContent = json_decode((string)$responseBody, false, 512, JSON_THROW_ON_ERROR);
                    throw new ApiException(
                        sprintf('[%d] API Error (%s)', $statusCode, (string)$request->getUri()),
                        $statusCode,
                        $responseHeaders,
                        $decodedContent,
                    );
                } catch (ApiException $e) {
                    throw $e;
                } catch (Exception $e) {
                    throw new RuntimeException(
                        "Failed to process error response for status $statusCode",
                        $statusCode,
                        $e
                    );
                }
            } else {
                throw new ApiException(
                    sprintf('[%d] API Error (%s)', $statusCode, $request->getUri()),
                    $statusCode,
                    $responseHeaders,
                    $responseBody
                );
            }
        }
    }

    /**
     * Operation actionServiceCreateTarget
     *
     * Create Target
     *
     * @param  \Zitadel\Client\Model\ActionServiceCreateTargetRequest $actionServiceCreateTargetRequest actionServiceCreateTargetRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceCreateTarget'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaCreateTargetResponse
     * @throws ApiException
     */
    public function actionServiceCreateTarget($actionServiceCreateTargetRequest, string $contentType = self::contentTypes['actionServiceCreateTarget'][0])
    {
        $request = $this->actionServiceCreateTargetRequest($actionServiceCreateTargetRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaCreateTargetResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            409 => 'object',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaCreateTargetResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceCreateTarget'
     *
     * @param  \Zitadel\Client\Model\ActionServiceCreateTargetRequest $actionServiceCreateTargetRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceCreateTarget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceCreateTargetRequest($actionServiceCreateTargetRequest, string $contentType = self::contentTypes['actionServiceCreateTarget'][0])
    {

        if ($actionServiceCreateTargetRequest === null || (is_array($actionServiceCreateTargetRequest) && count($actionServiceCreateTargetRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionServiceCreateTargetRequest when calling actionServiceCreateTarget'
            );
        }


        $resourcePath = '/v2beta/actions/targets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($actionServiceCreateTargetRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($actionServiceCreateTargetRequest));
            } else {
                $httpBody = $actionServiceCreateTargetRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceDeleteTarget
     *
     * Delete Target
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceDeleteTarget'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaDeleteTargetResponse
     * @throws ApiException
     */
    public function actionServiceDeleteTarget($id, string $contentType = self::contentTypes['actionServiceDeleteTarget'][0])
    {
        $request = $this->actionServiceDeleteTargetRequest($id, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaDeleteTargetResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaDeleteTargetResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceDeleteTarget'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceDeleteTarget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceDeleteTargetRequest($id, string $contentType = self::contentTypes['actionServiceDeleteTarget'][0])
    {

        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling actionServiceDeleteTarget'
            );
        }


        $resourcePath = '/v2beta/actions/targets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceGetTarget
     *
     * Get Target
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceGetTarget'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaGetTargetResponse
     * @throws ApiException
     */
    public function actionServiceGetTarget($id, string $contentType = self::contentTypes['actionServiceGetTarget'][0])
    {
        $request = $this->actionServiceGetTargetRequest($id, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaGetTargetResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => 'object',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaGetTargetResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceGetTarget'
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceGetTarget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceGetTargetRequest($id, string $contentType = self::contentTypes['actionServiceGetTarget'][0])
    {

        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling actionServiceGetTarget'
            );
        }


        $resourcePath = '/v2beta/actions/targets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceListExecutionFunctions
     *
     * List Execution Functions
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutionFunctions'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaListExecutionFunctionsResponse
     * @throws ApiException
     */
    public function actionServiceListExecutionFunctions(string $contentType = self::contentTypes['actionServiceListExecutionFunctions'][0])
    {
        $request = $this->actionServiceListExecutionFunctionsRequest($contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaListExecutionFunctionsResponse',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaListExecutionFunctionsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceListExecutionFunctions'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutionFunctions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceListExecutionFunctionsRequest(string $contentType = self::contentTypes['actionServiceListExecutionFunctions'][0])
    {


        $resourcePath = '/v2beta/actions/executions/functions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceListExecutionMethods
     *
     * List Execution Methods
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutionMethods'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaListExecutionMethodsResponse
     * @throws ApiException
     */
    public function actionServiceListExecutionMethods(string $contentType = self::contentTypes['actionServiceListExecutionMethods'][0])
    {
        $request = $this->actionServiceListExecutionMethodsRequest($contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaListExecutionMethodsResponse',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaListExecutionMethodsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceListExecutionMethods'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutionMethods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceListExecutionMethodsRequest(string $contentType = self::contentTypes['actionServiceListExecutionMethods'][0])
    {


        $resourcePath = '/v2beta/actions/executions/methods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceListExecutionServices
     *
     * List Execution Services
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutionServices'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaListExecutionServicesResponse
     * @throws ApiException
     */
    public function actionServiceListExecutionServices(string $contentType = self::contentTypes['actionServiceListExecutionServices'][0])
    {
        $request = $this->actionServiceListExecutionServicesRequest($contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaListExecutionServicesResponse',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaListExecutionServicesResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceListExecutionServices'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutionServices'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceListExecutionServicesRequest(string $contentType = self::contentTypes['actionServiceListExecutionServices'][0])
    {


        $resourcePath = '/v2beta/actions/executions/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceListExecutions
     *
     * List Executions
     *
     * @param  string|null $paginationOffset Starting point for retrieval, in combination of offset used to query a set list of objects. (optional)
     * @param  int|null $paginationLimit limit is the maximum amount of objects returned. The default is set to 100 with a maximum of 1000 in the runtime configuration. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool|null $paginationAsc Asc is the sorting order. If true the list is sorted ascending, if false the list is sorted descending. The default is descending. (optional)
     * @param  string|null $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutions'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaListExecutionsResponse
     * @throws ApiException
     */
    public function actionServiceListExecutions($paginationOffset = null, $paginationLimit = null, $paginationAsc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED', string $contentType = self::contentTypes['actionServiceListExecutions'][0])
    {
        $request = $this->actionServiceListExecutionsRequest($paginationOffset, $paginationLimit, $paginationAsc, $sortingColumn, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaListExecutionsResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaListExecutionsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceListExecutions'
     *
     * @param  string|null $paginationOffset Starting point for retrieval, in combination of offset used to query a set list of objects. (optional)
     * @param  int|null $paginationLimit limit is the maximum amount of objects returned. The default is set to 100 with a maximum of 1000 in the runtime configuration. If the limit exceeds the maximum configured ZITADEL will throw an error. If no limit is present the default is taken. (optional)
     * @param  bool|null $paginationAsc Asc is the sorting order. If true the list is sorted ascending, if false the list is sorted descending. The default is descending. (optional)
     * @param  string|null $sortingColumn The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent. (optional, default to 'EXECUTION_FIELD_NAME_UNSPECIFIED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListExecutions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceListExecutionsRequest($paginationOffset = null, $paginationLimit = null, $paginationAsc = null, $sortingColumn = 'EXECUTION_FIELD_NAME_UNSPECIFIED', string $contentType = self::contentTypes['actionServiceListExecutions'][0])
    {






        $resourcePath = '/v2beta/actions/executions/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paginationOffset,
            'pagination.offset', // param base name
            $this->config->getBooleanFormatForQueryString(),
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paginationLimit,
            'pagination.limit', // param base name
            $this->config->getBooleanFormatForQueryString(),
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $paginationAsc,
            'pagination.asc', // param base name
            $this->config->getBooleanFormatForQueryString(),
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sortingColumn,
            'sortingColumn', // param base name
            $this->config->getBooleanFormatForQueryString(),
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceListTargets
     *
     * List targets
     *
     * @param  \Zitadel\Client\Model\ActionServiceListTargetsRequest $actionServiceListTargetsRequest actionServiceListTargetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListTargets'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaListTargetsResponse
     * @throws ApiException
     */
    public function actionServiceListTargets($actionServiceListTargetsRequest, string $contentType = self::contentTypes['actionServiceListTargets'][0])
    {
        $request = $this->actionServiceListTargetsRequest($actionServiceListTargetsRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaListTargetsResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaListTargetsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceListTargets'
     *
     * @param  \Zitadel\Client\Model\ActionServiceListTargetsRequest $actionServiceListTargetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceListTargets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceListTargetsRequest($actionServiceListTargetsRequest, string $contentType = self::contentTypes['actionServiceListTargets'][0])
    {

        if ($actionServiceListTargetsRequest === null || (is_array($actionServiceListTargetsRequest) && count($actionServiceListTargetsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionServiceListTargetsRequest when calling actionServiceListTargets'
            );
        }


        $resourcePath = '/v2beta/actions/targets/_search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($actionServiceListTargetsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($actionServiceListTargetsRequest));
            } else {
                $httpBody = $actionServiceListTargetsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceSetExecution
     *
     * Set Execution
     *
     * @param  \Zitadel\Client\Model\ActionServiceSetExecutionRequest $actionServiceSetExecutionRequest actionServiceSetExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceSetExecution'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaSetExecutionResponse
     * @throws ApiException
     */
    public function actionServiceSetExecution($actionServiceSetExecutionRequest, string $contentType = self::contentTypes['actionServiceSetExecution'][0])
    {
        $request = $this->actionServiceSetExecutionRequest($actionServiceSetExecutionRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaSetExecutionResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaSetExecutionResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceSetExecution'
     *
     * @param  \Zitadel\Client\Model\ActionServiceSetExecutionRequest $actionServiceSetExecutionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceSetExecution'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceSetExecutionRequest($actionServiceSetExecutionRequest, string $contentType = self::contentTypes['actionServiceSetExecution'][0])
    {

        if ($actionServiceSetExecutionRequest === null || (is_array($actionServiceSetExecutionRequest) && count($actionServiceSetExecutionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionServiceSetExecutionRequest when calling actionServiceSetExecution'
            );
        }


        $resourcePath = '/v2beta/actions/executions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($actionServiceSetExecutionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($actionServiceSetExecutionRequest));
            } else {
                $httpBody = $actionServiceSetExecutionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation actionServiceUpdateTarget
     *
     * Update Target
     *
     * @param  string $id id (required)
     * @param  \Zitadel\Client\Model\ActionServiceUpdateTargetRequest $actionServiceUpdateTargetRequest actionServiceUpdateTargetRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceUpdateTarget'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaUpdateTargetResponse
     * @throws ApiException
     */
    public function actionServiceUpdateTarget($id, $actionServiceUpdateTargetRequest, string $contentType = self::contentTypes['actionServiceUpdateTarget'][0])
    {
        $request = $this->actionServiceUpdateTargetRequest($id, $actionServiceUpdateTargetRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\ActionServiceBetaUpdateTargetResponse',
            400 => 'object',
            403 => '\Zitadel\Client\Model\ActionServiceRpcStatus',
            404 => 'object',
            'default' => '\Zitadel\Client\Model\ActionServiceRpcStatus',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\ActionServiceBetaUpdateTargetResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'actionServiceUpdateTarget'
     *
     * @param  string $id (required)
     * @param  \Zitadel\Client\Model\ActionServiceUpdateTargetRequest $actionServiceUpdateTargetRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['actionServiceUpdateTarget'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function actionServiceUpdateTargetRequest($id, $actionServiceUpdateTargetRequest, string $contentType = self::contentTypes['actionServiceUpdateTarget'][0])
    {

        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling actionServiceUpdateTarget'
            );
        }

        if ($actionServiceUpdateTargetRequest === null || (is_array($actionServiceUpdateTargetRequest) && count($actionServiceUpdateTargetRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionServiceUpdateTargetRequest when calling actionServiceUpdateTarget'
            );
        }


        $resourcePath = '/v2beta/actions/targets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($actionServiceUpdateTargetRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($actionServiceUpdateTargetRequest));
            } else {
                $httpBody = $actionServiceUpdateTargetRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, $this->config->getBooleanFormatForQueryString());
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, $this->config->getBooleanFormatForQueryString());
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
