<?php
/**
 * BetaOrganizationServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zitadel\Client\ApiException;
use Zitadel\Client\Configuration;
use Zitadel\Client\ObjectSerializer;
use RuntimeException;
use Exception;

/**
 * BetaOrganizationServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BetaOrganizationServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activateOrganization' => [
            'application/json',
        ],
        'addOrganizationDomain' => [
            'application/json',
        ],
        'createOrganization' => [
            'application/json',
        ],
        'deactivateOrganization' => [
            'application/json',
        ],
        'deleteOrganization' => [
            'application/json',
        ],
        'deleteOrganizationDomain' => [
            'application/json',
        ],
        'deleteOrganizationMetadata' => [
            'application/json',
        ],
        'generateOrganizationDomainValidation' => [
            'application/json',
        ],
        'listOrganizationDomains' => [
            'application/json',
        ],
        'listOrganizationMetadata' => [
            'application/json',
        ],
        'listOrganizations' => [
            'application/json',
        ],
        'setOrganizationMetadata' => [
            'application/json',
        ],
        'updateOrganization' => [
            'application/json',
        ],
        'verifyOrganizationDomain' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        Configuration $config = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client([
            'http_errors' => false,
        ]);
        $this->config = $config;
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param string[] $accept
     * @param string $contentType
     * @param bool $isMultipart
     * @return string[]
     */
    private function selectHeaders(array $accept, string $contentType, bool $isMultipart): array
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($accept);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        if (!$isMultipart) {
            if ($contentType === '') {
                $contentType = 'application/json';
            }

            $headers['Content-Type'] = $contentType;
        }

        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided.
     *
     * @param string[] $accept Array of header
     *
     * @return null|string Accept (e.g. application/json)
     */
    private function selectAcceptHeader(array $accept): ?string
    {
        # filter out empty entries
        $accept = array_filter($accept);

        if (count($accept) === 0) {
            return null;
        }

        # If there's only one Accept header, just use it
        if (count($accept) === 1) {
            return reset($accept);
        }

        # If none of the available Accept headers is of type "json", then just use all them
        $headersWithJson = $this->selectJsonMimeList($accept);
        if (count($headersWithJson) === 0) {
            return implode(',', $accept);
        }

        # If we got here, then we need add quality values (weight), as described in IETF RFC 9110, Items 12.4.2/12.5.1,
        # to give the highest priority to json-like headers - recalculating the existing ones, if needed
        return $this->getAcceptHeaderWithAdjustedWeight($accept, $headersWithJson);
    }

    /**
     * Select all items from a list containing a JSON mime type
     *
     * @param array $mimeList
     * @return array
     */
    private function selectJsonMimeList(array $mimeList): array
    {
        $jsonMimeList = [];
        foreach ($mimeList as $mime) {
            if ($this->isJsonMime($mime)) {
                $jsonMimeList[] = $mime;
            }
        }
        return $jsonMimeList;
    }

    /**
     * Detects whether a string contains a valid JSON mime type
     *
     * @param string $searchString
     * @return bool
     */
    private function isJsonMime(string $searchString): bool
    {
        /** @noinspection PhpCoveredCharacterInClassInspection */
        return preg_match('~^application/(json|[\w!#$&.+-^_]+\+json)\s*(;|$)~', $searchString) === 1;
    }

    /**
     * Create an Accept header string from the given "Accept" headers array, recalculating all weights
     *
     * @param string[] $accept Array of Accept Headers
     * @param string[] $headersWithJson Array of Accept Headers of type "json"
     *
     * @return string "Accept" Header (e.g. "application/json, text/html; q=0.9")
     */
    private function getAcceptHeaderWithAdjustedWeight(array $accept, array $headersWithJson): string
    {
        $processedHeaders = [
          'withApplicationJson' => [],
          'withJson' => [],
          'withoutJson' => [],
        ];

        foreach ($accept as $header) {

            $headerData = $this->getHeaderAndWeight($header);

            if (stripos($headerData['header'], 'application/json') === 0) {
                $processedHeaders['withApplicationJson'][] = $headerData;
            } elseif (in_array($header, $headersWithJson, true)) {
                $processedHeaders['withJson'][] = $headerData;
            } else {
                $processedHeaders['withoutJson'][] = $headerData;
            }
        }

        $acceptHeaders = [];
        $currentWeight = 1000;

        $hasMoreThan28Headers = count($accept) > 28;

        foreach ($processedHeaders as $headers) {
            if (count($headers) > 0) {
                $acceptHeaders[] = $this->adjustWeight($headers, $currentWeight, $hasMoreThan28Headers);
            }
        }

        $acceptHeaders = array_merge(...$acceptHeaders);

        return implode(',', $acceptHeaders);
    }

    /**
     * Given an Accept header, returns an associative array splitting the header and its weight
     *
     * @param string $header "Accept" Header
     *
     * @return array with the header and its weight
     */
    private function getHeaderAndWeight(string $header): array
    {
        # matches headers with weight, splitting the header and the weight in $outputArray
        if (preg_match('/(.*);\s*q=(1(?:\.0+)?|0\.\d+)$/', $header, $outputArray) === 1) {
            $headerData = [
              'header' => $outputArray[1],
              'weight' => (int)($outputArray[2] * 1000),
            ];
        } else {
            $headerData = [
              'header' => trim($header),
              'weight' => 1000,
            ];
        }

        return $headerData;
    }

    /**
     * @param array[] $headers
     * @param float $currentWeight
     * @param bool $hasMoreThan28Headers
     * @return string[] array of adjusted "Accept" headers
     */
    private function adjustWeight(array $headers, float &$currentWeight, bool $hasMoreThan28Headers): array
    {
        usort($headers, fn (array $a, array $b) => $b['weight'] - $a['weight']);

        $acceptHeaders = [];
        foreach ($headers as $index => $header) {
            if ($index > 0 && $headers[$index - 1]['weight'] > $header['weight']) {
                $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);
            }

            $weight = $currentWeight;

            $acceptHeaders[] = $this->buildAcceptHeader($header['header'], $weight);
        }

        $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);

        return $acceptHeaders;
    }

    /**
     * Calculate the next weight, based on the current one.
     *
     * If there are less than 28 "Accept" headers, the weights will be decreased by 1 on its highest significant digit, using the
     * following formula:
     *
     *    next weight = current weight - 10 ^ (floor(log(current weight - 1)))
     *
     *    ( current weight minus ( 10 raised to the power of ( floor of (log to the base 10 of ( current weight minus 1 ) ) ) ) )
     *
     * Starting from 1000, this generates the following series:
     *
     * 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
     *
     * The resulting quality codes are closer to the average "normal" usage of them (like "q=0.9", "q=0.8" and so on), but it only works
     * if there is a maximum of 28 "Accept" headers. If we have more than that (which is extremely unlikely), then we fall back to a 1-by-1
     * decrement rule, which will result in quality codes like "q=0.999", "q=0.998" etc.
     *
     * @param int $currentWeight varying from 1 to 1000 (will be divided by 1000 to build the quality value)
     * @param bool $hasMoreThan28Headers
     * @return int
     */
    private function getNextWeight(int $currentWeight, bool $hasMoreThan28Headers): int
    {
        if ($currentWeight <= 1) {
            return 1;
        }

        if ($hasMoreThan28Headers) {
            return $currentWeight - 1;
        }

        return $currentWeight - 10 ** floor(log10($currentWeight - 1));
    }

    /**
     * @param string $header
     * @param int $weight
     * @return string
     */
    private function buildAcceptHeader(string $header, int $weight): string
    {
        if ($weight === 1000) {
            return $header;
        }

        return trim($header, '; ') . ';q=' . rtrim(sprintf('%0.3f', $weight / 1000), '0');
    }


        /**
     * @throws ApiException
     */
    private function executeRequest(
        Request $request,
        array $responseTypes,
        string $defaultResponseType
    ): mixed {
        try {
            $options = $this->createHttpClientOption();
            $response = $this->client->send($request, $options);
        } catch (GuzzleException $e) {
            throw new RuntimeException(
                "API Request failed: [{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                $e
            );
        }

        $statusCode = $response->getStatusCode();
        $responseBody = $response->getBody();
        $responseHeaders = $response->getHeaders();

        if ($statusCode >= 200 && $statusCode < 300) {
            $returnType = $responseTypes[$statusCode] ?? $defaultResponseType;

            if ($returnType === '\SplFileObject') {
                return $responseBody;
            } else {
                $content = (string) $responseBody;

                if (empty(trim($content)) && $returnType !== 'string') {
                    $content = null;
                }

                try {
                    return ObjectSerializer::deserialize($content, $returnType, $this->config, []);
                } catch (Exception $e) {
                    throw new RuntimeException(
                        "Failed to process successful response for status $statusCode",
                        $statusCode,
                        $e
                    );
                }
            }
        } else {
            $errorType = $responseTypes[$statusCode] ?? $defaultResponseType;

            if ($errorType === '\SplFileObject') {
                throw new ApiException(
                    sprintf('[%d] API Error (%s) - Expected file object', $statusCode, $request->getUri()),
                    $statusCode,
                    $responseHeaders,
                    $responseBody
                );
            } elseif ($errorType !== 'string' && !empty(trim((string) $responseBody))) {
                try {
                    $decodedContent = json_decode((string)$responseBody, false, 512, JSON_THROW_ON_ERROR);
                    throw new ApiException(
                        sprintf('[%d] API Error (%s)', $statusCode, (string)$request->getUri()),
                        $statusCode,
                        $responseHeaders,
                        $decodedContent,
                    );
                } catch (ApiException $e) {
                    throw $e;
                } catch (Exception $e) {
                    throw new RuntimeException(
                        "Failed to process error response for status $statusCode",
                        $statusCode,
                        $e
                    );
                }
            } else {
                throw new ApiException(
                    sprintf('[%d] API Error (%s)', $statusCode, $request->getUri()),
                    $statusCode,
                    $responseHeaders,
                    $responseBody
                );
            }
        }
    }

    /**
     * Operation activateOrganization
     *
     * ActivateOrganization
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceActivateOrganizationRequest $betaOrganizationServiceActivateOrganizationRequest betaOrganizationServiceActivateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateOrganization'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceActivateOrganizationResponse
     * @throws ApiException
     */
    public function activateOrganization(    $betaOrganizationServiceActivateOrganizationRequest,string $contentType = self::contentTypes['activateOrganization'][0])
    {
        $request = $this->activateOrganizationRequest($betaOrganizationServiceActivateOrganizationRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceActivateOrganizationResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceActivateOrganizationResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'activateOrganization'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceActivateOrganizationRequest $betaOrganizationServiceActivateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activateOrganization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function activateOrganizationRequest($betaOrganizationServiceActivateOrganizationRequest, string $contentType = self::contentTypes['activateOrganization'][0])
    {

        if ($betaOrganizationServiceActivateOrganizationRequest === null || (is_array($betaOrganizationServiceActivateOrganizationRequest) && count($betaOrganizationServiceActivateOrganizationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceActivateOrganizationRequest when calling activateOrganization'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/ActivateOrganization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceActivateOrganizationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceActivateOrganizationRequest));
            } else {
                $httpBody = $betaOrganizationServiceActivateOrganizationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addOrganizationDomain
     *
     * AddOrganizationDomain
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceAddOrganizationDomainRequest $betaOrganizationServiceAddOrganizationDomainRequest betaOrganizationServiceAddOrganizationDomainRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrganizationDomain'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceAddOrganizationDomainResponse
     * @throws ApiException
     */
    public function addOrganizationDomain(    $betaOrganizationServiceAddOrganizationDomainRequest,string $contentType = self::contentTypes['addOrganizationDomain'][0])
    {
        $request = $this->addOrganizationDomainRequest($betaOrganizationServiceAddOrganizationDomainRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceAddOrganizationDomainResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceAddOrganizationDomainResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'addOrganizationDomain'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceAddOrganizationDomainRequest $betaOrganizationServiceAddOrganizationDomainRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addOrganizationDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function addOrganizationDomainRequest($betaOrganizationServiceAddOrganizationDomainRequest, string $contentType = self::contentTypes['addOrganizationDomain'][0])
    {

        if ($betaOrganizationServiceAddOrganizationDomainRequest === null || (is_array($betaOrganizationServiceAddOrganizationDomainRequest) && count($betaOrganizationServiceAddOrganizationDomainRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceAddOrganizationDomainRequest when calling addOrganizationDomain'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/AddOrganizationDomain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceAddOrganizationDomainRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceAddOrganizationDomainRequest));
            } else {
                $httpBody = $betaOrganizationServiceAddOrganizationDomainRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOrganization
     *
     * CreateOrganization
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceCreateOrganizationRequest $betaOrganizationServiceCreateOrganizationRequest betaOrganizationServiceCreateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganization'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceCreateOrganizationResponse
     * @throws ApiException
     */
    public function createOrganization(    $betaOrganizationServiceCreateOrganizationRequest,string $contentType = self::contentTypes['createOrganization'][0])
    {
        $request = $this->createOrganizationRequest($betaOrganizationServiceCreateOrganizationRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceCreateOrganizationResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceCreateOrganizationResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'createOrganization'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceCreateOrganizationRequest $betaOrganizationServiceCreateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOrganization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function createOrganizationRequest($betaOrganizationServiceCreateOrganizationRequest, string $contentType = self::contentTypes['createOrganization'][0])
    {

        if ($betaOrganizationServiceCreateOrganizationRequest === null || (is_array($betaOrganizationServiceCreateOrganizationRequest) && count($betaOrganizationServiceCreateOrganizationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceCreateOrganizationRequest when calling createOrganization'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/CreateOrganization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceCreateOrganizationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceCreateOrganizationRequest));
            } else {
                $httpBody = $betaOrganizationServiceCreateOrganizationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deactivateOrganization
     *
     * DeactivateOrganization
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeactivateOrganizationRequest $betaOrganizationServiceDeactivateOrganizationRequest betaOrganizationServiceDeactivateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateOrganization'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceDeactivateOrganizationResponse
     * @throws ApiException
     */
    public function deactivateOrganization(    $betaOrganizationServiceDeactivateOrganizationRequest,string $contentType = self::contentTypes['deactivateOrganization'][0])
    {
        $request = $this->deactivateOrganizationRequest($betaOrganizationServiceDeactivateOrganizationRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceDeactivateOrganizationResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceDeactivateOrganizationResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deactivateOrganization'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeactivateOrganizationRequest $betaOrganizationServiceDeactivateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deactivateOrganization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deactivateOrganizationRequest($betaOrganizationServiceDeactivateOrganizationRequest, string $contentType = self::contentTypes['deactivateOrganization'][0])
    {

        if ($betaOrganizationServiceDeactivateOrganizationRequest === null || (is_array($betaOrganizationServiceDeactivateOrganizationRequest) && count($betaOrganizationServiceDeactivateOrganizationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceDeactivateOrganizationRequest when calling deactivateOrganization'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/DeactivateOrganization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceDeactivateOrganizationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceDeactivateOrganizationRequest));
            } else {
                $httpBody = $betaOrganizationServiceDeactivateOrganizationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganization
     *
     * DeleteOrganization
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationRequest $betaOrganizationServiceDeleteOrganizationRequest betaOrganizationServiceDeleteOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganization'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationResponse
     * @throws ApiException
     */
    public function deleteOrganization(    $betaOrganizationServiceDeleteOrganizationRequest,string $contentType = self::contentTypes['deleteOrganization'][0])
    {
        $request = $this->deleteOrganizationRequest($betaOrganizationServiceDeleteOrganizationRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deleteOrganization'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationRequest $betaOrganizationServiceDeleteOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deleteOrganizationRequest($betaOrganizationServiceDeleteOrganizationRequest, string $contentType = self::contentTypes['deleteOrganization'][0])
    {

        if ($betaOrganizationServiceDeleteOrganizationRequest === null || (is_array($betaOrganizationServiceDeleteOrganizationRequest) && count($betaOrganizationServiceDeleteOrganizationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceDeleteOrganizationRequest when calling deleteOrganization'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/DeleteOrganization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceDeleteOrganizationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceDeleteOrganizationRequest));
            } else {
                $httpBody = $betaOrganizationServiceDeleteOrganizationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationDomain
     *
     * DeleteOrganizationDomain
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationDomainRequest $betaOrganizationServiceDeleteOrganizationDomainRequest betaOrganizationServiceDeleteOrganizationDomainRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationDomain'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationDomainResponse
     * @throws ApiException
     */
    public function deleteOrganizationDomain(    $betaOrganizationServiceDeleteOrganizationDomainRequest,string $contentType = self::contentTypes['deleteOrganizationDomain'][0])
    {
        $request = $this->deleteOrganizationDomainRequest($betaOrganizationServiceDeleteOrganizationDomainRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationDomainResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationDomainResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deleteOrganizationDomain'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationDomainRequest $betaOrganizationServiceDeleteOrganizationDomainRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deleteOrganizationDomainRequest($betaOrganizationServiceDeleteOrganizationDomainRequest, string $contentType = self::contentTypes['deleteOrganizationDomain'][0])
    {

        if ($betaOrganizationServiceDeleteOrganizationDomainRequest === null || (is_array($betaOrganizationServiceDeleteOrganizationDomainRequest) && count($betaOrganizationServiceDeleteOrganizationDomainRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceDeleteOrganizationDomainRequest when calling deleteOrganizationDomain'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/DeleteOrganizationDomain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceDeleteOrganizationDomainRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceDeleteOrganizationDomainRequest));
            } else {
                $httpBody = $betaOrganizationServiceDeleteOrganizationDomainRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrganizationMetadata
     *
     * DeleteOrganizationMetadata
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationMetadataRequest $betaOrganizationServiceDeleteOrganizationMetadataRequest betaOrganizationServiceDeleteOrganizationMetadataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationMetadata'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationMetadataResponse
     * @throws ApiException
     */
    public function deleteOrganizationMetadata(    $betaOrganizationServiceDeleteOrganizationMetadataRequest,string $contentType = self::contentTypes['deleteOrganizationMetadata'][0])
    {
        $request = $this->deleteOrganizationMetadataRequest($betaOrganizationServiceDeleteOrganizationMetadataRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationMetadataResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationMetadataResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'deleteOrganizationMetadata'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceDeleteOrganizationMetadataRequest $betaOrganizationServiceDeleteOrganizationMetadataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteOrganizationMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function deleteOrganizationMetadataRequest($betaOrganizationServiceDeleteOrganizationMetadataRequest, string $contentType = self::contentTypes['deleteOrganizationMetadata'][0])
    {

        if ($betaOrganizationServiceDeleteOrganizationMetadataRequest === null || (is_array($betaOrganizationServiceDeleteOrganizationMetadataRequest) && count($betaOrganizationServiceDeleteOrganizationMetadataRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceDeleteOrganizationMetadataRequest when calling deleteOrganizationMetadata'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/DeleteOrganizationMetadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceDeleteOrganizationMetadataRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceDeleteOrganizationMetadataRequest));
            } else {
                $httpBody = $betaOrganizationServiceDeleteOrganizationMetadataRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateOrganizationDomainValidation
     *
     * GenerateOrganizationDomainValidation
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceGenerateOrganizationDomainValidationRequest $betaOrganizationServiceGenerateOrganizationDomainValidationRequest betaOrganizationServiceGenerateOrganizationDomainValidationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateOrganizationDomainValidation'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceGenerateOrganizationDomainValidationResponse
     * @throws ApiException
     */
    public function generateOrganizationDomainValidation(    $betaOrganizationServiceGenerateOrganizationDomainValidationRequest,string $contentType = self::contentTypes['generateOrganizationDomainValidation'][0])
    {
        $request = $this->generateOrganizationDomainValidationRequest($betaOrganizationServiceGenerateOrganizationDomainValidationRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceGenerateOrganizationDomainValidationResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceGenerateOrganizationDomainValidationResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'generateOrganizationDomainValidation'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceGenerateOrganizationDomainValidationRequest $betaOrganizationServiceGenerateOrganizationDomainValidationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateOrganizationDomainValidation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function generateOrganizationDomainValidationRequest($betaOrganizationServiceGenerateOrganizationDomainValidationRequest, string $contentType = self::contentTypes['generateOrganizationDomainValidation'][0])
    {

        if ($betaOrganizationServiceGenerateOrganizationDomainValidationRequest === null || (is_array($betaOrganizationServiceGenerateOrganizationDomainValidationRequest) && count($betaOrganizationServiceGenerateOrganizationDomainValidationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceGenerateOrganizationDomainValidationRequest when calling generateOrganizationDomainValidation'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/GenerateOrganizationDomainValidation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceGenerateOrganizationDomainValidationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceGenerateOrganizationDomainValidationRequest));
            } else {
                $httpBody = $betaOrganizationServiceGenerateOrganizationDomainValidationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOrganizationDomains
     *
     * ListOrganizationDomains
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationDomainsRequest $betaOrganizationServiceListOrganizationDomainsRequest betaOrganizationServiceListOrganizationDomainsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrganizationDomains'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationDomainsResponse
     * @throws ApiException
     */
    public function listOrganizationDomains(    $betaOrganizationServiceListOrganizationDomainsRequest,string $contentType = self::contentTypes['listOrganizationDomains'][0])
    {
        $request = $this->listOrganizationDomainsRequest($betaOrganizationServiceListOrganizationDomainsRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceListOrganizationDomainsResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceListOrganizationDomainsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'listOrganizationDomains'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationDomainsRequest $betaOrganizationServiceListOrganizationDomainsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrganizationDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function listOrganizationDomainsRequest($betaOrganizationServiceListOrganizationDomainsRequest, string $contentType = self::contentTypes['listOrganizationDomains'][0])
    {

        if ($betaOrganizationServiceListOrganizationDomainsRequest === null || (is_array($betaOrganizationServiceListOrganizationDomainsRequest) && count($betaOrganizationServiceListOrganizationDomainsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceListOrganizationDomainsRequest when calling listOrganizationDomains'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/ListOrganizationDomains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceListOrganizationDomainsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceListOrganizationDomainsRequest));
            } else {
                $httpBody = $betaOrganizationServiceListOrganizationDomainsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOrganizationMetadata
     *
     * ListOrganizationMetadata
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationMetadataRequest $betaOrganizationServiceListOrganizationMetadataRequest betaOrganizationServiceListOrganizationMetadataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrganizationMetadata'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationMetadataResponse
     * @throws ApiException
     */
    public function listOrganizationMetadata(    $betaOrganizationServiceListOrganizationMetadataRequest,string $contentType = self::contentTypes['listOrganizationMetadata'][0])
    {
        $request = $this->listOrganizationMetadataRequest($betaOrganizationServiceListOrganizationMetadataRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceListOrganizationMetadataResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceListOrganizationMetadataResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'listOrganizationMetadata'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationMetadataRequest $betaOrganizationServiceListOrganizationMetadataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrganizationMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function listOrganizationMetadataRequest($betaOrganizationServiceListOrganizationMetadataRequest, string $contentType = self::contentTypes['listOrganizationMetadata'][0])
    {

        if ($betaOrganizationServiceListOrganizationMetadataRequest === null || (is_array($betaOrganizationServiceListOrganizationMetadataRequest) && count($betaOrganizationServiceListOrganizationMetadataRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceListOrganizationMetadataRequest when calling listOrganizationMetadata'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/ListOrganizationMetadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceListOrganizationMetadataRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceListOrganizationMetadataRequest));
            } else {
                $httpBody = $betaOrganizationServiceListOrganizationMetadataRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOrganizations
     *
     * ListOrganizations
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationsRequest $betaOrganizationServiceListOrganizationsRequest betaOrganizationServiceListOrganizationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrganizations'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationsResponse
     * @throws ApiException
     */
    public function listOrganizations(    $betaOrganizationServiceListOrganizationsRequest,string $contentType = self::contentTypes['listOrganizations'][0])
    {
        $request = $this->listOrganizationsRequest($betaOrganizationServiceListOrganizationsRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceListOrganizationsResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceListOrganizationsResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'listOrganizations'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceListOrganizationsRequest $betaOrganizationServiceListOrganizationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOrganizations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function listOrganizationsRequest($betaOrganizationServiceListOrganizationsRequest, string $contentType = self::contentTypes['listOrganizations'][0])
    {

        if ($betaOrganizationServiceListOrganizationsRequest === null || (is_array($betaOrganizationServiceListOrganizationsRequest) && count($betaOrganizationServiceListOrganizationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceListOrganizationsRequest when calling listOrganizations'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/ListOrganizations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceListOrganizationsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceListOrganizationsRequest));
            } else {
                $httpBody = $betaOrganizationServiceListOrganizationsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setOrganizationMetadata
     *
     * SetOrganizationMetadata
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceSetOrganizationMetadataRequest $betaOrganizationServiceSetOrganizationMetadataRequest betaOrganizationServiceSetOrganizationMetadataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationMetadata'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceSetOrganizationMetadataResponse
     * @throws ApiException
     */
    public function setOrganizationMetadata(    $betaOrganizationServiceSetOrganizationMetadataRequest,string $contentType = self::contentTypes['setOrganizationMetadata'][0])
    {
        $request = $this->setOrganizationMetadataRequest($betaOrganizationServiceSetOrganizationMetadataRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceSetOrganizationMetadataResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceSetOrganizationMetadataResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'setOrganizationMetadata'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceSetOrganizationMetadataRequest $betaOrganizationServiceSetOrganizationMetadataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function setOrganizationMetadataRequest($betaOrganizationServiceSetOrganizationMetadataRequest, string $contentType = self::contentTypes['setOrganizationMetadata'][0])
    {

        if ($betaOrganizationServiceSetOrganizationMetadataRequest === null || (is_array($betaOrganizationServiceSetOrganizationMetadataRequest) && count($betaOrganizationServiceSetOrganizationMetadataRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceSetOrganizationMetadataRequest when calling setOrganizationMetadata'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/SetOrganizationMetadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceSetOrganizationMetadataRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceSetOrganizationMetadataRequest));
            } else {
                $httpBody = $betaOrganizationServiceSetOrganizationMetadataRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganization
     *
     * UpdateOrganization
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceUpdateOrganizationRequest $betaOrganizationServiceUpdateOrganizationRequest betaOrganizationServiceUpdateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganization'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceUpdateOrganizationResponse
     * @throws ApiException
     */
    public function updateOrganization(    $betaOrganizationServiceUpdateOrganizationRequest,string $contentType = self::contentTypes['updateOrganization'][0])
    {
        $request = $this->updateOrganizationRequest($betaOrganizationServiceUpdateOrganizationRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceUpdateOrganizationResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceUpdateOrganizationResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'updateOrganization'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceUpdateOrganizationRequest $betaOrganizationServiceUpdateOrganizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateOrganization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function updateOrganizationRequest($betaOrganizationServiceUpdateOrganizationRequest, string $contentType = self::contentTypes['updateOrganization'][0])
    {

        if ($betaOrganizationServiceUpdateOrganizationRequest === null || (is_array($betaOrganizationServiceUpdateOrganizationRequest) && count($betaOrganizationServiceUpdateOrganizationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceUpdateOrganizationRequest when calling updateOrganization'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/UpdateOrganization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceUpdateOrganizationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceUpdateOrganizationRequest));
            } else {
                $httpBody = $betaOrganizationServiceUpdateOrganizationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyOrganizationDomain
     *
     * VerifyOrganizationDomain
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceVerifyOrganizationDomainRequest $betaOrganizationServiceVerifyOrganizationDomainRequest betaOrganizationServiceVerifyOrganizationDomainRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyOrganizationDomain'] to see the possible values for this operation
     *
     * @return \Zitadel\Client\Model\BetaOrganizationServiceVerifyOrganizationDomainResponse
     * @throws ApiException
     */
    public function verifyOrganizationDomain(    $betaOrganizationServiceVerifyOrganizationDomainRequest,string $contentType = self::contentTypes['verifyOrganizationDomain'][0])
    {
        $request = $this->verifyOrganizationDomainRequest($betaOrganizationServiceVerifyOrganizationDomainRequest, $contentType);

        $responseTypes = [
            200 => '\Zitadel\Client\Model\BetaOrganizationServiceVerifyOrganizationDomainResponse',
            'default' => '\Zitadel\Client\Model\BetaOrganizationServiceConnectError',
        ];
        $defaultSignatureType = '\Zitadel\Client\Model\BetaOrganizationServiceVerifyOrganizationDomainResponse';
        return $this->executeRequest($request, $responseTypes, $defaultSignatureType);
    }

    /**
     * Create request for operation 'verifyOrganizationDomain'
     *
     * @param  \Zitadel\Client\Model\BetaOrganizationServiceVerifyOrganizationDomainRequest $betaOrganizationServiceVerifyOrganizationDomainRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyOrganizationDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    private function verifyOrganizationDomainRequest($betaOrganizationServiceVerifyOrganizationDomainRequest, string $contentType = self::contentTypes['verifyOrganizationDomain'][0])
    {

        if ($betaOrganizationServiceVerifyOrganizationDomainRequest === null || (is_array($betaOrganizationServiceVerifyOrganizationDomainRequest) && count($betaOrganizationServiceVerifyOrganizationDomainRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaOrganizationServiceVerifyOrganizationDomainRequest when calling verifyOrganizationDomain'
            );
        }


        $resourcePath = '/zitadel.org.v2beta.OrganizationService/VerifyOrganizationDomain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );
        if (isset($betaOrganizationServiceVerifyOrganizationDomainRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaOrganizationServiceVerifyOrganizationDomainRequest));
            } else {
                $httpBody = $betaOrganizationServiceVerifyOrganizationDomainRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                $httpBody = ObjectSerializer::buildQuery($formParams, 'int');
            }
        }

        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams, 'int');
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];


        return $options;
    }
}
