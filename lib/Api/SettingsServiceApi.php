<?php
/**
 * SettingsServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zitadel\Client\ApiException;
use Zitadel\Client\Configuration;
use Zitadel\Client\HeaderSelector;
use Zitadel\Client\ObjectSerializer;

/**
 * SettingsServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SettingsServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'settingsServiceGetActiveIdentityProviders' => [
            'application/json',
        ],
        'settingsServiceGetBrandingSettings' => [
            'application/json',
        ],
        'settingsServiceGetDomainSettings' => [
            'application/json',
        ],
        'settingsServiceGetGeneralSettings' => [
            'application/json',
        ],
        'settingsServiceGetLegalAndSupportSettings' => [
            'application/json',
        ],
        'settingsServiceGetLockoutSettings' => [
            'application/json',
        ],
        'settingsServiceGetLoginSettings' => [
            'application/json',
        ],
        'settingsServiceGetPasswordComplexitySettings' => [
            'application/json',
        ],
        'settingsServiceGetPasswordExpirySettings' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation settingsServiceGetActiveIdentityProviders
     *
     * Get the current active identity providers
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  bool|null $creationAllowed creationAllowed (optional)
     * @param  bool|null $linkingAllowed linkingAllowed (optional)
     * @param  bool|null $autoCreation autoCreation (optional)
     * @param  bool|null $autoLinking autoLinking (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetActiveIdentityProviders'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetActiveIdentityProviders($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null, string $contentType = self::contentTypes['settingsServiceGetActiveIdentityProviders'][0])
    {
        list($response) = $this->settingsServiceGetActiveIdentityProvidersWithHttpInfo($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetActiveIdentityProvidersWithHttpInfo
     *
     * Get the current active identity providers
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  bool|null $creationAllowed (optional)
     * @param  bool|null $linkingAllowed (optional)
     * @param  bool|null $autoCreation (optional)
     * @param  bool|null $autoLinking (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetActiveIdentityProviders'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetActiveIdentityProvidersWithHttpInfo($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null, string $contentType = self::contentTypes['settingsServiceGetActiveIdentityProviders'][0])
    {
        $request = $this->settingsServiceGetActiveIdentityProvidersRequest($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetActiveIdentityProvidersAsync
     *
     * Get the current active identity providers
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  bool|null $creationAllowed (optional)
     * @param  bool|null $linkingAllowed (optional)
     * @param  bool|null $autoCreation (optional)
     * @param  bool|null $autoLinking (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetActiveIdentityProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetActiveIdentityProvidersAsync($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null, string $contentType = self::contentTypes['settingsServiceGetActiveIdentityProviders'][0])
    {
        return $this->settingsServiceGetActiveIdentityProvidersAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetActiveIdentityProvidersAsyncWithHttpInfo
     *
     * Get the current active identity providers
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  bool|null $creationAllowed (optional)
     * @param  bool|null $linkingAllowed (optional)
     * @param  bool|null $autoCreation (optional)
     * @param  bool|null $autoLinking (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetActiveIdentityProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetActiveIdentityProvidersAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null, string $contentType = self::contentTypes['settingsServiceGetActiveIdentityProviders'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetActiveIdentityProvidersResponse';
        $request = $this->settingsServiceGetActiveIdentityProvidersRequest($ctxOrgId, $ctxInstance, $creationAllowed, $linkingAllowed, $autoCreation, $autoLinking, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetActiveIdentityProviders'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  bool|null $creationAllowed (optional)
     * @param  bool|null $linkingAllowed (optional)
     * @param  bool|null $autoCreation (optional)
     * @param  bool|null $autoLinking (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetActiveIdentityProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetActiveIdentityProvidersRequest($ctxOrgId = null, $ctxInstance = null, $creationAllowed = null, $linkingAllowed = null, $autoCreation = null, $autoLinking = null, string $contentType = self::contentTypes['settingsServiceGetActiveIdentityProviders'][0])
    {








        $resourcePath = '/v2/settings/login/idps';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creationAllowed,
            'creationAllowed', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $linkingAllowed,
            'linkingAllowed', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $autoCreation,
            'autoCreation', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $autoLinking,
            'autoLinking', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetBrandingSettings
     *
     * Get the current active branding settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetBrandingSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetBrandingSettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetBrandingSettings'][0])
    {
        list($response) = $this->settingsServiceGetBrandingSettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetBrandingSettingsWithHttpInfo
     *
     * Get the current active branding settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetBrandingSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetBrandingSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetBrandingSettings'][0])
    {
        $request = $this->settingsServiceGetBrandingSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetBrandingSettingsAsync
     *
     * Get the current active branding settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetBrandingSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetBrandingSettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetBrandingSettings'][0])
    {
        return $this->settingsServiceGetBrandingSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetBrandingSettingsAsyncWithHttpInfo
     *
     * Get the current active branding settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetBrandingSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetBrandingSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetBrandingSettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetBrandingSettingsResponse';
        $request = $this->settingsServiceGetBrandingSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetBrandingSettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetBrandingSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetBrandingSettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetBrandingSettings'][0])
    {




        $resourcePath = '/v2/settings/branding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetDomainSettings
     *
     * Get the domain settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetDomainSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetDomainSettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetDomainSettings'][0])
    {
        list($response) = $this->settingsServiceGetDomainSettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetDomainSettingsWithHttpInfo
     *
     * Get the domain settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetDomainSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetDomainSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetDomainSettings'][0])
    {
        $request = $this->settingsServiceGetDomainSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetDomainSettingsAsync
     *
     * Get the domain settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetDomainSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetDomainSettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetDomainSettings'][0])
    {
        return $this->settingsServiceGetDomainSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetDomainSettingsAsyncWithHttpInfo
     *
     * Get the domain settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetDomainSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetDomainSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetDomainSettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetDomainSettingsResponse';
        $request = $this->settingsServiceGetDomainSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetDomainSettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetDomainSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetDomainSettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetDomainSettings'][0])
    {




        $resourcePath = '/v2/settings/domain';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetGeneralSettings
     *
     * Get basic information over the instance
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetGeneralSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetGeneralSettings(string $contentType = self::contentTypes['settingsServiceGetGeneralSettings'][0])
    {
        list($response) = $this->settingsServiceGetGeneralSettingsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetGeneralSettingsWithHttpInfo
     *
     * Get basic information over the instance
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetGeneralSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetGeneralSettingsWithHttpInfo(string $contentType = self::contentTypes['settingsServiceGetGeneralSettings'][0])
    {
        $request = $this->settingsServiceGetGeneralSettingsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetGeneralSettingsAsync
     *
     * Get basic information over the instance
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetGeneralSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetGeneralSettingsAsync(string $contentType = self::contentTypes['settingsServiceGetGeneralSettings'][0])
    {
        return $this->settingsServiceGetGeneralSettingsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetGeneralSettingsAsyncWithHttpInfo
     *
     * Get basic information over the instance
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetGeneralSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetGeneralSettingsAsyncWithHttpInfo(string $contentType = self::contentTypes['settingsServiceGetGeneralSettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetGeneralSettingsResponse';
        $request = $this->settingsServiceGetGeneralSettingsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetGeneralSettings'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetGeneralSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetGeneralSettingsRequest(string $contentType = self::contentTypes['settingsServiceGetGeneralSettings'][0])
    {


        $resourcePath = '/v2/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettings
     *
     * Get the legal and support settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLegalAndSupportSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetLegalAndSupportSettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLegalAndSupportSettings'][0])
    {
        list($response) = $this->settingsServiceGetLegalAndSupportSettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettingsWithHttpInfo
     *
     * Get the legal and support settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLegalAndSupportSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLegalAndSupportSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLegalAndSupportSettings'][0])
    {
        $request = $this->settingsServiceGetLegalAndSupportSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettingsAsync
     *
     * Get the legal and support settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLegalAndSupportSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetLegalAndSupportSettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLegalAndSupportSettings'][0])
    {
        return $this->settingsServiceGetLegalAndSupportSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLegalAndSupportSettingsAsyncWithHttpInfo
     *
     * Get the legal and support settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLegalAndSupportSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetLegalAndSupportSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLegalAndSupportSettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetLegalAndSupportSettingsResponse';
        $request = $this->settingsServiceGetLegalAndSupportSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLegalAndSupportSettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLegalAndSupportSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetLegalAndSupportSettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLegalAndSupportSettings'][0])
    {




        $resourcePath = '/v2/settings/legal_support';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetLockoutSettings
     *
     * Get the lockout settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLockoutSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetLockoutSettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLockoutSettings'][0])
    {
        list($response) = $this->settingsServiceGetLockoutSettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetLockoutSettingsWithHttpInfo
     *
     * Get the lockout settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLockoutSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLockoutSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLockoutSettings'][0])
    {
        $request = $this->settingsServiceGetLockoutSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLockoutSettingsAsync
     *
     * Get the lockout settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLockoutSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetLockoutSettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLockoutSettings'][0])
    {
        return $this->settingsServiceGetLockoutSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLockoutSettingsAsyncWithHttpInfo
     *
     * Get the lockout settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLockoutSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetLockoutSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLockoutSettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetLockoutSettingsResponse';
        $request = $this->settingsServiceGetLockoutSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLockoutSettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLockoutSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetLockoutSettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLockoutSettings'][0])
    {




        $resourcePath = '/v2/settings/lockout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetLoginSettings
     *
     * Get the login settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLoginSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetLoginSettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLoginSettings'][0])
    {
        list($response) = $this->settingsServiceGetLoginSettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetLoginSettingsWithHttpInfo
     *
     * Get the login settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLoginSettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetLoginSettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLoginSettings'][0])
    {
        $request = $this->settingsServiceGetLoginSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetLoginSettingsAsync
     *
     * Get the login settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLoginSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetLoginSettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLoginSettings'][0])
    {
        return $this->settingsServiceGetLoginSettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetLoginSettingsAsyncWithHttpInfo
     *
     * Get the login settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLoginSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetLoginSettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLoginSettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetLoginSettingsResponse';
        $request = $this->settingsServiceGetLoginSettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetLoginSettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetLoginSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetLoginSettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetLoginSettings'][0])
    {




        $resourcePath = '/v2/settings/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettings
     *
     * Get the password complexity settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordComplexitySettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetPasswordComplexitySettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordComplexitySettings'][0])
    {
        list($response) = $this->settingsServiceGetPasswordComplexitySettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettingsWithHttpInfo
     *
     * Get the password complexity settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordComplexitySettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetPasswordComplexitySettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordComplexitySettings'][0])
    {
        $request = $this->settingsServiceGetPasswordComplexitySettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettingsAsync
     *
     * Get the password complexity settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordComplexitySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetPasswordComplexitySettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordComplexitySettings'][0])
    {
        return $this->settingsServiceGetPasswordComplexitySettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetPasswordComplexitySettingsAsyncWithHttpInfo
     *
     * Get the password complexity settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordComplexitySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetPasswordComplexitySettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordComplexitySettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetPasswordComplexitySettingsResponse';
        $request = $this->settingsServiceGetPasswordComplexitySettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetPasswordComplexitySettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordComplexitySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetPasswordComplexitySettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordComplexitySettings'][0])
    {




        $resourcePath = '/v2/settings/password/complexity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettings
     *
     * Get the password expiry settings
     *
     * @param  string|null $ctxOrgId ctxOrgId (optional)
     * @param  bool|null $ctxInstance ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordExpirySettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus
     */
    public function settingsServiceGetPasswordExpirySettings($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordExpirySettings'][0])
    {
        list($response) = $this->settingsServiceGetPasswordExpirySettingsWithHttpInfo($ctxOrgId, $ctxInstance, $contentType);
        return $response;
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettingsWithHttpInfo
     *
     * Get the password expiry settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordExpirySettings'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus|\Zitadel\Client\Model\SettingsServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function settingsServiceGetPasswordExpirySettingsWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordExpirySettings'][0])
    {
        $request = $this->settingsServiceGetPasswordExpirySettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\SettingsServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\SettingsServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\SettingsServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettingsAsync
     *
     * Get the password expiry settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordExpirySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetPasswordExpirySettingsAsync($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordExpirySettings'][0])
    {
        return $this->settingsServiceGetPasswordExpirySettingsAsyncWithHttpInfo($ctxOrgId, $ctxInstance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settingsServiceGetPasswordExpirySettingsAsyncWithHttpInfo
     *
     * Get the password expiry settings
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordExpirySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settingsServiceGetPasswordExpirySettingsAsyncWithHttpInfo($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordExpirySettings'][0])
    {
        $returnType = '\Zitadel\Client\Model\SettingsServiceGetPasswordExpirySettingsResponse';
        $request = $this->settingsServiceGetPasswordExpirySettingsRequest($ctxOrgId, $ctxInstance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settingsServiceGetPasswordExpirySettings'
     *
     * @param  string|null $ctxOrgId (optional)
     * @param  bool|null $ctxInstance (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settingsServiceGetPasswordExpirySettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settingsServiceGetPasswordExpirySettingsRequest($ctxOrgId = null, $ctxInstance = null, string $contentType = self::contentTypes['settingsServiceGetPasswordExpirySettings'][0])
    {




        $resourcePath = '/v2/settings/password/expiry';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxOrgId,
            'ctx.orgId', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ctxInstance,
            'ctx.instance', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
