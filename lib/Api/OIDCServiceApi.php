<?php
/**
 * OIDCServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zitadel\Client\ApiException;
use Zitadel\Client\Configuration;
use Zitadel\Client\ObjectSerializer;

/**
 * OIDCServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OIDCServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'oIDCServiceAuthorizeOrDenyDeviceAuthorization' => [
            'application/json',
        ],
        'oIDCServiceCreateCallback' => [
            'application/json',
        ],
        'oIDCServiceGetAuthRequest' => [
            'application/json',
        ],
        'oIDCServiceGetDeviceAuthorizationRequest' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * @param string[] $accept
     * @param string $contentType
     * @param bool $isMultipart
     * @return string[]
     */
    private function selectHeaders(array $accept, string $contentType, bool $isMultipart): array
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($accept);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        if (!$isMultipart) {
            if ($contentType === '') {
                $contentType = 'application/json';
            }

            $headers['Content-Type'] = $contentType;
        }

        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided.
     *
     * @param string[] $accept Array of header
     *
     * @return null|string Accept (e.g. application/json)
     */
    private function selectAcceptHeader(array $accept): ?string
    {
        # filter out empty entries
        $accept = array_filter($accept);

        if (count($accept) === 0) {
            return null;
        }

        # If there's only one Accept header, just use it
        if (count($accept) === 1) {
            return reset($accept);
        }

        # If none of the available Accept headers is of type "json", then just use all them
        $headersWithJson = $this->selectJsonMimeList($accept);
        if (count($headersWithJson) === 0) {
            return implode(',', $accept);
        }

        # If we got here, then we need add quality values (weight), as described in IETF RFC 9110, Items 12.4.2/12.5.1,
        # to give the highest priority to json-like headers - recalculating the existing ones, if needed
        return $this->getAcceptHeaderWithAdjustedWeight($accept, $headersWithJson);
    }

    /**
     * Select all items from a list containing a JSON mime type
     *
     * @param array $mimeList
     * @return array
     */
    private function selectJsonMimeList(array $mimeList): array
    {
        $jsonMimeList = [];
        foreach ($mimeList as $mime) {
            if ($this->isJsonMime($mime)) {
                $jsonMimeList[] = $mime;
            }
        }
        return $jsonMimeList;
    }

    /**
     * Detects whether a string contains a valid JSON mime type
     *
     * @param string $searchString
     * @return bool
     */
    private function isJsonMime(string $searchString): bool
    {
        /** @noinspection PhpCoveredCharacterInClassInspection */
        return preg_match('~^application/(json|[\w!#$&.+-^_]+\+json)\s*(;|$)~', $searchString) === 1;
    }

    /**
     * Create an Accept header string from the given "Accept" headers array, recalculating all weights
     *
     * @param string[] $accept Array of Accept Headers
     * @param string[] $headersWithJson Array of Accept Headers of type "json"
     *
     * @return string "Accept" Header (e.g. "application/json, text/html; q=0.9")
     */
    private function getAcceptHeaderWithAdjustedWeight(array $accept, array $headersWithJson): string
    {
        $processedHeaders = [
          'withApplicationJson' => [],
          'withJson' => [],
          'withoutJson' => [],
        ];

        foreach ($accept as $header) {

            $headerData = $this->getHeaderAndWeight($header);

            if (stripos($headerData['header'], 'application/json') === 0) {
                $processedHeaders['withApplicationJson'][] = $headerData;
            } elseif (in_array($header, $headersWithJson, true)) {
                $processedHeaders['withJson'][] = $headerData;
            } else {
                $processedHeaders['withoutJson'][] = $headerData;
            }
        }

        $acceptHeaders = [];
        $currentWeight = 1000;

        $hasMoreThan28Headers = count($accept) > 28;

        foreach ($processedHeaders as $headers) {
            if (count($headers) > 0) {
                $acceptHeaders[] = $this->adjustWeight($headers, $currentWeight, $hasMoreThan28Headers);
            }
        }

        $acceptHeaders = array_merge(...$acceptHeaders);

        return implode(',', $acceptHeaders);
    }

    /**
     * Given an Accept header, returns an associative array splitting the header and its weight
     *
     * @param string $header "Accept" Header
     *
     * @return array with the header and its weight
     */
    private function getHeaderAndWeight(string $header): array
    {
        # matches headers with weight, splitting the header and the weight in $outputArray
        if (preg_match('/(.*);\s*q=(1(?:\.0+)?|0\.\d+)$/', $header, $outputArray) === 1) {
            $headerData = [
              'header' => $outputArray[1],
              'weight' => (int)($outputArray[2] * 1000),
            ];
        } else {
            $headerData = [
              'header' => trim($header),
              'weight' => 1000,
            ];
        }

        return $headerData;
    }

    /**
     * @param array[] $headers
     * @param float $currentWeight
     * @param bool $hasMoreThan28Headers
     * @return string[] array of adjusted "Accept" headers
     */
    private function adjustWeight(array $headers, float &$currentWeight, bool $hasMoreThan28Headers): array
    {
        usort($headers, fn (array $a, array $b) => $b['weight'] - $a['weight']);

        $acceptHeaders = [];
        foreach ($headers as $index => $header) {
            if ($index > 0 && $headers[$index - 1]['weight'] > $header['weight']) {
                $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);
            }

            $weight = $currentWeight;

            $acceptHeaders[] = $this->buildAcceptHeader($header['header'], $weight);
        }

        $currentWeight = $this->getNextWeight($currentWeight, $hasMoreThan28Headers);

        return $acceptHeaders;
    }

    /**
     * Calculate the next weight, based on the current one.
     *
     * If there are less than 28 "Accept" headers, the weights will be decreased by 1 on its highest significant digit, using the
     * following formula:
     *
     *    next weight = current weight - 10 ^ (floor(log(current weight - 1)))
     *
     *    ( current weight minus ( 10 raised to the power of ( floor of (log to the base 10 of ( current weight minus 1 ) ) ) ) )
     *
     * Starting from 1000, this generates the following series:
     *
     * 1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
     *
     * The resulting quality codes are closer to the average "normal" usage of them (like "q=0.9", "q=0.8" and so on), but it only works
     * if there is a maximum of 28 "Accept" headers. If we have more than that (which is extremely unlikely), then we fall back to a 1-by-1
     * decrement rule, which will result in quality codes like "q=0.999", "q=0.998" etc.
     *
     * @param int $currentWeight varying from 1 to 1000 (will be divided by 1000 to build the quality value)
     * @param bool $hasMoreThan28Headers
     * @return int
     */
    private function getNextWeight(int $currentWeight, bool $hasMoreThan28Headers): int
    {
        if ($currentWeight <= 1) {
            return 1;
        }

        if ($hasMoreThan28Headers) {
            return $currentWeight - 1;
        }

        return $currentWeight - 10 ** floor(log10($currentWeight - 1));
    }

    /**
     * @param string $header
     * @param int $weight
     * @return string
     */
    private function buildAcceptHeader(string $header, int $weight): string
    {
        if ($weight === 1000) {
            return $header;
        }

        return trim($header, '; ') . ';q=' . rtrim(sprintf('%0.3f', $weight / 1000), '0');
    }


    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorization
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorization($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, string $contentType = self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'][0])
    {
        list($response) = $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationWithHttpInfo($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, $contentType);
        return $response;
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorizationWithHttpInfo
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationWithHttpInfo($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, string $contentType = self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'][0])
    {
        $request = $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsync
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsync($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, string $contentType = self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'][0])
    {
        return $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsyncWithHttpInfo($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsyncWithHttpInfo
     *
     * Authorize or deny device authorization
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationAsyncWithHttpInfo($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, string $contentType = self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'][0])
    {
        $returnType = 'object';
        $request = $this->oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceAuthorizeOrDenyDeviceAuthorization'
     *
     * @param  string $deviceAuthorizationId The device authorization id returned when submitting the user code. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest($deviceAuthorizationId, $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest, string $contentType = self::contentTypes['oIDCServiceAuthorizeOrDenyDeviceAuthorization'][0])
    {

        // verify the required parameter 'deviceAuthorizationId' is set
        if ($deviceAuthorizationId === null || (is_array($deviceAuthorizationId) && count($deviceAuthorizationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deviceAuthorizationId when calling oIDCServiceAuthorizeOrDenyDeviceAuthorization'
            );
        }

        // verify the required parameter 'oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest' is set
        if ($oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest === null || (is_array($oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest) && count($oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest when calling oIDCServiceAuthorizeOrDenyDeviceAuthorization'
            );
        }


        $resourcePath = '/v2/oidc/device_authorization/{deviceAuthorizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($deviceAuthorizationId !== null) {
            $resourcePath = str_replace(
                '{' . 'deviceAuthorizationId' . '}',
                ObjectSerializer::toPathValue($deviceAuthorizationId),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest));
            } else {
                $httpBody = $oIDCServiceAuthorizeOrDenyDeviceAuthorizationRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oIDCServiceCreateCallback
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceCreateCallbackRequest $oIDCServiceCreateCallbackRequest oIDCServiceCreateCallbackRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceCreateCallback'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\OIDCServiceCreateCallbackResponse|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus
     */
    public function oIDCServiceCreateCallback($authRequestId, $oIDCServiceCreateCallbackRequest, string $contentType = self::contentTypes['oIDCServiceCreateCallback'][0])
    {
        list($response) = $this->oIDCServiceCreateCallbackWithHttpInfo($authRequestId, $oIDCServiceCreateCallbackRequest, $contentType);
        return $response;
    }

    /**
     * Operation oIDCServiceCreateCallbackWithHttpInfo
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceCreateCallbackRequest $oIDCServiceCreateCallbackRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceCreateCallback'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\OIDCServiceCreateCallbackResponse|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceCreateCallbackWithHttpInfo($authRequestId, $oIDCServiceCreateCallbackRequest, string $contentType = self::contentTypes['oIDCServiceCreateCallback'][0])
    {
        $request = $this->oIDCServiceCreateCallbackRequest($authRequestId, $oIDCServiceCreateCallbackRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\OIDCServiceCreateCallbackResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceCreateCallbackResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceCreateCallbackResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\OIDCServiceCreateCallbackResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceCreateCallbackResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceCreateCallbackAsync
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceCreateCallbackRequest $oIDCServiceCreateCallbackRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceCreateCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceCreateCallbackAsync($authRequestId, $oIDCServiceCreateCallbackRequest, string $contentType = self::contentTypes['oIDCServiceCreateCallback'][0])
    {
        return $this->oIDCServiceCreateCallbackAsyncWithHttpInfo($authRequestId, $oIDCServiceCreateCallbackRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceCreateCallbackAsyncWithHttpInfo
     *
     * Finalize an Auth Request and get the callback URL.
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceCreateCallbackRequest $oIDCServiceCreateCallbackRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceCreateCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceCreateCallbackAsyncWithHttpInfo($authRequestId, $oIDCServiceCreateCallbackRequest, string $contentType = self::contentTypes['oIDCServiceCreateCallback'][0])
    {
        $returnType = '\Zitadel\Client\Model\OIDCServiceCreateCallbackResponse';
        $request = $this->oIDCServiceCreateCallbackRequest($authRequestId, $oIDCServiceCreateCallbackRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceCreateCallback'
     *
     * @param  string $authRequestId ID of the Auth Request. (required)
     * @param  \Zitadel\Client\Model\OIDCServiceCreateCallbackRequest $oIDCServiceCreateCallbackRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceCreateCallback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oIDCServiceCreateCallbackRequest($authRequestId, $oIDCServiceCreateCallbackRequest, string $contentType = self::contentTypes['oIDCServiceCreateCallback'][0])
    {

        // verify the required parameter 'authRequestId' is set
        if ($authRequestId === null || (is_array($authRequestId) && count($authRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authRequestId when calling oIDCServiceCreateCallback'
            );
        }

        // verify the required parameter 'oIDCServiceCreateCallbackRequest' is set
        if ($oIDCServiceCreateCallbackRequest === null || (is_array($oIDCServiceCreateCallbackRequest) && count($oIDCServiceCreateCallbackRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oIDCServiceCreateCallbackRequest when calling oIDCServiceCreateCallback'
            );
        }


        $resourcePath = '/v2/oidc/auth_requests/{authRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($authRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'authRequestId' . '}',
                ObjectSerializer::toPathValue($authRequestId),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oIDCServiceCreateCallbackRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oIDCServiceCreateCallbackRequest));
            } else {
                $httpBody = $oIDCServiceCreateCallbackRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oIDCServiceGetAuthRequest
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetAuthRequest'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus
     */
    public function oIDCServiceGetAuthRequest($authRequestId, string $contentType = self::contentTypes['oIDCServiceGetAuthRequest'][0])
    {
        list($response) = $this->oIDCServiceGetAuthRequestWithHttpInfo($authRequestId, $contentType);
        return $response;
    }

    /**
     * Operation oIDCServiceGetAuthRequestWithHttpInfo
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetAuthRequest'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceGetAuthRequestWithHttpInfo($authRequestId, string $contentType = self::contentTypes['oIDCServiceGetAuthRequest'][0])
    {
        $request = $this->oIDCServiceGetAuthRequestRequest($authRequestId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceGetAuthRequestAsync
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceGetAuthRequestAsync($authRequestId, string $contentType = self::contentTypes['oIDCServiceGetAuthRequest'][0])
    {
        return $this->oIDCServiceGetAuthRequestAsyncWithHttpInfo($authRequestId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceGetAuthRequestAsyncWithHttpInfo
     *
     * Get OIDC Auth Request details
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceGetAuthRequestAsyncWithHttpInfo($authRequestId, string $contentType = self::contentTypes['oIDCServiceGetAuthRequest'][0])
    {
        $returnType = '\Zitadel\Client\Model\OIDCServiceGetAuthRequestResponse';
        $request = $this->oIDCServiceGetAuthRequestRequest($authRequestId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceGetAuthRequest'
     *
     * @param  string $authRequestId ID of the Auth Request, as obtained from the redirect URL. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetAuthRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oIDCServiceGetAuthRequestRequest($authRequestId, string $contentType = self::contentTypes['oIDCServiceGetAuthRequest'][0])
    {

        // verify the required parameter 'authRequestId' is set
        if ($authRequestId === null || (is_array($authRequestId) && count($authRequestId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authRequestId when calling oIDCServiceGetAuthRequest'
            );
        }


        $resourcePath = '/v2/oidc/auth_requests/{authRequestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($authRequestId !== null) {
            $resourcePath = str_replace(
                '{' . 'authRequestId' . '}',
                ObjectSerializer::toPathValue($authRequestId),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequest
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus
     */
    public function oIDCServiceGetDeviceAuthorizationRequest($userCode, string $contentType = self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'][0])
    {
        list($response) = $this->oIDCServiceGetDeviceAuthorizationRequestWithHttpInfo($userCode, $contentType);
        return $response;
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequestWithHttpInfo
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus|\Zitadel\Client\Model\OIDCServiceRpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function oIDCServiceGetDeviceAuthorizationRequestWithHttpInfo($userCode, string $contentType = self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'][0])
    {
        $request = $this->oIDCServiceGetDeviceAuthorizationRequestRequest($userCode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\OIDCServiceRpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\OIDCServiceRpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\OIDCServiceRpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequestAsync
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceGetDeviceAuthorizationRequestAsync($userCode, string $contentType = self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'][0])
    {
        return $this->oIDCServiceGetDeviceAuthorizationRequestAsyncWithHttpInfo($userCode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oIDCServiceGetDeviceAuthorizationRequestAsyncWithHttpInfo
     *
     * Get device authorization request
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oIDCServiceGetDeviceAuthorizationRequestAsyncWithHttpInfo($userCode, string $contentType = self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'][0])
    {
        $returnType = '\Zitadel\Client\Model\OIDCServiceGetDeviceAuthorizationRequestResponse';
        $request = $this->oIDCServiceGetDeviceAuthorizationRequestRequest($userCode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oIDCServiceGetDeviceAuthorizationRequest'
     *
     * @param  string $userCode The user_code returned by the device authorization request and provided to the user by the device. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oIDCServiceGetDeviceAuthorizationRequestRequest($userCode, string $contentType = self::contentTypes['oIDCServiceGetDeviceAuthorizationRequest'][0])
    {

        // verify the required parameter 'userCode' is set
        if ($userCode === null || (is_array($userCode) && count($userCode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userCode when calling oIDCServiceGetDeviceAuthorizationRequest'
            );
        }


        $resourcePath = '/v2/oidc/device_authorization/{userCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($userCode !== null) {
            $resourcePath = str_replace(
                '{' . 'userCode' . '}',
                ObjectSerializer::toPathValue($userCode),
                $resourcePath
            );
        }


        $headers = $this->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
