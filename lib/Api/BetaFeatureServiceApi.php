<?php
/**
 * BetaFeatureServiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Zitadel\Client\ApiException;
use Zitadel\Client\Configuration;
use Zitadel\Client\HeaderSelector;
use Zitadel\Client\ObjectSerializer;

/**
 * BetaFeatureServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BetaFeatureServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getInstanceFeatures' => [
            'application/json',
        ],
        'getOrganizationFeatures' => [
            'application/json',
        ],
        'getSystemFeatures' => [
            'application/json',
        ],
        'getUserFeatures' => [
            'application/json',
        ],
        'resetInstanceFeatures' => [
            'application/json',
        ],
        'resetOrganizationFeatures' => [
            'application/json',
        ],
        'resetSystemFeatures' => [
            'application/json',
        ],
        'resetUserFeatures' => [
            'application/json',
        ],
        'setInstanceFeatures' => [
            'application/json',
        ],
        'setOrganizationFeatures' => [
            'application/json',
        ],
        'setSystemFeatures' => [
            'application/json',
        ],
        'setUserFeatures' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getInstanceFeatures
     *
     * GetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesRequest $betaFeatureServiceGetInstanceFeaturesRequest betaFeatureServiceGetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function getInstanceFeatures($betaFeatureServiceGetInstanceFeaturesRequest, string $contentType = self::contentTypes['getInstanceFeatures'][0])
    {
        list($response) = $this->getInstanceFeaturesWithHttpInfo($betaFeatureServiceGetInstanceFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getInstanceFeaturesWithHttpInfo
     *
     * GetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesRequest $betaFeatureServiceGetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstanceFeaturesWithHttpInfo($betaFeatureServiceGetInstanceFeaturesRequest, string $contentType = self::contentTypes['getInstanceFeatures'][0])
    {
        $request = $this->getInstanceFeaturesRequest($betaFeatureServiceGetInstanceFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstanceFeaturesAsync
     *
     * GetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesRequest $betaFeatureServiceGetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstanceFeaturesAsync($betaFeatureServiceGetInstanceFeaturesRequest, string $contentType = self::contentTypes['getInstanceFeatures'][0])
    {
        return $this->getInstanceFeaturesAsyncWithHttpInfo($betaFeatureServiceGetInstanceFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstanceFeaturesAsyncWithHttpInfo
     *
     * GetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesRequest $betaFeatureServiceGetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstanceFeaturesAsyncWithHttpInfo($betaFeatureServiceGetInstanceFeaturesRequest, string $contentType = self::contentTypes['getInstanceFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesResponse';
        $request = $this->getInstanceFeaturesRequest($betaFeatureServiceGetInstanceFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstanceFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetInstanceFeaturesRequest $betaFeatureServiceGetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstanceFeaturesRequest($betaFeatureServiceGetInstanceFeaturesRequest, string $contentType = self::contentTypes['getInstanceFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceGetInstanceFeaturesRequest' is set
        if ($betaFeatureServiceGetInstanceFeaturesRequest === null || (is_array($betaFeatureServiceGetInstanceFeaturesRequest) && count($betaFeatureServiceGetInstanceFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceGetInstanceFeaturesRequest when calling getInstanceFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/GetInstanceFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceGetInstanceFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceGetInstanceFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceGetInstanceFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganizationFeatures
     *
     * GetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesRequest $betaFeatureServiceGetOrganizationFeaturesRequest betaFeatureServiceGetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function getOrganizationFeatures($betaFeatureServiceGetOrganizationFeaturesRequest, string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        list($response) = $this->getOrganizationFeaturesWithHttpInfo($betaFeatureServiceGetOrganizationFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getOrganizationFeaturesWithHttpInfo
     *
     * GetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesRequest $betaFeatureServiceGetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganizationFeaturesWithHttpInfo($betaFeatureServiceGetOrganizationFeaturesRequest, string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        $request = $this->getOrganizationFeaturesRequest($betaFeatureServiceGetOrganizationFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganizationFeaturesAsync
     *
     * GetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesRequest $betaFeatureServiceGetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFeaturesAsync($betaFeatureServiceGetOrganizationFeaturesRequest, string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        return $this->getOrganizationFeaturesAsyncWithHttpInfo($betaFeatureServiceGetOrganizationFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganizationFeaturesAsyncWithHttpInfo
     *
     * GetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesRequest $betaFeatureServiceGetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganizationFeaturesAsyncWithHttpInfo($betaFeatureServiceGetOrganizationFeaturesRequest, string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesResponse';
        $request = $this->getOrganizationFeaturesRequest($betaFeatureServiceGetOrganizationFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganizationFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetOrganizationFeaturesRequest $betaFeatureServiceGetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrganizationFeaturesRequest($betaFeatureServiceGetOrganizationFeaturesRequest, string $contentType = self::contentTypes['getOrganizationFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceGetOrganizationFeaturesRequest' is set
        if ($betaFeatureServiceGetOrganizationFeaturesRequest === null || (is_array($betaFeatureServiceGetOrganizationFeaturesRequest) && count($betaFeatureServiceGetOrganizationFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceGetOrganizationFeaturesRequest when calling getOrganizationFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/GetOrganizationFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceGetOrganizationFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceGetOrganizationFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceGetOrganizationFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSystemFeatures
     *
     * GetSystemFeatures
     *
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function getSystemFeatures($body, string $contentType = self::contentTypes['getSystemFeatures'][0])
    {
        list($response) = $this->getSystemFeaturesWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation getSystemFeaturesWithHttpInfo
     *
     * GetSystemFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSystemFeaturesWithHttpInfo($body, string $contentType = self::contentTypes['getSystemFeatures'][0])
    {
        $request = $this->getSystemFeaturesRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSystemFeaturesAsync
     *
     * GetSystemFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemFeaturesAsync($body, string $contentType = self::contentTypes['getSystemFeatures'][0])
    {
        return $this->getSystemFeaturesAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSystemFeaturesAsyncWithHttpInfo
     *
     * GetSystemFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSystemFeaturesAsyncWithHttpInfo($body, string $contentType = self::contentTypes['getSystemFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetSystemFeaturesResponse';
        $request = $this->getSystemFeaturesRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSystemFeatures'
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSystemFeaturesRequest($body, string $contentType = self::contentTypes['getSystemFeatures'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling getSystemFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/GetSystemFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserFeatures
     *
     * GetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesRequest $betaFeatureServiceGetUserFeaturesRequest betaFeatureServiceGetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function getUserFeatures($betaFeatureServiceGetUserFeaturesRequest, string $contentType = self::contentTypes['getUserFeatures'][0])
    {
        list($response) = $this->getUserFeaturesWithHttpInfo($betaFeatureServiceGetUserFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getUserFeaturesWithHttpInfo
     *
     * GetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesRequest $betaFeatureServiceGetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserFeaturesWithHttpInfo($betaFeatureServiceGetUserFeaturesRequest, string $contentType = self::contentTypes['getUserFeatures'][0])
    {
        $request = $this->getUserFeaturesRequest($betaFeatureServiceGetUserFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserFeaturesAsync
     *
     * GetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesRequest $betaFeatureServiceGetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserFeaturesAsync($betaFeatureServiceGetUserFeaturesRequest, string $contentType = self::contentTypes['getUserFeatures'][0])
    {
        return $this->getUserFeaturesAsyncWithHttpInfo($betaFeatureServiceGetUserFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserFeaturesAsyncWithHttpInfo
     *
     * GetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesRequest $betaFeatureServiceGetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserFeaturesAsyncWithHttpInfo($betaFeatureServiceGetUserFeaturesRequest, string $contentType = self::contentTypes['getUserFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesResponse';
        $request = $this->getUserFeaturesRequest($betaFeatureServiceGetUserFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceGetUserFeaturesRequest $betaFeatureServiceGetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserFeaturesRequest($betaFeatureServiceGetUserFeaturesRequest, string $contentType = self::contentTypes['getUserFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceGetUserFeaturesRequest' is set
        if ($betaFeatureServiceGetUserFeaturesRequest === null || (is_array($betaFeatureServiceGetUserFeaturesRequest) && count($betaFeatureServiceGetUserFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceGetUserFeaturesRequest when calling getUserFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/GetUserFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceGetUserFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceGetUserFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceGetUserFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetInstanceFeatures
     *
     * ResetInstanceFeatures
     *
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function resetInstanceFeatures($body, string $contentType = self::contentTypes['resetInstanceFeatures'][0])
    {
        list($response) = $this->resetInstanceFeaturesWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation resetInstanceFeaturesWithHttpInfo
     *
     * ResetInstanceFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetInstanceFeaturesWithHttpInfo($body, string $contentType = self::contentTypes['resetInstanceFeatures'][0])
    {
        $request = $this->resetInstanceFeaturesRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetInstanceFeaturesAsync
     *
     * ResetInstanceFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetInstanceFeaturesAsync($body, string $contentType = self::contentTypes['resetInstanceFeatures'][0])
    {
        return $this->resetInstanceFeaturesAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetInstanceFeaturesAsyncWithHttpInfo
     *
     * ResetInstanceFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetInstanceFeaturesAsyncWithHttpInfo($body, string $contentType = self::contentTypes['resetInstanceFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetInstanceFeaturesResponse';
        $request = $this->resetInstanceFeaturesRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetInstanceFeatures'
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetInstanceFeaturesRequest($body, string $contentType = self::contentTypes['resetInstanceFeatures'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling resetInstanceFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/ResetInstanceFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetOrganizationFeatures
     *
     * ResetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesRequest $betaFeatureServiceResetOrganizationFeaturesRequest betaFeatureServiceResetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function resetOrganizationFeatures($betaFeatureServiceResetOrganizationFeaturesRequest, string $contentType = self::contentTypes['resetOrganizationFeatures'][0])
    {
        list($response) = $this->resetOrganizationFeaturesWithHttpInfo($betaFeatureServiceResetOrganizationFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation resetOrganizationFeaturesWithHttpInfo
     *
     * ResetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesRequest $betaFeatureServiceResetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetOrganizationFeaturesWithHttpInfo($betaFeatureServiceResetOrganizationFeaturesRequest, string $contentType = self::contentTypes['resetOrganizationFeatures'][0])
    {
        $request = $this->resetOrganizationFeaturesRequest($betaFeatureServiceResetOrganizationFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetOrganizationFeaturesAsync
     *
     * ResetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesRequest $betaFeatureServiceResetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetOrganizationFeaturesAsync($betaFeatureServiceResetOrganizationFeaturesRequest, string $contentType = self::contentTypes['resetOrganizationFeatures'][0])
    {
        return $this->resetOrganizationFeaturesAsyncWithHttpInfo($betaFeatureServiceResetOrganizationFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetOrganizationFeaturesAsyncWithHttpInfo
     *
     * ResetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesRequest $betaFeatureServiceResetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetOrganizationFeaturesAsyncWithHttpInfo($betaFeatureServiceResetOrganizationFeaturesRequest, string $contentType = self::contentTypes['resetOrganizationFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesResponse';
        $request = $this->resetOrganizationFeaturesRequest($betaFeatureServiceResetOrganizationFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetOrganizationFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetOrganizationFeaturesRequest $betaFeatureServiceResetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetOrganizationFeaturesRequest($betaFeatureServiceResetOrganizationFeaturesRequest, string $contentType = self::contentTypes['resetOrganizationFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceResetOrganizationFeaturesRequest' is set
        if ($betaFeatureServiceResetOrganizationFeaturesRequest === null || (is_array($betaFeatureServiceResetOrganizationFeaturesRequest) && count($betaFeatureServiceResetOrganizationFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceResetOrganizationFeaturesRequest when calling resetOrganizationFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/ResetOrganizationFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceResetOrganizationFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceResetOrganizationFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceResetOrganizationFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetSystemFeatures
     *
     * ResetSystemFeatures
     *
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSystemFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function resetSystemFeatures($body, string $contentType = self::contentTypes['resetSystemFeatures'][0])
    {
        list($response) = $this->resetSystemFeaturesWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation resetSystemFeaturesWithHttpInfo
     *
     * ResetSystemFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSystemFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetSystemFeaturesWithHttpInfo($body, string $contentType = self::contentTypes['resetSystemFeatures'][0])
    {
        $request = $this->resetSystemFeaturesRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetSystemFeaturesAsync
     *
     * ResetSystemFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetSystemFeaturesAsync($body, string $contentType = self::contentTypes['resetSystemFeatures'][0])
    {
        return $this->resetSystemFeaturesAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetSystemFeaturesAsyncWithHttpInfo
     *
     * ResetSystemFeatures
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetSystemFeaturesAsyncWithHttpInfo($body, string $contentType = self::contentTypes['resetSystemFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetSystemFeaturesResponse';
        $request = $this->resetSystemFeaturesRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetSystemFeatures'
     *
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetSystemFeaturesRequest($body, string $contentType = self::contentTypes['resetSystemFeatures'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling resetSystemFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/ResetSystemFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resetUserFeatures
     *
     * ResetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesRequest $betaFeatureServiceResetUserFeaturesRequest betaFeatureServiceResetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function resetUserFeatures($betaFeatureServiceResetUserFeaturesRequest, string $contentType = self::contentTypes['resetUserFeatures'][0])
    {
        list($response) = $this->resetUserFeaturesWithHttpInfo($betaFeatureServiceResetUserFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation resetUserFeaturesWithHttpInfo
     *
     * ResetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesRequest $betaFeatureServiceResetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetUserFeaturesWithHttpInfo($betaFeatureServiceResetUserFeaturesRequest, string $contentType = self::contentTypes['resetUserFeatures'][0])
    {
        $request = $this->resetUserFeaturesRequest($betaFeatureServiceResetUserFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resetUserFeaturesAsync
     *
     * ResetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesRequest $betaFeatureServiceResetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetUserFeaturesAsync($betaFeatureServiceResetUserFeaturesRequest, string $contentType = self::contentTypes['resetUserFeatures'][0])
    {
        return $this->resetUserFeaturesAsyncWithHttpInfo($betaFeatureServiceResetUserFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resetUserFeaturesAsyncWithHttpInfo
     *
     * ResetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesRequest $betaFeatureServiceResetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resetUserFeaturesAsyncWithHttpInfo($betaFeatureServiceResetUserFeaturesRequest, string $contentType = self::contentTypes['resetUserFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesResponse';
        $request = $this->resetUserFeaturesRequest($betaFeatureServiceResetUserFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resetUserFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceResetUserFeaturesRequest $betaFeatureServiceResetUserFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resetUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resetUserFeaturesRequest($betaFeatureServiceResetUserFeaturesRequest, string $contentType = self::contentTypes['resetUserFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceResetUserFeaturesRequest' is set
        if ($betaFeatureServiceResetUserFeaturesRequest === null || (is_array($betaFeatureServiceResetUserFeaturesRequest) && count($betaFeatureServiceResetUserFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceResetUserFeaturesRequest when calling resetUserFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/ResetUserFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceResetUserFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceResetUserFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceResetUserFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setInstanceFeatures
     *
     * SetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesRequest $betaFeatureServiceSetInstanceFeaturesRequest betaFeatureServiceSetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function setInstanceFeatures($betaFeatureServiceSetInstanceFeaturesRequest, string $contentType = self::contentTypes['setInstanceFeatures'][0])
    {
        list($response) = $this->setInstanceFeaturesWithHttpInfo($betaFeatureServiceSetInstanceFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation setInstanceFeaturesWithHttpInfo
     *
     * SetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesRequest $betaFeatureServiceSetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setInstanceFeaturesWithHttpInfo($betaFeatureServiceSetInstanceFeaturesRequest, string $contentType = self::contentTypes['setInstanceFeatures'][0])
    {
        $request = $this->setInstanceFeaturesRequest($betaFeatureServiceSetInstanceFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setInstanceFeaturesAsync
     *
     * SetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesRequest $betaFeatureServiceSetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setInstanceFeaturesAsync($betaFeatureServiceSetInstanceFeaturesRequest, string $contentType = self::contentTypes['setInstanceFeatures'][0])
    {
        return $this->setInstanceFeaturesAsyncWithHttpInfo($betaFeatureServiceSetInstanceFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setInstanceFeaturesAsyncWithHttpInfo
     *
     * SetInstanceFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesRequest $betaFeatureServiceSetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setInstanceFeaturesAsyncWithHttpInfo($betaFeatureServiceSetInstanceFeaturesRequest, string $contentType = self::contentTypes['setInstanceFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesResponse';
        $request = $this->setInstanceFeaturesRequest($betaFeatureServiceSetInstanceFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setInstanceFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetInstanceFeaturesRequest $betaFeatureServiceSetInstanceFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setInstanceFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setInstanceFeaturesRequest($betaFeatureServiceSetInstanceFeaturesRequest, string $contentType = self::contentTypes['setInstanceFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceSetInstanceFeaturesRequest' is set
        if ($betaFeatureServiceSetInstanceFeaturesRequest === null || (is_array($betaFeatureServiceSetInstanceFeaturesRequest) && count($betaFeatureServiceSetInstanceFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceSetInstanceFeaturesRequest when calling setInstanceFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/SetInstanceFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceSetInstanceFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceSetInstanceFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceSetInstanceFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setOrganizationFeatures
     *
     * SetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesRequest $betaFeatureServiceSetOrganizationFeaturesRequest betaFeatureServiceSetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function setOrganizationFeatures($betaFeatureServiceSetOrganizationFeaturesRequest, string $contentType = self::contentTypes['setOrganizationFeatures'][0])
    {
        list($response) = $this->setOrganizationFeaturesWithHttpInfo($betaFeatureServiceSetOrganizationFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation setOrganizationFeaturesWithHttpInfo
     *
     * SetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesRequest $betaFeatureServiceSetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setOrganizationFeaturesWithHttpInfo($betaFeatureServiceSetOrganizationFeaturesRequest, string $contentType = self::contentTypes['setOrganizationFeatures'][0])
    {
        $request = $this->setOrganizationFeaturesRequest($betaFeatureServiceSetOrganizationFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setOrganizationFeaturesAsync
     *
     * SetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesRequest $betaFeatureServiceSetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setOrganizationFeaturesAsync($betaFeatureServiceSetOrganizationFeaturesRequest, string $contentType = self::contentTypes['setOrganizationFeatures'][0])
    {
        return $this->setOrganizationFeaturesAsyncWithHttpInfo($betaFeatureServiceSetOrganizationFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setOrganizationFeaturesAsyncWithHttpInfo
     *
     * SetOrganizationFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesRequest $betaFeatureServiceSetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setOrganizationFeaturesAsyncWithHttpInfo($betaFeatureServiceSetOrganizationFeaturesRequest, string $contentType = self::contentTypes['setOrganizationFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesResponse';
        $request = $this->setOrganizationFeaturesRequest($betaFeatureServiceSetOrganizationFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setOrganizationFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetOrganizationFeaturesRequest $betaFeatureServiceSetOrganizationFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setOrganizationFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setOrganizationFeaturesRequest($betaFeatureServiceSetOrganizationFeaturesRequest, string $contentType = self::contentTypes['setOrganizationFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceSetOrganizationFeaturesRequest' is set
        if ($betaFeatureServiceSetOrganizationFeaturesRequest === null || (is_array($betaFeatureServiceSetOrganizationFeaturesRequest) && count($betaFeatureServiceSetOrganizationFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceSetOrganizationFeaturesRequest when calling setOrganizationFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/SetOrganizationFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceSetOrganizationFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceSetOrganizationFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceSetOrganizationFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setSystemFeatures
     *
     * SetSystemFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesRequest $betaFeatureServiceSetSystemFeaturesRequest betaFeatureServiceSetSystemFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSystemFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function setSystemFeatures($betaFeatureServiceSetSystemFeaturesRequest, string $contentType = self::contentTypes['setSystemFeatures'][0])
    {
        list($response) = $this->setSystemFeaturesWithHttpInfo($betaFeatureServiceSetSystemFeaturesRequest, $contentType);
        return $response;
    }

    /**
     * Operation setSystemFeaturesWithHttpInfo
     *
     * SetSystemFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesRequest $betaFeatureServiceSetSystemFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSystemFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSystemFeaturesWithHttpInfo($betaFeatureServiceSetSystemFeaturesRequest, string $contentType = self::contentTypes['setSystemFeatures'][0])
    {
        $request = $this->setSystemFeaturesRequest($betaFeatureServiceSetSystemFeaturesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSystemFeaturesAsync
     *
     * SetSystemFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesRequest $betaFeatureServiceSetSystemFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSystemFeaturesAsync($betaFeatureServiceSetSystemFeaturesRequest, string $contentType = self::contentTypes['setSystemFeatures'][0])
    {
        return $this->setSystemFeaturesAsyncWithHttpInfo($betaFeatureServiceSetSystemFeaturesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSystemFeaturesAsyncWithHttpInfo
     *
     * SetSystemFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesRequest $betaFeatureServiceSetSystemFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSystemFeaturesAsyncWithHttpInfo($betaFeatureServiceSetSystemFeaturesRequest, string $contentType = self::contentTypes['setSystemFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesResponse';
        $request = $this->setSystemFeaturesRequest($betaFeatureServiceSetSystemFeaturesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setSystemFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetSystemFeaturesRequest $betaFeatureServiceSetSystemFeaturesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSystemFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setSystemFeaturesRequest($betaFeatureServiceSetSystemFeaturesRequest, string $contentType = self::contentTypes['setSystemFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceSetSystemFeaturesRequest' is set
        if ($betaFeatureServiceSetSystemFeaturesRequest === null || (is_array($betaFeatureServiceSetSystemFeaturesRequest) && count($betaFeatureServiceSetSystemFeaturesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceSetSystemFeaturesRequest when calling setSystemFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/SetSystemFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceSetSystemFeaturesRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceSetSystemFeaturesRequest));
            } else {
                $httpBody = $betaFeatureServiceSetSystemFeaturesRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserFeatures
     *
     * SetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetUserFeatureRequest $betaFeatureServiceSetUserFeatureRequest betaFeatureServiceSetUserFeatureRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError
     */
    public function setUserFeatures($betaFeatureServiceSetUserFeatureRequest, string $contentType = self::contentTypes['setUserFeatures'][0])
    {
        list($response) = $this->setUserFeaturesWithHttpInfo($betaFeatureServiceSetUserFeatureRequest, $contentType);
        return $response;
    }

    /**
     * Operation setUserFeaturesWithHttpInfo
     *
     * SetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetUserFeatureRequest $betaFeatureServiceSetUserFeatureRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserFeatures'] to see the possible values for this operation
     *
     * @throws \Zitadel\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse|\Zitadel\Client\Model\BetaFeatureServiceConnectError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserFeaturesWithHttpInfo($betaFeatureServiceSetUserFeatureRequest, string $contentType = self::contentTypes['setUserFeatures'][0])
    {
        $request = $this->setUserFeaturesRequest($betaFeatureServiceSetUserFeatureRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Zitadel\Client\Model\BetaFeatureServiceConnectError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Zitadel\Client\Model\BetaFeatureServiceConnectError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Zitadel\Client\Model\BetaFeatureServiceConnectError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setUserFeaturesAsync
     *
     * SetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetUserFeatureRequest $betaFeatureServiceSetUserFeatureRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserFeaturesAsync($betaFeatureServiceSetUserFeatureRequest, string $contentType = self::contentTypes['setUserFeatures'][0])
    {
        return $this->setUserFeaturesAsyncWithHttpInfo($betaFeatureServiceSetUserFeatureRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setUserFeaturesAsyncWithHttpInfo
     *
     * SetUserFeatures
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetUserFeatureRequest $betaFeatureServiceSetUserFeatureRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserFeaturesAsyncWithHttpInfo($betaFeatureServiceSetUserFeatureRequest, string $contentType = self::contentTypes['setUserFeatures'][0])
    {
        $returnType = '\Zitadel\Client\Model\BetaFeatureServiceSetUserFeaturesResponse';
        $request = $this->setUserFeaturesRequest($betaFeatureServiceSetUserFeatureRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setUserFeatures'
     *
     * @param  \Zitadel\Client\Model\BetaFeatureServiceSetUserFeatureRequest $betaFeatureServiceSetUserFeatureRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserFeatures'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setUserFeaturesRequest($betaFeatureServiceSetUserFeatureRequest, string $contentType = self::contentTypes['setUserFeatures'][0])
    {

        // verify the required parameter 'betaFeatureServiceSetUserFeatureRequest' is set
        if ($betaFeatureServiceSetUserFeatureRequest === null || (is_array($betaFeatureServiceSetUserFeatureRequest) && count($betaFeatureServiceSetUserFeatureRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $betaFeatureServiceSetUserFeatureRequest when calling setUserFeatures'
            );
        }


        $resourcePath = '/zitadel.feature.v2beta.FeatureService/SetUserFeatures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($betaFeatureServiceSetUserFeatureRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($betaFeatureServiceSetUserFeatureRequest));
            } else {
                $httpBody = $betaFeatureServiceSetUserFeatureRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
