<?php
/**
 * SettingsServiceLoginSettings
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * SettingsServiceLoginSettings Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SettingsServiceLoginSettings implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SettingsServiceLoginSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowUsernamePassword' => 'bool',
        'allowRegister' => 'bool',
        'allowExternalIdp' => 'bool',
        'forceMfa' => 'bool',
        'passkeysType' => '\Zitadel\Client\Model\SettingsServicePasskeysType',
        'hidePasswordReset' => 'bool',
        'ignoreUnknownUsernames' => 'bool',
        'defaultRedirectUri' => 'string',
        'passwordCheckLifetime' => 'string',
        'externalLoginCheckLifetime' => 'string',
        'mfaInitSkipLifetime' => 'string',
        'secondFactorCheckLifetime' => 'string',
        'multiFactorCheckLifetime' => 'string',
        'secondFactors' => '\Zitadel\Client\Model\SettingsServiceSecondFactorType[]',
        'multiFactors' => '\Zitadel\Client\Model\SettingsServiceMultiFactorType[]',
        'allowDomainDiscovery' => 'bool',
        'disableLoginWithEmail' => 'bool',
        'disableLoginWithPhone' => 'bool',
        'resourceOwnerType' => '\Zitadel\Client\Model\SettingsServiceResourceOwnerType',
        'forceMfaLocalOnly' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowUsernamePassword' => null,
        'allowRegister' => null,
        'allowExternalIdp' => null,
        'forceMfa' => null,
        'passkeysType' => null,
        'hidePasswordReset' => null,
        'ignoreUnknownUsernames' => null,
        'defaultRedirectUri' => null,
        'passwordCheckLifetime' => null,
        'externalLoginCheckLifetime' => null,
        'mfaInitSkipLifetime' => null,
        'secondFactorCheckLifetime' => null,
        'multiFactorCheckLifetime' => null,
        'secondFactors' => null,
        'multiFactors' => null,
        'allowDomainDiscovery' => null,
        'disableLoginWithEmail' => null,
        'disableLoginWithPhone' => null,
        'resourceOwnerType' => null,
        'forceMfaLocalOnly' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowUsernamePassword' => false,
        'allowRegister' => false,
        'allowExternalIdp' => false,
        'forceMfa' => false,
        'passkeysType' => false,
        'hidePasswordReset' => false,
        'ignoreUnknownUsernames' => false,
        'defaultRedirectUri' => false,
        'passwordCheckLifetime' => false,
        'externalLoginCheckLifetime' => false,
        'mfaInitSkipLifetime' => false,
        'secondFactorCheckLifetime' => false,
        'multiFactorCheckLifetime' => false,
        'secondFactors' => false,
        'multiFactors' => false,
        'allowDomainDiscovery' => false,
        'disableLoginWithEmail' => false,
        'disableLoginWithPhone' => false,
        'resourceOwnerType' => false,
        'forceMfaLocalOnly' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowUsernamePassword' => 'allowUsernamePassword',
        'allowRegister' => 'allowRegister',
        'allowExternalIdp' => 'allowExternalIdp',
        'forceMfa' => 'forceMfa',
        'passkeysType' => 'passkeysType',
        'hidePasswordReset' => 'hidePasswordReset',
        'ignoreUnknownUsernames' => 'ignoreUnknownUsernames',
        'defaultRedirectUri' => 'defaultRedirectUri',
        'passwordCheckLifetime' => 'passwordCheckLifetime',
        'externalLoginCheckLifetime' => 'externalLoginCheckLifetime',
        'mfaInitSkipLifetime' => 'mfaInitSkipLifetime',
        'secondFactorCheckLifetime' => 'secondFactorCheckLifetime',
        'multiFactorCheckLifetime' => 'multiFactorCheckLifetime',
        'secondFactors' => 'secondFactors',
        'multiFactors' => 'multiFactors',
        'allowDomainDiscovery' => 'allowDomainDiscovery',
        'disableLoginWithEmail' => 'disableLoginWithEmail',
        'disableLoginWithPhone' => 'disableLoginWithPhone',
        'resourceOwnerType' => 'resourceOwnerType',
        'forceMfaLocalOnly' => 'forceMfaLocalOnly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowUsernamePassword' => 'setAllowUsernamePassword',
        'allowRegister' => 'setAllowRegister',
        'allowExternalIdp' => 'setAllowExternalIdp',
        'forceMfa' => 'setForceMfa',
        'passkeysType' => 'setPasskeysType',
        'hidePasswordReset' => 'setHidePasswordReset',
        'ignoreUnknownUsernames' => 'setIgnoreUnknownUsernames',
        'defaultRedirectUri' => 'setDefaultRedirectUri',
        'passwordCheckLifetime' => 'setPasswordCheckLifetime',
        'externalLoginCheckLifetime' => 'setExternalLoginCheckLifetime',
        'mfaInitSkipLifetime' => 'setMfaInitSkipLifetime',
        'secondFactorCheckLifetime' => 'setSecondFactorCheckLifetime',
        'multiFactorCheckLifetime' => 'setMultiFactorCheckLifetime',
        'secondFactors' => 'setSecondFactors',
        'multiFactors' => 'setMultiFactors',
        'allowDomainDiscovery' => 'setAllowDomainDiscovery',
        'disableLoginWithEmail' => 'setDisableLoginWithEmail',
        'disableLoginWithPhone' => 'setDisableLoginWithPhone',
        'resourceOwnerType' => 'setResourceOwnerType',
        'forceMfaLocalOnly' => 'setForceMfaLocalOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowUsernamePassword' => 'getAllowUsernamePassword',
        'allowRegister' => 'getAllowRegister',
        'allowExternalIdp' => 'getAllowExternalIdp',
        'forceMfa' => 'getForceMfa',
        'passkeysType' => 'getPasskeysType',
        'hidePasswordReset' => 'getHidePasswordReset',
        'ignoreUnknownUsernames' => 'getIgnoreUnknownUsernames',
        'defaultRedirectUri' => 'getDefaultRedirectUri',
        'passwordCheckLifetime' => 'getPasswordCheckLifetime',
        'externalLoginCheckLifetime' => 'getExternalLoginCheckLifetime',
        'mfaInitSkipLifetime' => 'getMfaInitSkipLifetime',
        'secondFactorCheckLifetime' => 'getSecondFactorCheckLifetime',
        'multiFactorCheckLifetime' => 'getMultiFactorCheckLifetime',
        'secondFactors' => 'getSecondFactors',
        'multiFactors' => 'getMultiFactors',
        'allowDomainDiscovery' => 'getAllowDomainDiscovery',
        'disableLoginWithEmail' => 'getDisableLoginWithEmail',
        'disableLoginWithPhone' => 'getDisableLoginWithPhone',
        'resourceOwnerType' => 'getResourceOwnerType',
        'forceMfaLocalOnly' => 'getForceMfaLocalOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('allowUsernamePassword', $data ?? [], null);
        $this->setIfExists('allowRegister', $data ?? [], null);
        $this->setIfExists('allowExternalIdp', $data ?? [], null);
        $this->setIfExists('forceMfa', $data ?? [], null);
        $this->setIfExists('passkeysType', $data ?? [], null);
        $this->setIfExists('hidePasswordReset', $data ?? [], null);
        $this->setIfExists('ignoreUnknownUsernames', $data ?? [], null);
        $this->setIfExists('defaultRedirectUri', $data ?? [], null);
        $this->setIfExists('passwordCheckLifetime', $data ?? [], null);
        $this->setIfExists('externalLoginCheckLifetime', $data ?? [], null);
        $this->setIfExists('mfaInitSkipLifetime', $data ?? [], null);
        $this->setIfExists('secondFactorCheckLifetime', $data ?? [], null);
        $this->setIfExists('multiFactorCheckLifetime', $data ?? [], null);
        $this->setIfExists('secondFactors', $data ?? [], null);
        $this->setIfExists('multiFactors', $data ?? [], null);
        $this->setIfExists('allowDomainDiscovery', $data ?? [], null);
        $this->setIfExists('disableLoginWithEmail', $data ?? [], null);
        $this->setIfExists('disableLoginWithPhone', $data ?? [], null);
        $this->setIfExists('resourceOwnerType', $data ?? [], null);
        $this->setIfExists('forceMfaLocalOnly', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowUsernamePassword
     *
     * @return bool|null
     */
    public function getAllowUsernamePassword()
    {
        return $this->container['allowUsernamePassword'];
    }

    /**
     * Sets allowUsernamePassword
     *
     * @param bool|null $allowUsernamePassword defines if a user is allowed to log in with username and password
     *
     * @return self
     */
    public function setAllowUsernamePassword($allowUsernamePassword)
    {
        if (is_null($allowUsernamePassword)) {
            throw new \InvalidArgumentException('non-nullable allowUsernamePassword cannot be null');
        }
        $this->container['allowUsernamePassword'] = $allowUsernamePassword;

        return $this;
    }

    /**
     * Gets allowRegister
     *
     * @return bool|null
     */
    public function getAllowRegister()
    {
        return $this->container['allowRegister'];
    }

    /**
     * Sets allowRegister
     *
     * @param bool|null $allowRegister defines if a person is allowed to register a user on this organization
     *
     * @return self
     */
    public function setAllowRegister($allowRegister)
    {
        if (is_null($allowRegister)) {
            throw new \InvalidArgumentException('non-nullable allowRegister cannot be null');
        }
        $this->container['allowRegister'] = $allowRegister;

        return $this;
    }

    /**
     * Gets allowExternalIdp
     *
     * @return bool|null
     */
    public function getAllowExternalIdp()
    {
        return $this->container['allowExternalIdp'];
    }

    /**
     * Sets allowExternalIdp
     *
     * @param bool|null $allowExternalIdp defines if a user is allowed to add a defined identity provider. E.g. Google auth
     *
     * @return self
     */
    public function setAllowExternalIdp($allowExternalIdp)
    {
        if (is_null($allowExternalIdp)) {
            throw new \InvalidArgumentException('non-nullable allowExternalIdp cannot be null');
        }
        $this->container['allowExternalIdp'] = $allowExternalIdp;

        return $this;
    }

    /**
     * Gets forceMfa
     *
     * @return bool|null
     */
    public function getForceMfa()
    {
        return $this->container['forceMfa'];
    }

    /**
     * Sets forceMfa
     *
     * @param bool|null $forceMfa defines if a user MUST use a multi-factor to log in
     *
     * @return self
     */
    public function setForceMfa($forceMfa)
    {
        if (is_null($forceMfa)) {
            throw new \InvalidArgumentException('non-nullable forceMfa cannot be null');
        }
        $this->container['forceMfa'] = $forceMfa;

        return $this;
    }

    /**
     * Gets passkeysType
     *
     * @return \Zitadel\Client\Model\SettingsServicePasskeysType|null
     */
    public function getPasskeysType()
    {
        return $this->container['passkeysType'];
    }

    /**
     * Sets passkeysType
     *
     * @param \Zitadel\Client\Model\SettingsServicePasskeysType|null $passkeysType passkeysType
     *
     * @return self
     */
    public function setPasskeysType($passkeysType)
    {
        if (is_null($passkeysType)) {
            throw new \InvalidArgumentException('non-nullable passkeysType cannot be null');
        }
        $this->container['passkeysType'] = $passkeysType;

        return $this;
    }

    /**
     * Gets hidePasswordReset
     *
     * @return bool|null
     */
    public function getHidePasswordReset()
    {
        return $this->container['hidePasswordReset'];
    }

    /**
     * Sets hidePasswordReset
     *
     * @param bool|null $hidePasswordReset defines if password reset link should be shown in the login screen
     *
     * @return self
     */
    public function setHidePasswordReset($hidePasswordReset)
    {
        if (is_null($hidePasswordReset)) {
            throw new \InvalidArgumentException('non-nullable hidePasswordReset cannot be null');
        }
        $this->container['hidePasswordReset'] = $hidePasswordReset;

        return $this;
    }

    /**
     * Gets ignoreUnknownUsernames
     *
     * @return bool|null
     */
    public function getIgnoreUnknownUsernames()
    {
        return $this->container['ignoreUnknownUsernames'];
    }

    /**
     * Sets ignoreUnknownUsernames
     *
     * @param bool|null $ignoreUnknownUsernames defines if unknown username on login screen directly returns an error or always displays the password screen
     *
     * @return self
     */
    public function setIgnoreUnknownUsernames($ignoreUnknownUsernames)
    {
        if (is_null($ignoreUnknownUsernames)) {
            throw new \InvalidArgumentException('non-nullable ignoreUnknownUsernames cannot be null');
        }
        $this->container['ignoreUnknownUsernames'] = $ignoreUnknownUsernames;

        return $this;
    }

    /**
     * Gets defaultRedirectUri
     *
     * @return string|null
     */
    public function getDefaultRedirectUri()
    {
        return $this->container['defaultRedirectUri'];
    }

    /**
     * Sets defaultRedirectUri
     *
     * @param string|null $defaultRedirectUri defines where the user will be redirected to if the login is started without app context (e.g. from mail)
     *
     * @return self
     */
    public function setDefaultRedirectUri($defaultRedirectUri)
    {
        if (is_null($defaultRedirectUri)) {
            throw new \InvalidArgumentException('non-nullable defaultRedirectUri cannot be null');
        }
        $this->container['defaultRedirectUri'] = $defaultRedirectUri;

        return $this;
    }

    /**
     * Gets passwordCheckLifetime
     *
     * @return string|null
     */
    public function getPasswordCheckLifetime()
    {
        return $this->container['passwordCheckLifetime'];
    }

    /**
     * Sets passwordCheckLifetime
     *
     * @param string|null $passwordCheckLifetime Defines after how much time the user has to re-authenticate with the password.
     *
     * @return self
     */
    public function setPasswordCheckLifetime($passwordCheckLifetime)
    {
        if (is_null($passwordCheckLifetime)) {
            throw new \InvalidArgumentException('non-nullable passwordCheckLifetime cannot be null');
        }
        $this->container['passwordCheckLifetime'] = $passwordCheckLifetime;

        return $this;
    }

    /**
     * Gets externalLoginCheckLifetime
     *
     * @return string|null
     */
    public function getExternalLoginCheckLifetime()
    {
        return $this->container['externalLoginCheckLifetime'];
    }

    /**
     * Sets externalLoginCheckLifetime
     *
     * @param string|null $externalLoginCheckLifetime Defines after how much time the user has to re-authenticate with an external provider.
     *
     * @return self
     */
    public function setExternalLoginCheckLifetime($externalLoginCheckLifetime)
    {
        if (is_null($externalLoginCheckLifetime)) {
            throw new \InvalidArgumentException('non-nullable externalLoginCheckLifetime cannot be null');
        }
        $this->container['externalLoginCheckLifetime'] = $externalLoginCheckLifetime;

        return $this;
    }

    /**
     * Gets mfaInitSkipLifetime
     *
     * @return string|null
     */
    public function getMfaInitSkipLifetime()
    {
        return $this->container['mfaInitSkipLifetime'];
    }

    /**
     * Sets mfaInitSkipLifetime
     *
     * @param string|null $mfaInitSkipLifetime Defines after how much time the mfa prompt will be shown again.
     *
     * @return self
     */
    public function setMfaInitSkipLifetime($mfaInitSkipLifetime)
    {
        if (is_null($mfaInitSkipLifetime)) {
            throw new \InvalidArgumentException('non-nullable mfaInitSkipLifetime cannot be null');
        }
        $this->container['mfaInitSkipLifetime'] = $mfaInitSkipLifetime;

        return $this;
    }

    /**
     * Gets secondFactorCheckLifetime
     *
     * @return string|null
     */
    public function getSecondFactorCheckLifetime()
    {
        return $this->container['secondFactorCheckLifetime'];
    }

    /**
     * Sets secondFactorCheckLifetime
     *
     * @param string|null $secondFactorCheckLifetime Defines after how long the second factor check is valid.
     *
     * @return self
     */
    public function setSecondFactorCheckLifetime($secondFactorCheckLifetime)
    {
        if (is_null($secondFactorCheckLifetime)) {
            throw new \InvalidArgumentException('non-nullable secondFactorCheckLifetime cannot be null');
        }
        $this->container['secondFactorCheckLifetime'] = $secondFactorCheckLifetime;

        return $this;
    }

    /**
     * Gets multiFactorCheckLifetime
     *
     * @return string|null
     */
    public function getMultiFactorCheckLifetime()
    {
        return $this->container['multiFactorCheckLifetime'];
    }

    /**
     * Sets multiFactorCheckLifetime
     *
     * @param string|null $multiFactorCheckLifetime Defines how long the multi-factor check is valid.
     *
     * @return self
     */
    public function setMultiFactorCheckLifetime($multiFactorCheckLifetime)
    {
        if (is_null($multiFactorCheckLifetime)) {
            throw new \InvalidArgumentException('non-nullable multiFactorCheckLifetime cannot be null');
        }
        $this->container['multiFactorCheckLifetime'] = $multiFactorCheckLifetime;

        return $this;
    }

    /**
     * Gets secondFactors
     *
     * @return \Zitadel\Client\Model\SettingsServiceSecondFactorType[]|null
     */
    public function getSecondFactors()
    {
        return $this->container['secondFactors'];
    }

    /**
     * Sets secondFactors
     *
     * @param \Zitadel\Client\Model\SettingsServiceSecondFactorType[]|null $secondFactors secondFactors
     *
     * @return self
     */
    public function setSecondFactors($secondFactors)
    {
        if (is_null($secondFactors)) {
            throw new \InvalidArgumentException('non-nullable secondFactors cannot be null');
        }
        $this->container['secondFactors'] = $secondFactors;

        return $this;
    }

    /**
     * Gets multiFactors
     *
     * @return \Zitadel\Client\Model\SettingsServiceMultiFactorType[]|null
     */
    public function getMultiFactors()
    {
        return $this->container['multiFactors'];
    }

    /**
     * Sets multiFactors
     *
     * @param \Zitadel\Client\Model\SettingsServiceMultiFactorType[]|null $multiFactors multiFactors
     *
     * @return self
     */
    public function setMultiFactors($multiFactors)
    {
        if (is_null($multiFactors)) {
            throw new \InvalidArgumentException('non-nullable multiFactors cannot be null');
        }
        $this->container['multiFactors'] = $multiFactors;

        return $this;
    }

    /**
     * Gets allowDomainDiscovery
     *
     * @return bool|null
     */
    public function getAllowDomainDiscovery()
    {
        return $this->container['allowDomainDiscovery'];
    }

    /**
     * Sets allowDomainDiscovery
     *
     * @param bool|null $allowDomainDiscovery If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success.
     *
     * @return self
     */
    public function setAllowDomainDiscovery($allowDomainDiscovery)
    {
        if (is_null($allowDomainDiscovery)) {
            throw new \InvalidArgumentException('non-nullable allowDomainDiscovery cannot be null');
        }
        $this->container['allowDomainDiscovery'] = $allowDomainDiscovery;

        return $this;
    }

    /**
     * Gets disableLoginWithEmail
     *
     * @return bool|null
     */
    public function getDisableLoginWithEmail()
    {
        return $this->container['disableLoginWithEmail'];
    }

    /**
     * Sets disableLoginWithEmail
     *
     * @param bool|null $disableLoginWithEmail defines if the user can additionally (to the login name) be identified by their verified email address
     *
     * @return self
     */
    public function setDisableLoginWithEmail($disableLoginWithEmail)
    {
        if (is_null($disableLoginWithEmail)) {
            throw new \InvalidArgumentException('non-nullable disableLoginWithEmail cannot be null');
        }
        $this->container['disableLoginWithEmail'] = $disableLoginWithEmail;

        return $this;
    }

    /**
     * Gets disableLoginWithPhone
     *
     * @return bool|null
     */
    public function getDisableLoginWithPhone()
    {
        return $this->container['disableLoginWithPhone'];
    }

    /**
     * Sets disableLoginWithPhone
     *
     * @param bool|null $disableLoginWithPhone defines if the user can additionally (to the login name) be identified by their verified phone number
     *
     * @return self
     */
    public function setDisableLoginWithPhone($disableLoginWithPhone)
    {
        if (is_null($disableLoginWithPhone)) {
            throw new \InvalidArgumentException('non-nullable disableLoginWithPhone cannot be null');
        }
        $this->container['disableLoginWithPhone'] = $disableLoginWithPhone;

        return $this;
    }

    /**
     * Gets resourceOwnerType
     *
     * @return \Zitadel\Client\Model\SettingsServiceResourceOwnerType|null
     */
    public function getResourceOwnerType()
    {
        return $this->container['resourceOwnerType'];
    }

    /**
     * Sets resourceOwnerType
     *
     * @param \Zitadel\Client\Model\SettingsServiceResourceOwnerType|null $resourceOwnerType resourceOwnerType
     *
     * @return self
     */
    public function setResourceOwnerType($resourceOwnerType)
    {
        if (is_null($resourceOwnerType)) {
            throw new \InvalidArgumentException('non-nullable resourceOwnerType cannot be null');
        }
        $this->container['resourceOwnerType'] = $resourceOwnerType;

        return $this;
    }

    /**
     * Gets forceMfaLocalOnly
     *
     * @return bool|null
     */
    public function getForceMfaLocalOnly()
    {
        return $this->container['forceMfaLocalOnly'];
    }

    /**
     * Sets forceMfaLocalOnly
     *
     * @param bool|null $forceMfaLocalOnly if activated, only local authenticated users are forced to use MFA. Authentication through IDPs won't prompt a MFA step in the login.
     *
     * @return self
     */
    public function setForceMfaLocalOnly($forceMfaLocalOnly)
    {
        if (is_null($forceMfaLocalOnly)) {
            throw new \InvalidArgumentException('non-nullable forceMfaLocalOnly cannot be null');
        }
        $this->container['forceMfaLocalOnly'] = $forceMfaLocalOnly;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


