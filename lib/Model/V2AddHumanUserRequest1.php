<?php
/**
 * V2AddHumanUserRequest1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * V2AddHumanUserRequest1 Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V2AddHumanUserRequest1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v2AddHumanUserRequest_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'string',
        'username' => 'string',
        'organization' => '\Zitadel\Client\Model\V2Organization',
        'profile' => '\Zitadel\Client\Model\V2SetHumanProfile1',
        'email' => '\Zitadel\Client\Model\V2SetHumanEmail1',
        'phone' => '\Zitadel\Client\Model\V2SetHumanPhone1',
        'metadata' => '\Zitadel\Client\Model\V2SetMetadataEntry1[]',
        'password' => '\Zitadel\Client\Model\V2Password',
        'hashedPassword' => '\Zitadel\Client\Model\V2HashedPassword',
        'idpLinks' => '\Zitadel\Client\Model\V2IDPLink[]',
        'totpSecret' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => null,
        'username' => null,
        'organization' => null,
        'profile' => null,
        'email' => null,
        'phone' => null,
        'metadata' => null,
        'password' => null,
        'hashedPassword' => null,
        'idpLinks' => null,
        'totpSecret' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => false,
        'username' => false,
        'organization' => false,
        'profile' => false,
        'email' => false,
        'phone' => false,
        'metadata' => false,
        'password' => false,
        'hashedPassword' => false,
        'idpLinks' => false,
        'totpSecret' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'userId',
        'username' => 'username',
        'organization' => 'organization',
        'profile' => 'profile',
        'email' => 'email',
        'phone' => 'phone',
        'metadata' => 'metadata',
        'password' => 'password',
        'hashedPassword' => 'hashedPassword',
        'idpLinks' => 'idpLinks',
        'totpSecret' => 'totpSecret'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'username' => 'setUsername',
        'organization' => 'setOrganization',
        'profile' => 'setProfile',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'metadata' => 'setMetadata',
        'password' => 'setPassword',
        'hashedPassword' => 'setHashedPassword',
        'idpLinks' => 'setIdpLinks',
        'totpSecret' => 'setTotpSecret'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'username' => 'getUsername',
        'organization' => 'getOrganization',
        'profile' => 'getProfile',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'metadata' => 'getMetadata',
        'password' => 'getPassword',
        'hashedPassword' => 'getHashedPassword',
        'idpLinks' => 'getIdpLinks',
        'totpSecret' => 'getTotpSecret'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('organization', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('password', $data ?? [], null);
        $this->setIfExists('hashedPassword', $data ?? [], null);
        $this->setIfExists('idpLinks', $data ?? [], null);
        $this->setIfExists('totpSecret', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['userId']) && (mb_strlen($this->container['userId']) > 200)) {
            $invalidProperties[] = "invalid value for 'userId', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['userId']) && (mb_strlen($this->container['userId']) < 1)) {
            $invalidProperties[] = "invalid value for 'userId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 200)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['profile'] === null) {
            $invalidProperties[] = "'profile' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if (!is_null($this->container['totpSecret']) && (mb_strlen($this->container['totpSecret']) > 200)) {
            $invalidProperties[] = "invalid value for 'totpSecret', the character length must be smaller than or equal to 200.";
        }

        if (!is_null($this->container['totpSecret']) && (mb_strlen($this->container['totpSecret']) < 1)) {
            $invalidProperties[] = "invalid value for 'totpSecret', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId optionally set your own id unique for the user.
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        if ((mb_strlen($userId) > 200)) {
            throw new \InvalidArgumentException('invalid length for $userId when calling V2AddHumanUserRequest1., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($userId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $userId when calling V2AddHumanUserRequest1., must be bigger than or equal to 1.');
        }

        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username optionally set a unique username, if none is provided the email will be used.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        if ((mb_strlen($username) > 200)) {
            throw new \InvalidArgumentException('invalid length for $username when calling V2AddHumanUserRequest1., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling V2AddHumanUserRequest1., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Zitadel\Client\Model\V2Organization|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Zitadel\Client\Model\V2Organization|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        if (is_null($organization)) {
            throw new \InvalidArgumentException('non-nullable organization cannot be null');
        }
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Zitadel\Client\Model\V2SetHumanProfile1
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Zitadel\Client\Model\V2SetHumanProfile1 $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Zitadel\Client\Model\V2SetHumanEmail1
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Zitadel\Client\Model\V2SetHumanEmail1 $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Zitadel\Client\Model\V2SetHumanPhone1|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Zitadel\Client\Model\V2SetHumanPhone1|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Zitadel\Client\Model\V2SetMetadataEntry1[]|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Zitadel\Client\Model\V2SetMetadataEntry1[]|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets password
     *
     * @return \Zitadel\Client\Model\V2Password|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param \Zitadel\Client\Model\V2Password|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (is_null($password)) {
            throw new \InvalidArgumentException('non-nullable password cannot be null');
        }
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets hashedPassword
     *
     * @return \Zitadel\Client\Model\V2HashedPassword|null
     */
    public function getHashedPassword()
    {
        return $this->container['hashedPassword'];
    }

    /**
     * Sets hashedPassword
     *
     * @param \Zitadel\Client\Model\V2HashedPassword|null $hashedPassword hashedPassword
     *
     * @return self
     */
    public function setHashedPassword($hashedPassword)
    {
        if (is_null($hashedPassword)) {
            throw new \InvalidArgumentException('non-nullable hashedPassword cannot be null');
        }
        $this->container['hashedPassword'] = $hashedPassword;

        return $this;
    }

    /**
     * Gets idpLinks
     *
     * @return \Zitadel\Client\Model\V2IDPLink[]|null
     */
    public function getIdpLinks()
    {
        return $this->container['idpLinks'];
    }

    /**
     * Sets idpLinks
     *
     * @param \Zitadel\Client\Model\V2IDPLink[]|null $idpLinks idpLinks
     *
     * @return self
     */
    public function setIdpLinks($idpLinks)
    {
        if (is_null($idpLinks)) {
            throw new \InvalidArgumentException('non-nullable idpLinks cannot be null');
        }
        $this->container['idpLinks'] = $idpLinks;

        return $this;
    }

    /**
     * Gets totpSecret
     *
     * @return string|null
     */
    public function getTotpSecret()
    {
        return $this->container['totpSecret'];
    }

    /**
     * Sets totpSecret
     *
     * @param string|null $totpSecret An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds. Currently no other options are supported, and if anything different is used the validation will fail.
     *
     * @return self
     */
    public function setTotpSecret($totpSecret)
    {
        if (is_null($totpSecret)) {
            throw new \InvalidArgumentException('non-nullable totpSecret cannot be null');
        }
        if ((mb_strlen($totpSecret) > 200)) {
            throw new \InvalidArgumentException('invalid length for $totpSecret when calling V2AddHumanUserRequest1., must be smaller than or equal to 200.');
        }
        if ((mb_strlen($totpSecret) < 1)) {
            throw new \InvalidArgumentException('invalid length for $totpSecret when calling V2AddHumanUserRequest1., must be bigger than or equal to 1.');
        }

        $this->container['totpSecret'] = $totpSecret;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


