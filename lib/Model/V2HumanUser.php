<?php
/**
 * V2HumanUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * V2HumanUser Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V2HumanUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v2HumanUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userId' => 'string',
        'state' => '\Zitadel\Client\Model\V2UserState',
        'username' => 'string',
        'loginNames' => 'string[]',
        'preferredLoginName' => 'string',
        'profile' => '\Zitadel\Client\Model\V2HumanProfile',
        'email' => '\Zitadel\Client\Model\V2HumanEmail',
        'phone' => '\Zitadel\Client\Model\V2HumanPhone',
        'passwordChangeRequired' => 'bool',
        'passwordChanged' => '\DateTime',
        'mfaInitSkipped' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userId' => null,
        'state' => null,
        'username' => null,
        'loginNames' => null,
        'preferredLoginName' => null,
        'profile' => null,
        'email' => null,
        'phone' => null,
        'passwordChangeRequired' => null,
        'passwordChanged' => 'date-time',
        'mfaInitSkipped' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userId' => false,
        'state' => false,
        'username' => false,
        'loginNames' => false,
        'preferredLoginName' => false,
        'profile' => false,
        'email' => false,
        'phone' => false,
        'passwordChangeRequired' => false,
        'passwordChanged' => false,
        'mfaInitSkipped' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'userId',
        'state' => 'state',
        'username' => 'username',
        'loginNames' => 'loginNames',
        'preferredLoginName' => 'preferredLoginName',
        'profile' => 'profile',
        'email' => 'email',
        'phone' => 'phone',
        'passwordChangeRequired' => 'passwordChangeRequired',
        'passwordChanged' => 'passwordChanged',
        'mfaInitSkipped' => 'mfaInitSkipped'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'state' => 'setState',
        'username' => 'setUsername',
        'loginNames' => 'setLoginNames',
        'preferredLoginName' => 'setPreferredLoginName',
        'profile' => 'setProfile',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'passwordChangeRequired' => 'setPasswordChangeRequired',
        'passwordChanged' => 'setPasswordChanged',
        'mfaInitSkipped' => 'setMfaInitSkipped'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'state' => 'getState',
        'username' => 'getUsername',
        'loginNames' => 'getLoginNames',
        'preferredLoginName' => 'getPreferredLoginName',
        'profile' => 'getProfile',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'passwordChangeRequired' => 'getPasswordChangeRequired',
        'passwordChanged' => 'getPasswordChanged',
        'mfaInitSkipped' => 'getMfaInitSkipped'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('loginNames', $data ?? [], null);
        $this->setIfExists('preferredLoginName', $data ?? [], null);
        $this->setIfExists('profile', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('passwordChangeRequired', $data ?? [], null);
        $this->setIfExists('passwordChanged', $data ?? [], null);
        $this->setIfExists('mfaInitSkipped', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string|null $userId Unique identifier of the user.
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Zitadel\Client\Model\V2UserState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Zitadel\Client\Model\V2UserState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username Username of the user, which can be globally unique or unique on organization level.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets loginNames
     *
     * @return string[]|null
     */
    public function getLoginNames()
    {
        return $this->container['loginNames'];
    }

    /**
     * Sets loginNames
     *
     * @param string[]|null $loginNames Possible usable login names for the user.
     *
     * @return self
     */
    public function setLoginNames($loginNames)
    {
        if (is_null($loginNames)) {
            throw new \InvalidArgumentException('non-nullable loginNames cannot be null');
        }
        $this->container['loginNames'] = $loginNames;

        return $this;
    }

    /**
     * Gets preferredLoginName
     *
     * @return string|null
     */
    public function getPreferredLoginName()
    {
        return $this->container['preferredLoginName'];
    }

    /**
     * Sets preferredLoginName
     *
     * @param string|null $preferredLoginName Preferred login name of the user.
     *
     * @return self
     */
    public function setPreferredLoginName($preferredLoginName)
    {
        if (is_null($preferredLoginName)) {
            throw new \InvalidArgumentException('non-nullable preferredLoginName cannot be null');
        }
        $this->container['preferredLoginName'] = $preferredLoginName;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Zitadel\Client\Model\V2HumanProfile|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Zitadel\Client\Model\V2HumanProfile|null $profile profile
     *
     * @return self
     */
    public function setProfile($profile)
    {
        if (is_null($profile)) {
            throw new \InvalidArgumentException('non-nullable profile cannot be null');
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \Zitadel\Client\Model\V2HumanEmail|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \Zitadel\Client\Model\V2HumanEmail|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \Zitadel\Client\Model\V2HumanPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \Zitadel\Client\Model\V2HumanPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets passwordChangeRequired
     *
     * @return bool|null
     */
    public function getPasswordChangeRequired()
    {
        return $this->container['passwordChangeRequired'];
    }

    /**
     * Sets passwordChangeRequired
     *
     * @param bool|null $passwordChangeRequired User is required to change the used password on the next login.
     *
     * @return self
     */
    public function setPasswordChangeRequired($passwordChangeRequired)
    {
        if (is_null($passwordChangeRequired)) {
            throw new \InvalidArgumentException('non-nullable passwordChangeRequired cannot be null');
        }
        $this->container['passwordChangeRequired'] = $passwordChangeRequired;

        return $this;
    }

    /**
     * Gets passwordChanged
     *
     * @return \DateTime|null
     */
    public function getPasswordChanged()
    {
        return $this->container['passwordChanged'];
    }

    /**
     * Sets passwordChanged
     *
     * @param \DateTime|null $passwordChanged The time the user last changed their password.
     *
     * @return self
     */
    public function setPasswordChanged($passwordChanged)
    {
        if (is_null($passwordChanged)) {
            throw new \InvalidArgumentException('non-nullable passwordChanged cannot be null');
        }
        $this->container['passwordChanged'] = $passwordChanged;

        return $this;
    }

    /**
     * Gets mfaInitSkipped
     *
     * @return \DateTime|null
     */
    public function getMfaInitSkipped()
    {
        return $this->container['mfaInitSkipped'];
    }

    /**
     * Sets mfaInitSkipped
     *
     * @param \DateTime|null $mfaInitSkipped The time the user last skipped MFA initialization.
     *
     * @return self
     */
    public function setMfaInitSkipped($mfaInitSkipped)
    {
        if (is_null($mfaInitSkipped)) {
            throw new \InvalidArgumentException('non-nullable mfaInitSkipped cannot be null');
        }
        $this->container['mfaInitSkipped'] = $mfaInitSkipped;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


