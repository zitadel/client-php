<?php
/**
 * BetaFeatureServiceGetSystemFeaturesResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * BetaFeatureServiceGetSystemFeaturesResponse Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BetaFeatureServiceGetSystemFeaturesResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BetaFeatureServiceGetSystemFeaturesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'details' => '\Zitadel\Client\Model\BetaFeatureServiceDetails',
        'loginDefaultOrg' => '\Zitadel\Client\Model\BetaFeatureServiceFeatureFlag',
        'oidcTriggerIntrospectionProjections' => '\Zitadel\Client\Model\BetaFeatureServiceFeatureFlag',
        'oidcLegacyIntrospection' => '\Zitadel\Client\Model\BetaFeatureServiceFeatureFlag',
        'userSchema' => '\Zitadel\Client\Model\BetaFeatureServiceFeatureFlag',
        'oidcTokenExchange' => '\Zitadel\Client\Model\BetaFeatureServiceFeatureFlag',
        'improvedPerformance' => '\Zitadel\Client\Model\BetaFeatureServiceImprovedPerformanceFeatureFlag',
        'oidcSingleV1SessionTermination' => '\Zitadel\Client\Model\BetaFeatureServiceFeatureFlag'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'details' => null,
        'loginDefaultOrg' => null,
        'oidcTriggerIntrospectionProjections' => null,
        'oidcLegacyIntrospection' => null,
        'userSchema' => null,
        'oidcTokenExchange' => null,
        'improvedPerformance' => null,
        'oidcSingleV1SessionTermination' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'details' => false,
        'loginDefaultOrg' => false,
        'oidcTriggerIntrospectionProjections' => false,
        'oidcLegacyIntrospection' => false,
        'userSchema' => false,
        'oidcTokenExchange' => false,
        'improvedPerformance' => false,
        'oidcSingleV1SessionTermination' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'details' => 'details',
        'loginDefaultOrg' => 'loginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'oidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'oidcLegacyIntrospection',
        'userSchema' => 'userSchema',
        'oidcTokenExchange' => 'oidcTokenExchange',
        'improvedPerformance' => 'improvedPerformance',
        'oidcSingleV1SessionTermination' => 'oidcSingleV1SessionTermination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'details' => 'setDetails',
        'loginDefaultOrg' => 'setLoginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'setOidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'setOidcLegacyIntrospection',
        'userSchema' => 'setUserSchema',
        'oidcTokenExchange' => 'setOidcTokenExchange',
        'improvedPerformance' => 'setImprovedPerformance',
        'oidcSingleV1SessionTermination' => 'setOidcSingleV1SessionTermination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'details' => 'getDetails',
        'loginDefaultOrg' => 'getLoginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'getOidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'getOidcLegacyIntrospection',
        'userSchema' => 'getUserSchema',
        'oidcTokenExchange' => 'getOidcTokenExchange',
        'improvedPerformance' => 'getImprovedPerformance',
        'oidcSingleV1SessionTermination' => 'getOidcSingleV1SessionTermination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('loginDefaultOrg', $data ?? [], null);
        $this->setIfExists('oidcTriggerIntrospectionProjections', $data ?? [], null);
        $this->setIfExists('oidcLegacyIntrospection', $data ?? [], null);
        $this->setIfExists('userSchema', $data ?? [], null);
        $this->setIfExists('oidcTokenExchange', $data ?? [], null);
        $this->setIfExists('improvedPerformance', $data ?? [], null);
        $this->setIfExists('oidcSingleV1SessionTermination', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets details
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceDetails|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceDetails|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets loginDefaultOrg
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null
     */
    public function getLoginDefaultOrg()
    {
        return $this->container['loginDefaultOrg'];
    }

    /**
     * Sets loginDefaultOrg
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null $loginDefaultOrg loginDefaultOrg
     *
     * @return self
     */
    public function setLoginDefaultOrg($loginDefaultOrg)
    {
        if (is_null($loginDefaultOrg)) {
            throw new \InvalidArgumentException('non-nullable loginDefaultOrg cannot be null');
        }
        $this->container['loginDefaultOrg'] = $loginDefaultOrg;

        return $this;
    }

    /**
     * Gets oidcTriggerIntrospectionProjections
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null
     */
    public function getOidcTriggerIntrospectionProjections()
    {
        return $this->container['oidcTriggerIntrospectionProjections'];
    }

    /**
     * Sets oidcTriggerIntrospectionProjections
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null $oidcTriggerIntrospectionProjections oidcTriggerIntrospectionProjections
     *
     * @return self
     */
    public function setOidcTriggerIntrospectionProjections($oidcTriggerIntrospectionProjections)
    {
        if (is_null($oidcTriggerIntrospectionProjections)) {
            throw new \InvalidArgumentException('non-nullable oidcTriggerIntrospectionProjections cannot be null');
        }
        $this->container['oidcTriggerIntrospectionProjections'] = $oidcTriggerIntrospectionProjections;

        return $this;
    }

    /**
     * Gets oidcLegacyIntrospection
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null
     */
    public function getOidcLegacyIntrospection()
    {
        return $this->container['oidcLegacyIntrospection'];
    }

    /**
     * Sets oidcLegacyIntrospection
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null $oidcLegacyIntrospection oidcLegacyIntrospection
     *
     * @return self
     */
    public function setOidcLegacyIntrospection($oidcLegacyIntrospection)
    {
        if (is_null($oidcLegacyIntrospection)) {
            throw new \InvalidArgumentException('non-nullable oidcLegacyIntrospection cannot be null');
        }
        $this->container['oidcLegacyIntrospection'] = $oidcLegacyIntrospection;

        return $this;
    }

    /**
     * Gets userSchema
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null
     */
    public function getUserSchema()
    {
        return $this->container['userSchema'];
    }

    /**
     * Sets userSchema
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null $userSchema userSchema
     *
     * @return self
     */
    public function setUserSchema($userSchema)
    {
        if (is_null($userSchema)) {
            throw new \InvalidArgumentException('non-nullable userSchema cannot be null');
        }
        $this->container['userSchema'] = $userSchema;

        return $this;
    }

    /**
     * Gets oidcTokenExchange
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null
     */
    public function getOidcTokenExchange()
    {
        return $this->container['oidcTokenExchange'];
    }

    /**
     * Sets oidcTokenExchange
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null $oidcTokenExchange oidcTokenExchange
     *
     * @return self
     */
    public function setOidcTokenExchange($oidcTokenExchange)
    {
        if (is_null($oidcTokenExchange)) {
            throw new \InvalidArgumentException('non-nullable oidcTokenExchange cannot be null');
        }
        $this->container['oidcTokenExchange'] = $oidcTokenExchange;

        return $this;
    }

    /**
     * Gets improvedPerformance
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceImprovedPerformanceFeatureFlag|null
     */
    public function getImprovedPerformance()
    {
        return $this->container['improvedPerformance'];
    }

    /**
     * Sets improvedPerformance
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceImprovedPerformanceFeatureFlag|null $improvedPerformance improvedPerformance
     *
     * @return self
     */
    public function setImprovedPerformance($improvedPerformance)
    {
        if (is_null($improvedPerformance)) {
            throw new \InvalidArgumentException('non-nullable improvedPerformance cannot be null');
        }
        $this->container['improvedPerformance'] = $improvedPerformance;

        return $this;
    }

    /**
     * Gets oidcSingleV1SessionTermination
     *
     * @return \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null
     */
    public function getOidcSingleV1SessionTermination()
    {
        return $this->container['oidcSingleV1SessionTermination'];
    }

    /**
     * Sets oidcSingleV1SessionTermination
     *
     * @param \Zitadel\Client\Model\BetaFeatureServiceFeatureFlag|null $oidcSingleV1SessionTermination oidcSingleV1SessionTermination
     *
     * @return self
     */
    public function setOidcSingleV1SessionTermination($oidcSingleV1SessionTermination)
    {
        if (is_null($oidcSingleV1SessionTermination)) {
            throw new \InvalidArgumentException('non-nullable oidcSingleV1SessionTermination cannot be null');
        }
        $this->container['oidcSingleV1SessionTermination'] = $oidcSingleV1SessionTermination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


