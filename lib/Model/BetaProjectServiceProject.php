<?php
/**
 * BetaProjectServiceProject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * BetaProjectServiceProject Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BetaProjectServiceProject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BetaProjectServiceProject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'organizationId' => 'string',
        'creationDate' => '\DateTime',
        'changeDate' => '\DateTime',
        'name' => 'string',
        'state' => '\Zitadel\Client\Model\BetaProjectServiceProjectState',
        'projectRoleAssertion' => 'bool',
        'authorizationRequired' => 'bool',
        'projectAccessRequired' => 'bool',
        'privateLabelingSetting' => '\Zitadel\Client\Model\BetaProjectServicePrivateLabelingSetting',
        'grantedOrganizationId' => 'string',
        'grantedOrganizationName' => 'string',
        'grantedState' => '\Zitadel\Client\Model\BetaProjectServiceGrantedProjectState'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'organizationId' => null,
        'creationDate' => 'date-time',
        'changeDate' => 'date-time',
        'name' => null,
        'state' => null,
        'projectRoleAssertion' => null,
        'authorizationRequired' => null,
        'projectAccessRequired' => null,
        'privateLabelingSetting' => null,
        'grantedOrganizationId' => null,
        'grantedOrganizationName' => null,
        'grantedState' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'organizationId' => false,
        'creationDate' => false,
        'changeDate' => false,
        'name' => false,
        'state' => false,
        'projectRoleAssertion' => false,
        'authorizationRequired' => false,
        'projectAccessRequired' => false,
        'privateLabelingSetting' => false,
        'grantedOrganizationId' => true,
        'grantedOrganizationName' => true,
        'grantedState' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'organizationId' => 'organizationId',
        'creationDate' => 'creationDate',
        'changeDate' => 'changeDate',
        'name' => 'name',
        'state' => 'state',
        'projectRoleAssertion' => 'projectRoleAssertion',
        'authorizationRequired' => 'authorizationRequired',
        'projectAccessRequired' => 'projectAccessRequired',
        'privateLabelingSetting' => 'privateLabelingSetting',
        'grantedOrganizationId' => 'grantedOrganizationId',
        'grantedOrganizationName' => 'grantedOrganizationName',
        'grantedState' => 'grantedState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organizationId' => 'setOrganizationId',
        'creationDate' => 'setCreationDate',
        'changeDate' => 'setChangeDate',
        'name' => 'setName',
        'state' => 'setState',
        'projectRoleAssertion' => 'setProjectRoleAssertion',
        'authorizationRequired' => 'setAuthorizationRequired',
        'projectAccessRequired' => 'setProjectAccessRequired',
        'privateLabelingSetting' => 'setPrivateLabelingSetting',
        'grantedOrganizationId' => 'setGrantedOrganizationId',
        'grantedOrganizationName' => 'setGrantedOrganizationName',
        'grantedState' => 'setGrantedState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organizationId' => 'getOrganizationId',
        'creationDate' => 'getCreationDate',
        'changeDate' => 'getChangeDate',
        'name' => 'getName',
        'state' => 'getState',
        'projectRoleAssertion' => 'getProjectRoleAssertion',
        'authorizationRequired' => 'getAuthorizationRequired',
        'projectAccessRequired' => 'getProjectAccessRequired',
        'privateLabelingSetting' => 'getPrivateLabelingSetting',
        'grantedOrganizationId' => 'getGrantedOrganizationId',
        'grantedOrganizationName' => 'getGrantedOrganizationName',
        'grantedState' => 'getGrantedState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('organizationId', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('changeDate', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('projectRoleAssertion', $data ?? [], null);
        $this->setIfExists('authorizationRequired', $data ?? [], null);
        $this->setIfExists('projectAccessRequired', $data ?? [], null);
        $this->setIfExists('privateLabelingSetting', $data ?? [], null);
        $this->setIfExists('grantedOrganizationId', $data ?? [], null);
        $this->setIfExists('grantedOrganizationName', $data ?? [], null);
        $this->setIfExists('grantedState', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the project.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organizationId
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string|null $organizationId The unique identifier of the organization the project belongs to.
     *
     * @return self
     */
    public function setOrganizationId($organizationId)
    {
        if (is_null($organizationId)) {
            throw new \InvalidArgumentException('non-nullable organizationId cannot be null');
        }
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate A Timestamp represents a point in time independent of any time zone or local  calendar, encoded as a count of seconds and fractions of seconds at  nanosecond resolution. The count is relative to an epoch at UTC midnight on  January 1, 1970, in the proleptic Gregorian calendar which extends the  Gregorian calendar backwards to year one.   All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap  second table is needed for interpretation, using a [24-hour linear  smear](https://developers.google.com/time/smear).   The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By  restricting to that range, we ensure that we can convert to and from [RFC  3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.   # Examples   Example 1: Compute Timestamp from POSIX `time()`.       Timestamp timestamp;      timestamp.set_seconds(time(NULL));      timestamp.set_nanos(0);   Example 2: Compute Timestamp from POSIX `gettimeofday()`.       struct timeval tv;      gettimeofday(&tv, NULL);       Timestamp timestamp;      timestamp.set_seconds(tv.tv_sec);      timestamp.set_nanos(tv.tv_usec * 1000);   Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.       FILETIME ft;      GetSystemTimeAsFileTime(&ft);      UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;       // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z      // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.      Timestamp timestamp;      timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));      timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));   Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.       long millis = System.currentTimeMillis();       Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)          .setNanos((int) ((millis % 1000) * 1000000)).build();   Example 5: Compute Timestamp from Java `Instant.now()`.       Instant now = Instant.now();       Timestamp timestamp =          Timestamp.newBuilder().setSeconds(now.getEpochSecond())              .setNanos(now.getNano()).build();   Example 6: Compute Timestamp from current time in Python.       timestamp = Timestamp()      timestamp.GetCurrentTime()   # JSON Mapping   In JSON format, the Timestamp type is encoded as a string in the  [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the  format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"  where {year} is always expressed using four digits while {month}, {day},  {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional  seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),  are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone  is required. A proto3 JSON serializer should always use UTC (as indicated by  \"Z\") when printing the Timestamp type and a proto3 JSON parser should be  able to accept both UTC and other timezones (as indicated by an offset).   For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past  01:30 UTC on January 15, 2017.   In JavaScript, one can convert a Date object to this format using the  standard  [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)  method. In Python, a standard `datetime.datetime` object can be converted  to this format using  [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with  the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use  the Joda Time's [`ISODateTimeFormat.dateTime()`](  http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()  ) to obtain a formatter capable of generating timestamps in this format.
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets changeDate
     *
     * @return \DateTime|null
     */
    public function getChangeDate()
    {
        return $this->container['changeDate'];
    }

    /**
     * Sets changeDate
     *
     * @param \DateTime|null $changeDate A Timestamp represents a point in time independent of any time zone or local  calendar, encoded as a count of seconds and fractions of seconds at  nanosecond resolution. The count is relative to an epoch at UTC midnight on  January 1, 1970, in the proleptic Gregorian calendar which extends the  Gregorian calendar backwards to year one.   All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap  second table is needed for interpretation, using a [24-hour linear  smear](https://developers.google.com/time/smear).   The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By  restricting to that range, we ensure that we can convert to and from [RFC  3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.   # Examples   Example 1: Compute Timestamp from POSIX `time()`.       Timestamp timestamp;      timestamp.set_seconds(time(NULL));      timestamp.set_nanos(0);   Example 2: Compute Timestamp from POSIX `gettimeofday()`.       struct timeval tv;      gettimeofday(&tv, NULL);       Timestamp timestamp;      timestamp.set_seconds(tv.tv_sec);      timestamp.set_nanos(tv.tv_usec * 1000);   Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.       FILETIME ft;      GetSystemTimeAsFileTime(&ft);      UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;       // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z      // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.      Timestamp timestamp;      timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));      timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));   Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.       long millis = System.currentTimeMillis();       Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)          .setNanos((int) ((millis % 1000) * 1000000)).build();   Example 5: Compute Timestamp from Java `Instant.now()`.       Instant now = Instant.now();       Timestamp timestamp =          Timestamp.newBuilder().setSeconds(now.getEpochSecond())              .setNanos(now.getNano()).build();   Example 6: Compute Timestamp from current time in Python.       timestamp = Timestamp()      timestamp.GetCurrentTime()   # JSON Mapping   In JSON format, the Timestamp type is encoded as a string in the  [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the  format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"  where {year} is always expressed using four digits while {month}, {day},  {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional  seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),  are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone  is required. A proto3 JSON serializer should always use UTC (as indicated by  \"Z\") when printing the Timestamp type and a proto3 JSON parser should be  able to accept both UTC and other timezones (as indicated by an offset).   For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past  01:30 UTC on January 15, 2017.   In JavaScript, one can convert a Date object to this format using the  standard  [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)  method. In Python, a standard `datetime.datetime` object can be converted  to this format using  [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with  the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use  the Joda Time's [`ISODateTimeFormat.dateTime()`](  http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()  ) to obtain a formatter capable of generating timestamps in this format.
     *
     * @return self
     */
    public function setChangeDate($changeDate)
    {
        if (is_null($changeDate)) {
            throw new \InvalidArgumentException('non-nullable changeDate cannot be null');
        }
        $this->container['changeDate'] = $changeDate;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the project.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceProjectState|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Zitadel\Client\Model\BetaProjectServiceProjectState|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets projectRoleAssertion
     *
     * @return bool|null
     */
    public function getProjectRoleAssertion()
    {
        return $this->container['projectRoleAssertion'];
    }

    /**
     * Sets projectRoleAssertion
     *
     * @param bool|null $projectRoleAssertion Describes if the roles of the user should be added to the token.
     *
     * @return self
     */
    public function setProjectRoleAssertion($projectRoleAssertion)
    {
        if (is_null($projectRoleAssertion)) {
            throw new \InvalidArgumentException('non-nullable projectRoleAssertion cannot be null');
        }
        $this->container['projectRoleAssertion'] = $projectRoleAssertion;

        return $this;
    }

    /**
     * Gets authorizationRequired
     *
     * @return bool|null
     */
    public function getAuthorizationRequired()
    {
        return $this->container['authorizationRequired'];
    }

    /**
     * Sets authorizationRequired
     *
     * @param bool|null $authorizationRequired When enabled ZITADEL will check if a user has an authorization to use this project assigned when login into an application of this project.
     *
     * @return self
     */
    public function setAuthorizationRequired($authorizationRequired)
    {
        if (is_null($authorizationRequired)) {
            throw new \InvalidArgumentException('non-nullable authorizationRequired cannot be null');
        }
        $this->container['authorizationRequired'] = $authorizationRequired;

        return $this;
    }

    /**
     * Gets projectAccessRequired
     *
     * @return bool|null
     */
    public function getProjectAccessRequired()
    {
        return $this->container['projectAccessRequired'];
    }

    /**
     * Sets projectAccessRequired
     *
     * @param bool|null $projectAccessRequired When enabled ZITADEL will check if the organization of the user, that is trying to log in, has access to this project (either owns the project or is granted).
     *
     * @return self
     */
    public function setProjectAccessRequired($projectAccessRequired)
    {
        if (is_null($projectAccessRequired)) {
            throw new \InvalidArgumentException('non-nullable projectAccessRequired cannot be null');
        }
        $this->container['projectAccessRequired'] = $projectAccessRequired;

        return $this;
    }

    /**
     * Gets privateLabelingSetting
     *
     * @return \Zitadel\Client\Model\BetaProjectServicePrivateLabelingSetting|null
     */
    public function getPrivateLabelingSetting()
    {
        return $this->container['privateLabelingSetting'];
    }

    /**
     * Sets privateLabelingSetting
     *
     * @param \Zitadel\Client\Model\BetaProjectServicePrivateLabelingSetting|null $privateLabelingSetting privateLabelingSetting
     *
     * @return self
     */
    public function setPrivateLabelingSetting($privateLabelingSetting)
    {
        if (is_null($privateLabelingSetting)) {
            throw new \InvalidArgumentException('non-nullable privateLabelingSetting cannot be null');
        }
        $this->container['privateLabelingSetting'] = $privateLabelingSetting;

        return $this;
    }

    /**
     * Gets grantedOrganizationId
     *
     * @return string|null
     */
    public function getGrantedOrganizationId()
    {
        return $this->container['grantedOrganizationId'];
    }

    /**
     * Sets grantedOrganizationId
     *
     * @param string|null $grantedOrganizationId The ID of the organization the project is granted to.
     *
     * @return self
     */
    public function setGrantedOrganizationId($grantedOrganizationId)
    {
        if (is_null($grantedOrganizationId)) {
            array_push($this->openAPINullablesSetToNull, 'grantedOrganizationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grantedOrganizationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grantedOrganizationId'] = $grantedOrganizationId;

        return $this;
    }

    /**
     * Gets grantedOrganizationName
     *
     * @return string|null
     */
    public function getGrantedOrganizationName()
    {
        return $this->container['grantedOrganizationName'];
    }

    /**
     * Sets grantedOrganizationName
     *
     * @param string|null $grantedOrganizationName The name of the organization the project is granted to.
     *
     * @return self
     */
    public function setGrantedOrganizationName($grantedOrganizationName)
    {
        if (is_null($grantedOrganizationName)) {
            array_push($this->openAPINullablesSetToNull, 'grantedOrganizationName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grantedOrganizationName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grantedOrganizationName'] = $grantedOrganizationName;

        return $this;
    }

    /**
     * Gets grantedState
     *
     * @return \Zitadel\Client\Model\BetaProjectServiceGrantedProjectState|null
     */
    public function getGrantedState()
    {
        return $this->container['grantedState'];
    }

    /**
     * Sets grantedState
     *
     * @param \Zitadel\Client\Model\BetaProjectServiceGrantedProjectState|null $grantedState grantedState
     *
     * @return self
     */
    public function setGrantedState($grantedState)
    {
        if (is_null($grantedState)) {
            throw new \InvalidArgumentException('non-nullable grantedState cannot be null');
        }
        $this->container['grantedState'] = $grantedState;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


