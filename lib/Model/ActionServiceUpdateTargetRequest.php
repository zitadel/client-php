<?php
/**
 * ActionServiceUpdateTargetRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * ActionServiceUpdateTargetRequest Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ActionServiceUpdateTargetRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ActionServiceUpdateTargetRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'restWebhook' => '\Zitadel\Client\Model\ActionServiceBetaRESTWebhook',
        'restCall' => '\Zitadel\Client\Model\ActionServiceBetaRESTCall',
        'restAsync' => 'object',
        'timeout' => 'string',
        'endpoint' => 'string',
        'expirationSigningKey' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'restWebhook' => null,
        'restCall' => null,
        'restAsync' => null,
        'timeout' => null,
        'endpoint' => null,
        'expirationSigningKey' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'restWebhook' => false,
        'restCall' => false,
        'restAsync' => false,
        'timeout' => false,
        'endpoint' => false,
        'expirationSigningKey' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'restWebhook' => 'restWebhook',
        'restCall' => 'restCall',
        'restAsync' => 'restAsync',
        'timeout' => 'timeout',
        'endpoint' => 'endpoint',
        'expirationSigningKey' => 'expirationSigningKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'restWebhook' => 'setRestWebhook',
        'restCall' => 'setRestCall',
        'restAsync' => 'setRestAsync',
        'timeout' => 'setTimeout',
        'endpoint' => 'setEndpoint',
        'expirationSigningKey' => 'setExpirationSigningKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'restWebhook' => 'getRestWebhook',
        'restCall' => 'getRestCall',
        'restAsync' => 'getRestAsync',
        'timeout' => 'getTimeout',
        'endpoint' => 'getEndpoint',
        'expirationSigningKey' => 'getExpirationSigningKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('restWebhook', $data ?? [], null);
        $this->setIfExists('restCall', $data ?? [], null);
        $this->setIfExists('restAsync', $data ?? [], null);
        $this->setIfExists('timeout', $data ?? [], null);
        $this->setIfExists('endpoint', $data ?? [], null);
        $this->setIfExists('expirationSigningKey', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 1000)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['endpoint']) && (mb_strlen($this->container['endpoint']) > 1000)) {
            $invalidProperties[] = "invalid value for 'endpoint', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['endpoint']) && (mb_strlen($this->container['endpoint']) < 1)) {
            $invalidProperties[] = "invalid value for 'endpoint', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ActionServiceUpdateTargetRequest., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ActionServiceUpdateTargetRequest., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets restWebhook
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaRESTWebhook|null
     */
    public function getRestWebhook()
    {
        return $this->container['restWebhook'];
    }

    /**
     * Sets restWebhook
     *
     * @param \Zitadel\Client\Model\ActionServiceBetaRESTWebhook|null $restWebhook restWebhook
     *
     * @return self
     */
    public function setRestWebhook($restWebhook)
    {
        if (is_null($restWebhook)) {
            throw new \InvalidArgumentException('non-nullable restWebhook cannot be null');
        }
        $this->container['restWebhook'] = $restWebhook;

        return $this;
    }

    /**
     * Gets restCall
     *
     * @return \Zitadel\Client\Model\ActionServiceBetaRESTCall|null
     */
    public function getRestCall()
    {
        return $this->container['restCall'];
    }

    /**
     * Sets restCall
     *
     * @param \Zitadel\Client\Model\ActionServiceBetaRESTCall|null $restCall restCall
     *
     * @return self
     */
    public function setRestCall($restCall)
    {
        if (is_null($restCall)) {
            throw new \InvalidArgumentException('non-nullable restCall cannot be null');
        }
        $this->container['restCall'] = $restCall;

        return $this;
    }

    /**
     * Gets restAsync
     *
     * @return object|null
     */
    public function getRestAsync()
    {
        return $this->container['restAsync'];
    }

    /**
     * Sets restAsync
     *
     * @param object|null $restAsync restAsync
     *
     * @return self
     */
    public function setRestAsync($restAsync)
    {
        if (is_null($restAsync)) {
            throw new \InvalidArgumentException('non-nullable restAsync cannot be null');
        }
        $this->container['restAsync'] = $restAsync;

        return $this;
    }

    /**
     * Gets timeout
     *
     * @return string|null
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param string|null $timeout Timeout defines the duration until ZITADEL cancels the execution. If the target doesn't respond before this timeout expires, then the connection is closed and the action fails. Depending on the target type and possible setting on `interrupt_on_error` following targets will not be called. In case of a `rest_async` target only this specific target will fail, without any influence on other targets of the same execution.
     *
     * @return self
     */
    public function setTimeout($timeout)
    {
        if (is_null($timeout)) {
            throw new \InvalidArgumentException('non-nullable timeout cannot be null');
        }
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return string|null
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param string|null $endpoint endpoint
     *
     * @return self
     */
    public function setEndpoint($endpoint)
    {
        if (is_null($endpoint)) {
            throw new \InvalidArgumentException('non-nullable endpoint cannot be null');
        }
        if ((mb_strlen($endpoint) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $endpoint when calling ActionServiceUpdateTargetRequest., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($endpoint) < 1)) {
            throw new \InvalidArgumentException('invalid length for $endpoint when calling ActionServiceUpdateTargetRequest., must be bigger than or equal to 1.');
        }

        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets expirationSigningKey
     *
     * @return string|null
     */
    public function getExpirationSigningKey()
    {
        return $this->container['expirationSigningKey'];
    }

    /**
     * Sets expirationSigningKey
     *
     * @param string|null $expirationSigningKey Regenerate the key used for signing and checking the payload sent to the target. Set the graceful period for the existing key. During that time, the previous signing key and the new one will be used to sign the request to allow you a smooth transition onf your API.  Note that we currently only allow an immediate rotation (\"0s\") and will support longer expirations in the future.
     *
     * @return self
     */
    public function setExpirationSigningKey($expirationSigningKey)
    {
        if (is_null($expirationSigningKey)) {
            throw new \InvalidArgumentException('non-nullable expirationSigningKey cannot be null');
        }
        $this->container['expirationSigningKey'] = $expirationSigningKey;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


