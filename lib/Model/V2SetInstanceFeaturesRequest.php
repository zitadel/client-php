<?php
/**
 * V2SetInstanceFeaturesRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * V2SetInstanceFeaturesRequest Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V2SetInstanceFeaturesRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v2SetInstanceFeaturesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'loginDefaultOrg' => 'bool',
        'oidcTriggerIntrospectionProjections' => 'bool',
        'oidcLegacyIntrospection' => 'bool',
        'userSchema' => 'bool',
        'oidcTokenExchange' => 'bool',
        'actions' => 'bool',
        'improvedPerformance' => '\Zitadel\Client\Model\V2ImprovedPerformance[]',
        'webKey' => 'bool',
        'debugOidcParentError' => 'bool',
        'oidcSingleV1SessionTermination' => 'bool',
        'disableUserTokenEvent' => 'bool',
        'enableBackChannelLogout' => 'bool',
        'loginV2' => '\Zitadel\Client\Model\V2LoginV2',
        'permissionCheckV2' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'loginDefaultOrg' => null,
        'oidcTriggerIntrospectionProjections' => null,
        'oidcLegacyIntrospection' => null,
        'userSchema' => null,
        'oidcTokenExchange' => null,
        'actions' => null,
        'improvedPerformance' => null,
        'webKey' => null,
        'debugOidcParentError' => null,
        'oidcSingleV1SessionTermination' => null,
        'disableUserTokenEvent' => null,
        'enableBackChannelLogout' => null,
        'loginV2' => null,
        'permissionCheckV2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'loginDefaultOrg' => false,
        'oidcTriggerIntrospectionProjections' => false,
        'oidcLegacyIntrospection' => false,
        'userSchema' => false,
        'oidcTokenExchange' => false,
        'actions' => false,
        'improvedPerformance' => false,
        'webKey' => false,
        'debugOidcParentError' => false,
        'oidcSingleV1SessionTermination' => false,
        'disableUserTokenEvent' => false,
        'enableBackChannelLogout' => false,
        'loginV2' => false,
        'permissionCheckV2' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loginDefaultOrg' => 'loginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'oidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'oidcLegacyIntrospection',
        'userSchema' => 'userSchema',
        'oidcTokenExchange' => 'oidcTokenExchange',
        'actions' => 'actions',
        'improvedPerformance' => 'improvedPerformance',
        'webKey' => 'webKey',
        'debugOidcParentError' => 'debugOidcParentError',
        'oidcSingleV1SessionTermination' => 'oidcSingleV1SessionTermination',
        'disableUserTokenEvent' => 'disableUserTokenEvent',
        'enableBackChannelLogout' => 'enableBackChannelLogout',
        'loginV2' => 'loginV2',
        'permissionCheckV2' => 'permissionCheckV2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loginDefaultOrg' => 'setLoginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'setOidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'setOidcLegacyIntrospection',
        'userSchema' => 'setUserSchema',
        'oidcTokenExchange' => 'setOidcTokenExchange',
        'actions' => 'setActions',
        'improvedPerformance' => 'setImprovedPerformance',
        'webKey' => 'setWebKey',
        'debugOidcParentError' => 'setDebugOidcParentError',
        'oidcSingleV1SessionTermination' => 'setOidcSingleV1SessionTermination',
        'disableUserTokenEvent' => 'setDisableUserTokenEvent',
        'enableBackChannelLogout' => 'setEnableBackChannelLogout',
        'loginV2' => 'setLoginV2',
        'permissionCheckV2' => 'setPermissionCheckV2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loginDefaultOrg' => 'getLoginDefaultOrg',
        'oidcTriggerIntrospectionProjections' => 'getOidcTriggerIntrospectionProjections',
        'oidcLegacyIntrospection' => 'getOidcLegacyIntrospection',
        'userSchema' => 'getUserSchema',
        'oidcTokenExchange' => 'getOidcTokenExchange',
        'actions' => 'getActions',
        'improvedPerformance' => 'getImprovedPerformance',
        'webKey' => 'getWebKey',
        'debugOidcParentError' => 'getDebugOidcParentError',
        'oidcSingleV1SessionTermination' => 'getOidcSingleV1SessionTermination',
        'disableUserTokenEvent' => 'getDisableUserTokenEvent',
        'enableBackChannelLogout' => 'getEnableBackChannelLogout',
        'loginV2' => 'getLoginV2',
        'permissionCheckV2' => 'getPermissionCheckV2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('loginDefaultOrg', $data ?? [], null);
        $this->setIfExists('oidcTriggerIntrospectionProjections', $data ?? [], null);
        $this->setIfExists('oidcLegacyIntrospection', $data ?? [], null);
        $this->setIfExists('userSchema', $data ?? [], null);
        $this->setIfExists('oidcTokenExchange', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('improvedPerformance', $data ?? [], null);
        $this->setIfExists('webKey', $data ?? [], null);
        $this->setIfExists('debugOidcParentError', $data ?? [], null);
        $this->setIfExists('oidcSingleV1SessionTermination', $data ?? [], null);
        $this->setIfExists('disableUserTokenEvent', $data ?? [], null);
        $this->setIfExists('enableBackChannelLogout', $data ?? [], null);
        $this->setIfExists('loginV2', $data ?? [], null);
        $this->setIfExists('permissionCheckV2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loginDefaultOrg
     *
     * @return bool|null
     */
    public function getLoginDefaultOrg()
    {
        return $this->container['loginDefaultOrg'];
    }

    /**
     * Sets loginDefaultOrg
     *
     * @param bool|null $loginDefaultOrg The login UI will use the settings of the default org (and not from the instance) if no organization context is set
     *
     * @return self
     */
    public function setLoginDefaultOrg($loginDefaultOrg)
    {
        if (is_null($loginDefaultOrg)) {
            throw new \InvalidArgumentException('non-nullable loginDefaultOrg cannot be null');
        }
        $this->container['loginDefaultOrg'] = $loginDefaultOrg;

        return $this;
    }

    /**
     * Gets oidcTriggerIntrospectionProjections
     *
     * @return bool|null
     */
    public function getOidcTriggerIntrospectionProjections()
    {
        return $this->container['oidcTriggerIntrospectionProjections'];
    }

    /**
     * Sets oidcTriggerIntrospectionProjections
     *
     * @param bool|null $oidcTriggerIntrospectionProjections Enable projection triggers during an introspection request. This can act as workaround if there are noticeable consistency issues in the introspection response but can have an impact on performance. We are planning to remove triggers for introspection requests in the future. Please raise an issue if you needed to enable this feature.
     *
     * @return self
     */
    public function setOidcTriggerIntrospectionProjections($oidcTriggerIntrospectionProjections)
    {
        if (is_null($oidcTriggerIntrospectionProjections)) {
            throw new \InvalidArgumentException('non-nullable oidcTriggerIntrospectionProjections cannot be null');
        }
        $this->container['oidcTriggerIntrospectionProjections'] = $oidcTriggerIntrospectionProjections;

        return $this;
    }

    /**
     * Gets oidcLegacyIntrospection
     *
     * @return bool|null
     */
    public function getOidcLegacyIntrospection()
    {
        return $this->container['oidcLegacyIntrospection'];
    }

    /**
     * Sets oidcLegacyIntrospection
     *
     * @param bool|null $oidcLegacyIntrospection We have recently refactored the introspection endpoint for performance reasons. This feature can be used to rollback to the legacy implementation if unexpected bugs arise. Please raise an issue if you needed to enable this feature.
     *
     * @return self
     */
    public function setOidcLegacyIntrospection($oidcLegacyIntrospection)
    {
        if (is_null($oidcLegacyIntrospection)) {
            throw new \InvalidArgumentException('non-nullable oidcLegacyIntrospection cannot be null');
        }
        $this->container['oidcLegacyIntrospection'] = $oidcLegacyIntrospection;

        return $this;
    }

    /**
     * Gets userSchema
     *
     * @return bool|null
     */
    public function getUserSchema()
    {
        return $this->container['userSchema'];
    }

    /**
     * Sets userSchema
     *
     * @param bool|null $userSchema User Schemas allow to manage data schemas of user. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
     *
     * @return self
     */
    public function setUserSchema($userSchema)
    {
        if (is_null($userSchema)) {
            throw new \InvalidArgumentException('non-nullable userSchema cannot be null');
        }
        $this->container['userSchema'] = $userSchema;

        return $this;
    }

    /**
     * Gets oidcTokenExchange
     *
     * @return bool|null
     */
    public function getOidcTokenExchange()
    {
        return $this->container['oidcTokenExchange'];
    }

    /**
     * Sets oidcTokenExchange
     *
     * @param bool|null $oidcTokenExchange Enable the experimental `urn:ietf:params:oauth:grant-type:token-exchange` grant type for the OIDC token endpoint. Token exchange can be used to request tokens with a lesser scope or impersonate other users. See the security policy to allow impersonation on an instance.
     *
     * @return self
     */
    public function setOidcTokenExchange($oidcTokenExchange)
    {
        if (is_null($oidcTokenExchange)) {
            throw new \InvalidArgumentException('non-nullable oidcTokenExchange cannot be null');
        }
        $this->container['oidcTokenExchange'] = $oidcTokenExchange;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return bool|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param bool|null $actions Actions allow to manage data executions and targets. If the flag is enabled, you'll be able to use the new API and its features. Note that it is still in an early stage.
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets improvedPerformance
     *
     * @return \Zitadel\Client\Model\V2ImprovedPerformance[]|null
     */
    public function getImprovedPerformance()
    {
        return $this->container['improvedPerformance'];
    }

    /**
     * Sets improvedPerformance
     *
     * @param \Zitadel\Client\Model\V2ImprovedPerformance[]|null $improvedPerformance Improves performance of specified execution paths.
     *
     * @return self
     */
    public function setImprovedPerformance($improvedPerformance)
    {
        if (is_null($improvedPerformance)) {
            throw new \InvalidArgumentException('non-nullable improvedPerformance cannot be null');
        }
        $this->container['improvedPerformance'] = $improvedPerformance;

        return $this;
    }

    /**
     * Gets webKey
     *
     * @return bool|null
     */
    public function getWebKey()
    {
        return $this->container['webKey'];
    }

    /**
     * Sets webKey
     *
     * @param bool|null $webKey Enable the webkey/v3alpha API. The first time this feature is enabled, web keys are generated and activated.
     *
     * @return self
     */
    public function setWebKey($webKey)
    {
        if (is_null($webKey)) {
            throw new \InvalidArgumentException('non-nullable webKey cannot be null');
        }
        $this->container['webKey'] = $webKey;

        return $this;
    }

    /**
     * Gets debugOidcParentError
     *
     * @return bool|null
     */
    public function getDebugOidcParentError()
    {
        return $this->container['debugOidcParentError'];
    }

    /**
     * Sets debugOidcParentError
     *
     * @param bool|null $debugOidcParentError Return parent errors to OIDC clients for debugging purposes. Parent errors may contain sensitive data or unwanted details about the system status of zitadel. Only enable if really needed.
     *
     * @return self
     */
    public function setDebugOidcParentError($debugOidcParentError)
    {
        if (is_null($debugOidcParentError)) {
            throw new \InvalidArgumentException('non-nullable debugOidcParentError cannot be null');
        }
        $this->container['debugOidcParentError'] = $debugOidcParentError;

        return $this;
    }

    /**
     * Gets oidcSingleV1SessionTermination
     *
     * @return bool|null
     */
    public function getOidcSingleV1SessionTermination()
    {
        return $this->container['oidcSingleV1SessionTermination'];
    }

    /**
     * Sets oidcSingleV1SessionTermination
     *
     * @param bool|null $oidcSingleV1SessionTermination If the flag is enabled, you'll be able to terminate a single session from the login UI by providing an id_token with a `sid` claim as id_token_hint on the end_session endpoint. Note that currently all sessions from the same user agent (browser) are terminated in the login UI. Sessions managed through the Session API already allow the termination of single sessions.
     *
     * @return self
     */
    public function setOidcSingleV1SessionTermination($oidcSingleV1SessionTermination)
    {
        if (is_null($oidcSingleV1SessionTermination)) {
            throw new \InvalidArgumentException('non-nullable oidcSingleV1SessionTermination cannot be null');
        }
        $this->container['oidcSingleV1SessionTermination'] = $oidcSingleV1SessionTermination;

        return $this;
    }

    /**
     * Gets disableUserTokenEvent
     *
     * @return bool|null
     */
    public function getDisableUserTokenEvent()
    {
        return $this->container['disableUserTokenEvent'];
    }

    /**
     * Sets disableUserTokenEvent
     *
     * @param bool|null $disableUserTokenEvent Do not push user token meta-event user.token.v2.added to improve performance on many concurrent single (machine-)user logins
     *
     * @return self
     */
    public function setDisableUserTokenEvent($disableUserTokenEvent)
    {
        if (is_null($disableUserTokenEvent)) {
            throw new \InvalidArgumentException('non-nullable disableUserTokenEvent cannot be null');
        }
        $this->container['disableUserTokenEvent'] = $disableUserTokenEvent;

        return $this;
    }

    /**
     * Gets enableBackChannelLogout
     *
     * @return bool|null
     */
    public function getEnableBackChannelLogout()
    {
        return $this->container['enableBackChannelLogout'];
    }

    /**
     * Sets enableBackChannelLogout
     *
     * @param bool|null $enableBackChannelLogout If the flag is enabled, you'll be able to use the OIDC Back-Channel Logout to be notified in your application about terminated user sessions.
     *
     * @return self
     */
    public function setEnableBackChannelLogout($enableBackChannelLogout)
    {
        if (is_null($enableBackChannelLogout)) {
            throw new \InvalidArgumentException('non-nullable enableBackChannelLogout cannot be null');
        }
        $this->container['enableBackChannelLogout'] = $enableBackChannelLogout;

        return $this;
    }

    /**
     * Gets loginV2
     *
     * @return \Zitadel\Client\Model\V2LoginV2|null
     */
    public function getLoginV2()
    {
        return $this->container['loginV2'];
    }

    /**
     * Sets loginV2
     *
     * @param \Zitadel\Client\Model\V2LoginV2|null $loginV2 loginV2
     *
     * @return self
     */
    public function setLoginV2($loginV2)
    {
        if (is_null($loginV2)) {
            throw new \InvalidArgumentException('non-nullable loginV2 cannot be null');
        }
        $this->container['loginV2'] = $loginV2;

        return $this;
    }

    /**
     * Gets permissionCheckV2
     *
     * @return bool|null
     */
    public function getPermissionCheckV2()
    {
        return $this->container['permissionCheckV2'];
    }

    /**
     * Sets permissionCheckV2
     *
     * @param bool|null $permissionCheckV2 Enable a newer, more performant, permission check used for v2 and v3 resource based APIs.
     *
     * @return self
     */
    public function setPermissionCheckV2($permissionCheckV2)
    {
        if (is_null($permissionCheckV2)) {
            throw new \InvalidArgumentException('non-nullable permissionCheckV2 cannot be null');
        }
        $this->container['permissionCheckV2'] = $permissionCheckV2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


