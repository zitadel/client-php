<?php
/**
 * BetaAppServiceOIDCConfig
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * BetaAppServiceOIDCConfig Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BetaAppServiceOIDCConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BetaAppServiceOIDCConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redirectUris' => 'string[]',
        'responseTypes' => '\Zitadel\Client\Model\BetaAppServiceOIDCResponseType[]',
        'grantTypes' => '\Zitadel\Client\Model\BetaAppServiceOIDCGrantType[]',
        'appType' => '\Zitadel\Client\Model\BetaAppServiceOIDCAppType',
        'clientId' => 'string',
        'authMethodType' => '\Zitadel\Client\Model\BetaAppServiceOIDCAuthMethodType',
        'postLogoutRedirectUris' => 'string[]',
        'version' => '\Zitadel\Client\Model\BetaAppServiceOIDCVersion',
        'noneCompliant' => 'bool',
        'complianceProblems' => '\Zitadel\Client\Model\BetaAppServiceOIDCLocalizedMessage[]',
        'devMode' => 'bool',
        'accessTokenType' => '\Zitadel\Client\Model\BetaAppServiceOIDCTokenType',
        'accessTokenRoleAssertion' => 'bool',
        'idTokenRoleAssertion' => 'bool',
        'idTokenUserinfoAssertion' => 'bool',
        'clockSkew' => 'string',
        'additionalOrigins' => 'string[]',
        'allowedOrigins' => 'string[]',
        'skipNativeAppSuccessPage' => 'bool',
        'backChannelLogoutUri' => 'string',
        'loginVersion' => '\Zitadel\Client\Model\BetaAppServiceLoginVersion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redirectUris' => null,
        'responseTypes' => null,
        'grantTypes' => null,
        'appType' => null,
        'clientId' => null,
        'authMethodType' => null,
        'postLogoutRedirectUris' => null,
        'version' => null,
        'noneCompliant' => null,
        'complianceProblems' => null,
        'devMode' => null,
        'accessTokenType' => null,
        'accessTokenRoleAssertion' => null,
        'idTokenRoleAssertion' => null,
        'idTokenUserinfoAssertion' => null,
        'clockSkew' => 'duration',
        'additionalOrigins' => null,
        'allowedOrigins' => null,
        'skipNativeAppSuccessPage' => null,
        'backChannelLogoutUri' => null,
        'loginVersion' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redirectUris' => false,
        'responseTypes' => false,
        'grantTypes' => false,
        'appType' => false,
        'clientId' => false,
        'authMethodType' => false,
        'postLogoutRedirectUris' => false,
        'version' => false,
        'noneCompliant' => false,
        'complianceProblems' => false,
        'devMode' => false,
        'accessTokenType' => false,
        'accessTokenRoleAssertion' => false,
        'idTokenRoleAssertion' => false,
        'idTokenUserinfoAssertion' => false,
        'clockSkew' => false,
        'additionalOrigins' => false,
        'allowedOrigins' => false,
        'skipNativeAppSuccessPage' => false,
        'backChannelLogoutUri' => false,
        'loginVersion' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirectUris' => 'redirectUris',
        'responseTypes' => 'responseTypes',
        'grantTypes' => 'grantTypes',
        'appType' => 'appType',
        'clientId' => 'clientId',
        'authMethodType' => 'authMethodType',
        'postLogoutRedirectUris' => 'postLogoutRedirectUris',
        'version' => 'version',
        'noneCompliant' => 'noneCompliant',
        'complianceProblems' => 'complianceProblems',
        'devMode' => 'devMode',
        'accessTokenType' => 'accessTokenType',
        'accessTokenRoleAssertion' => 'accessTokenRoleAssertion',
        'idTokenRoleAssertion' => 'idTokenRoleAssertion',
        'idTokenUserinfoAssertion' => 'idTokenUserinfoAssertion',
        'clockSkew' => 'clockSkew',
        'additionalOrigins' => 'additionalOrigins',
        'allowedOrigins' => 'allowedOrigins',
        'skipNativeAppSuccessPage' => 'skipNativeAppSuccessPage',
        'backChannelLogoutUri' => 'backChannelLogoutUri',
        'loginVersion' => 'loginVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirectUris' => 'setRedirectUris',
        'responseTypes' => 'setResponseTypes',
        'grantTypes' => 'setGrantTypes',
        'appType' => 'setAppType',
        'clientId' => 'setClientId',
        'authMethodType' => 'setAuthMethodType',
        'postLogoutRedirectUris' => 'setPostLogoutRedirectUris',
        'version' => 'setVersion',
        'noneCompliant' => 'setNoneCompliant',
        'complianceProblems' => 'setComplianceProblems',
        'devMode' => 'setDevMode',
        'accessTokenType' => 'setAccessTokenType',
        'accessTokenRoleAssertion' => 'setAccessTokenRoleAssertion',
        'idTokenRoleAssertion' => 'setIdTokenRoleAssertion',
        'idTokenUserinfoAssertion' => 'setIdTokenUserinfoAssertion',
        'clockSkew' => 'setClockSkew',
        'additionalOrigins' => 'setAdditionalOrigins',
        'allowedOrigins' => 'setAllowedOrigins',
        'skipNativeAppSuccessPage' => 'setSkipNativeAppSuccessPage',
        'backChannelLogoutUri' => 'setBackChannelLogoutUri',
        'loginVersion' => 'setLoginVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirectUris' => 'getRedirectUris',
        'responseTypes' => 'getResponseTypes',
        'grantTypes' => 'getGrantTypes',
        'appType' => 'getAppType',
        'clientId' => 'getClientId',
        'authMethodType' => 'getAuthMethodType',
        'postLogoutRedirectUris' => 'getPostLogoutRedirectUris',
        'version' => 'getVersion',
        'noneCompliant' => 'getNoneCompliant',
        'complianceProblems' => 'getComplianceProblems',
        'devMode' => 'getDevMode',
        'accessTokenType' => 'getAccessTokenType',
        'accessTokenRoleAssertion' => 'getAccessTokenRoleAssertion',
        'idTokenRoleAssertion' => 'getIdTokenRoleAssertion',
        'idTokenUserinfoAssertion' => 'getIdTokenUserinfoAssertion',
        'clockSkew' => 'getClockSkew',
        'additionalOrigins' => 'getAdditionalOrigins',
        'allowedOrigins' => 'getAllowedOrigins',
        'skipNativeAppSuccessPage' => 'getSkipNativeAppSuccessPage',
        'backChannelLogoutUri' => 'getBackChannelLogoutUri',
        'loginVersion' => 'getLoginVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('redirectUris', $data ?? [], null);
        $this->setIfExists('responseTypes', $data ?? [], null);
        $this->setIfExists('grantTypes', $data ?? [], null);
        $this->setIfExists('appType', $data ?? [], null);
        $this->setIfExists('clientId', $data ?? [], null);
        $this->setIfExists('authMethodType', $data ?? [], null);
        $this->setIfExists('postLogoutRedirectUris', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('noneCompliant', $data ?? [], null);
        $this->setIfExists('complianceProblems', $data ?? [], null);
        $this->setIfExists('devMode', $data ?? [], null);
        $this->setIfExists('accessTokenType', $data ?? [], null);
        $this->setIfExists('accessTokenRoleAssertion', $data ?? [], null);
        $this->setIfExists('idTokenRoleAssertion', $data ?? [], null);
        $this->setIfExists('idTokenUserinfoAssertion', $data ?? [], null);
        $this->setIfExists('clockSkew', $data ?? [], null);
        $this->setIfExists('additionalOrigins', $data ?? [], null);
        $this->setIfExists('allowedOrigins', $data ?? [], null);
        $this->setIfExists('skipNativeAppSuccessPage', $data ?? [], null);
        $this->setIfExists('backChannelLogoutUri', $data ?? [], null);
        $this->setIfExists('loginVersion', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirectUris
     *
     * @return string[]|null
     */
    public function getRedirectUris()
    {
        return $this->container['redirectUris'];
    }

    /**
     * Sets redirectUris
     *
     * @param string[]|null $redirectUris redirectUris
     *
     * @return self
     */
    public function setRedirectUris($redirectUris)
    {
        if (is_null($redirectUris)) {
            throw new \InvalidArgumentException('non-nullable redirectUris cannot be null');
        }
        $this->container['redirectUris'] = $redirectUris;

        return $this;
    }

    /**
     * Gets responseTypes
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCResponseType[]|null
     */
    public function getResponseTypes()
    {
        return $this->container['responseTypes'];
    }

    /**
     * Sets responseTypes
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCResponseType[]|null $responseTypes responseTypes
     *
     * @return self
     */
    public function setResponseTypes($responseTypes)
    {
        if (is_null($responseTypes)) {
            throw new \InvalidArgumentException('non-nullable responseTypes cannot be null');
        }
        $this->container['responseTypes'] = $responseTypes;

        return $this;
    }

    /**
     * Gets grantTypes
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCGrantType[]|null
     */
    public function getGrantTypes()
    {
        return $this->container['grantTypes'];
    }

    /**
     * Sets grantTypes
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCGrantType[]|null $grantTypes grantTypes
     *
     * @return self
     */
    public function setGrantTypes($grantTypes)
    {
        if (is_null($grantTypes)) {
            throw new \InvalidArgumentException('non-nullable grantTypes cannot be null');
        }
        $this->container['grantTypes'] = $grantTypes;

        return $this;
    }

    /**
     * Gets appType
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCAppType|null
     */
    public function getAppType()
    {
        return $this->container['appType'];
    }

    /**
     * Sets appType
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCAppType|null $appType appType
     *
     * @return self
     */
    public function setAppType($appType)
    {
        if (is_null($appType)) {
            throw new \InvalidArgumentException('non-nullable appType cannot be null');
        }
        $this->container['appType'] = $appType;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId clientId
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (is_null($clientId)) {
            throw new \InvalidArgumentException('non-nullable clientId cannot be null');
        }
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets authMethodType
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCAuthMethodType|null
     */
    public function getAuthMethodType()
    {
        return $this->container['authMethodType'];
    }

    /**
     * Sets authMethodType
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCAuthMethodType|null $authMethodType authMethodType
     *
     * @return self
     */
    public function setAuthMethodType($authMethodType)
    {
        if (is_null($authMethodType)) {
            throw new \InvalidArgumentException('non-nullable authMethodType cannot be null');
        }
        $this->container['authMethodType'] = $authMethodType;

        return $this;
    }

    /**
     * Gets postLogoutRedirectUris
     *
     * @return string[]|null
     */
    public function getPostLogoutRedirectUris()
    {
        return $this->container['postLogoutRedirectUris'];
    }

    /**
     * Sets postLogoutRedirectUris
     *
     * @param string[]|null $postLogoutRedirectUris postLogoutRedirectUris
     *
     * @return self
     */
    public function setPostLogoutRedirectUris($postLogoutRedirectUris)
    {
        if (is_null($postLogoutRedirectUris)) {
            throw new \InvalidArgumentException('non-nullable postLogoutRedirectUris cannot be null');
        }
        $this->container['postLogoutRedirectUris'] = $postLogoutRedirectUris;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCVersion|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCVersion|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets noneCompliant
     *
     * @return bool|null
     */
    public function getNoneCompliant()
    {
        return $this->container['noneCompliant'];
    }

    /**
     * Sets noneCompliant
     *
     * @param bool|null $noneCompliant noneCompliant
     *
     * @return self
     */
    public function setNoneCompliant($noneCompliant)
    {
        if (is_null($noneCompliant)) {
            throw new \InvalidArgumentException('non-nullable noneCompliant cannot be null');
        }
        $this->container['noneCompliant'] = $noneCompliant;

        return $this;
    }

    /**
     * Gets complianceProblems
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCLocalizedMessage[]|null
     */
    public function getComplianceProblems()
    {
        return $this->container['complianceProblems'];
    }

    /**
     * Sets complianceProblems
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCLocalizedMessage[]|null $complianceProblems complianceProblems
     *
     * @return self
     */
    public function setComplianceProblems($complianceProblems)
    {
        if (is_null($complianceProblems)) {
            throw new \InvalidArgumentException('non-nullable complianceProblems cannot be null');
        }
        $this->container['complianceProblems'] = $complianceProblems;

        return $this;
    }

    /**
     * Gets devMode
     *
     * @return bool|null
     */
    public function getDevMode()
    {
        return $this->container['devMode'];
    }

    /**
     * Sets devMode
     *
     * @param bool|null $devMode devMode
     *
     * @return self
     */
    public function setDevMode($devMode)
    {
        if (is_null($devMode)) {
            throw new \InvalidArgumentException('non-nullable devMode cannot be null');
        }
        $this->container['devMode'] = $devMode;

        return $this;
    }

    /**
     * Gets accessTokenType
     *
     * @return \Zitadel\Client\Model\BetaAppServiceOIDCTokenType|null
     */
    public function getAccessTokenType()
    {
        return $this->container['accessTokenType'];
    }

    /**
     * Sets accessTokenType
     *
     * @param \Zitadel\Client\Model\BetaAppServiceOIDCTokenType|null $accessTokenType accessTokenType
     *
     * @return self
     */
    public function setAccessTokenType($accessTokenType)
    {
        if (is_null($accessTokenType)) {
            throw new \InvalidArgumentException('non-nullable accessTokenType cannot be null');
        }
        $this->container['accessTokenType'] = $accessTokenType;

        return $this;
    }

    /**
     * Gets accessTokenRoleAssertion
     *
     * @return bool|null
     */
    public function getAccessTokenRoleAssertion()
    {
        return $this->container['accessTokenRoleAssertion'];
    }

    /**
     * Sets accessTokenRoleAssertion
     *
     * @param bool|null $accessTokenRoleAssertion accessTokenRoleAssertion
     *
     * @return self
     */
    public function setAccessTokenRoleAssertion($accessTokenRoleAssertion)
    {
        if (is_null($accessTokenRoleAssertion)) {
            throw new \InvalidArgumentException('non-nullable accessTokenRoleAssertion cannot be null');
        }
        $this->container['accessTokenRoleAssertion'] = $accessTokenRoleAssertion;

        return $this;
    }

    /**
     * Gets idTokenRoleAssertion
     *
     * @return bool|null
     */
    public function getIdTokenRoleAssertion()
    {
        return $this->container['idTokenRoleAssertion'];
    }

    /**
     * Sets idTokenRoleAssertion
     *
     * @param bool|null $idTokenRoleAssertion idTokenRoleAssertion
     *
     * @return self
     */
    public function setIdTokenRoleAssertion($idTokenRoleAssertion)
    {
        if (is_null($idTokenRoleAssertion)) {
            throw new \InvalidArgumentException('non-nullable idTokenRoleAssertion cannot be null');
        }
        $this->container['idTokenRoleAssertion'] = $idTokenRoleAssertion;

        return $this;
    }

    /**
     * Gets idTokenUserinfoAssertion
     *
     * @return bool|null
     */
    public function getIdTokenUserinfoAssertion()
    {
        return $this->container['idTokenUserinfoAssertion'];
    }

    /**
     * Sets idTokenUserinfoAssertion
     *
     * @param bool|null $idTokenUserinfoAssertion idTokenUserinfoAssertion
     *
     * @return self
     */
    public function setIdTokenUserinfoAssertion($idTokenUserinfoAssertion)
    {
        if (is_null($idTokenUserinfoAssertion)) {
            throw new \InvalidArgumentException('non-nullable idTokenUserinfoAssertion cannot be null');
        }
        $this->container['idTokenUserinfoAssertion'] = $idTokenUserinfoAssertion;

        return $this;
    }

    /**
     * Gets clockSkew
     *
     * @return string|null
     */
    public function getClockSkew()
    {
        return $this->container['clockSkew'];
    }

    /**
     * Sets clockSkew
     *
     * @param string|null $clockSkew A Duration represents a signed, fixed-length span of time represented  as a count of seconds and fractions of seconds at nanosecond  resolution. It is independent of any calendar and concepts like \"day\"  or \"month\". It is related to Timestamp in that the difference between  two Timestamp values is a Duration and it can be added or subtracted  from a Timestamp. Range is approximately +-10,000 years.   # Examples   Example 1: Compute Duration from two Timestamps in pseudo code.       Timestamp start = ...;      Timestamp end = ...;      Duration duration = ...;       duration.seconds = end.seconds - start.seconds;      duration.nanos = end.nanos - start.nanos;       if (duration.seconds < 0 && duration.nanos > 0) {        duration.seconds += 1;        duration.nanos -= 1000000000;      } else if (duration.seconds > 0 && duration.nanos < 0) {        duration.seconds -= 1;        duration.nanos += 1000000000;      }   Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.       Timestamp start = ...;      Duration duration = ...;      Timestamp end = ...;       end.seconds = start.seconds + duration.seconds;      end.nanos = start.nanos + duration.nanos;       if (end.nanos < 0) {        end.seconds -= 1;        end.nanos += 1000000000;      } else if (end.nanos >= 1000000000) {        end.seconds += 1;        end.nanos -= 1000000000;      }   Example 3: Compute Duration from datetime.timedelta in Python.       td = datetime.timedelta(days=3, minutes=10)      duration = Duration()      duration.FromTimedelta(td)   # JSON Mapping   In JSON format, the Duration type is encoded as a string rather than an  object, where the string ends in the suffix \"s\" (indicating seconds) and  is preceded by the number of seconds, with nanoseconds expressed as  fractional seconds. For example, 3 seconds with 0 nanoseconds should be  encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should  be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1  microsecond should be expressed in JSON format as \"3.000001s\".
     *
     * @return self
     */
    public function setClockSkew($clockSkew)
    {
        if (is_null($clockSkew)) {
            throw new \InvalidArgumentException('non-nullable clockSkew cannot be null');
        }
        $this->container['clockSkew'] = $clockSkew;

        return $this;
    }

    /**
     * Gets additionalOrigins
     *
     * @return string[]|null
     */
    public function getAdditionalOrigins()
    {
        return $this->container['additionalOrigins'];
    }

    /**
     * Sets additionalOrigins
     *
     * @param string[]|null $additionalOrigins additionalOrigins
     *
     * @return self
     */
    public function setAdditionalOrigins($additionalOrigins)
    {
        if (is_null($additionalOrigins)) {
            throw new \InvalidArgumentException('non-nullable additionalOrigins cannot be null');
        }
        $this->container['additionalOrigins'] = $additionalOrigins;

        return $this;
    }

    /**
     * Gets allowedOrigins
     *
     * @return string[]|null
     */
    public function getAllowedOrigins()
    {
        return $this->container['allowedOrigins'];
    }

    /**
     * Sets allowedOrigins
     *
     * @param string[]|null $allowedOrigins allowedOrigins
     *
     * @return self
     */
    public function setAllowedOrigins($allowedOrigins)
    {
        if (is_null($allowedOrigins)) {
            throw new \InvalidArgumentException('non-nullable allowedOrigins cannot be null');
        }
        $this->container['allowedOrigins'] = $allowedOrigins;

        return $this;
    }

    /**
     * Gets skipNativeAppSuccessPage
     *
     * @return bool|null
     */
    public function getSkipNativeAppSuccessPage()
    {
        return $this->container['skipNativeAppSuccessPage'];
    }

    /**
     * Sets skipNativeAppSuccessPage
     *
     * @param bool|null $skipNativeAppSuccessPage skipNativeAppSuccessPage
     *
     * @return self
     */
    public function setSkipNativeAppSuccessPage($skipNativeAppSuccessPage)
    {
        if (is_null($skipNativeAppSuccessPage)) {
            throw new \InvalidArgumentException('non-nullable skipNativeAppSuccessPage cannot be null');
        }
        $this->container['skipNativeAppSuccessPage'] = $skipNativeAppSuccessPage;

        return $this;
    }

    /**
     * Gets backChannelLogoutUri
     *
     * @return string|null
     */
    public function getBackChannelLogoutUri()
    {
        return $this->container['backChannelLogoutUri'];
    }

    /**
     * Sets backChannelLogoutUri
     *
     * @param string|null $backChannelLogoutUri backChannelLogoutUri
     *
     * @return self
     */
    public function setBackChannelLogoutUri($backChannelLogoutUri)
    {
        if (is_null($backChannelLogoutUri)) {
            throw new \InvalidArgumentException('non-nullable backChannelLogoutUri cannot be null');
        }
        $this->container['backChannelLogoutUri'] = $backChannelLogoutUri;

        return $this;
    }

    /**
     * Gets loginVersion
     *
     * @return \Zitadel\Client\Model\BetaAppServiceLoginVersion|null
     */
    public function getLoginVersion()
    {
        return $this->container['loginVersion'];
    }

    /**
     * Sets loginVersion
     *
     * @param \Zitadel\Client\Model\BetaAppServiceLoginVersion|null $loginVersion loginVersion
     *
     * @return self
     */
    public function setLoginVersion($loginVersion)
    {
        if (is_null($loginVersion)) {
            throw new \InvalidArgumentException('non-nullable loginVersion cannot be null');
        }
        $this->container['loginVersion'] = $loginVersion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


