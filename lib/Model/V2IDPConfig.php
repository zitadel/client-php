<?php
/**
 * V2IDPConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * V2IDPConfig Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V2IDPConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v2IDPConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'options' => '\Zitadel\Client\Model\Zitadelidpv2Options',
        'ldap' => '\Zitadel\Client\Model\V2LDAPConfig',
        'google' => '\Zitadel\Client\Model\V2GoogleConfig',
        'oauth' => '\Zitadel\Client\Model\V2OAuthConfig',
        'oidc' => '\Zitadel\Client\Model\V2GenericOIDCConfig',
        'jwt' => '\Zitadel\Client\Model\V2JWTConfig',
        'github' => '\Zitadel\Client\Model\V2GitHubConfig',
        'githubEs' => '\Zitadel\Client\Model\V2GitHubEnterpriseServerConfig',
        'gitlab' => '\Zitadel\Client\Model\V2GitLabConfig',
        'gitlabSelfHosted' => '\Zitadel\Client\Model\V2GitLabSelfHostedConfig',
        'azureAd' => '\Zitadel\Client\Model\V2AzureADConfig',
        'apple' => '\Zitadel\Client\Model\V2AppleConfig',
        'saml' => '\Zitadel\Client\Model\V2SAMLConfig'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'options' => null,
        'ldap' => null,
        'google' => null,
        'oauth' => null,
        'oidc' => null,
        'jwt' => null,
        'github' => null,
        'githubEs' => null,
        'gitlab' => null,
        'gitlabSelfHosted' => null,
        'azureAd' => null,
        'apple' => null,
        'saml' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'options' => false,
        'ldap' => false,
        'google' => false,
        'oauth' => false,
        'oidc' => false,
        'jwt' => false,
        'github' => false,
        'githubEs' => false,
        'gitlab' => false,
        'gitlabSelfHosted' => false,
        'azureAd' => false,
        'apple' => false,
        'saml' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'options' => 'options',
        'ldap' => 'ldap',
        'google' => 'google',
        'oauth' => 'oauth',
        'oidc' => 'oidc',
        'jwt' => 'jwt',
        'github' => 'github',
        'githubEs' => 'githubEs',
        'gitlab' => 'gitlab',
        'gitlabSelfHosted' => 'gitlabSelfHosted',
        'azureAd' => 'azureAd',
        'apple' => 'apple',
        'saml' => 'saml'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'options' => 'setOptions',
        'ldap' => 'setLdap',
        'google' => 'setGoogle',
        'oauth' => 'setOauth',
        'oidc' => 'setOidc',
        'jwt' => 'setJwt',
        'github' => 'setGithub',
        'githubEs' => 'setGithubEs',
        'gitlab' => 'setGitlab',
        'gitlabSelfHosted' => 'setGitlabSelfHosted',
        'azureAd' => 'setAzureAd',
        'apple' => 'setApple',
        'saml' => 'setSaml'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'options' => 'getOptions',
        'ldap' => 'getLdap',
        'google' => 'getGoogle',
        'oauth' => 'getOauth',
        'oidc' => 'getOidc',
        'jwt' => 'getJwt',
        'github' => 'getGithub',
        'githubEs' => 'getGithubEs',
        'gitlab' => 'getGitlab',
        'gitlabSelfHosted' => 'getGitlabSelfHosted',
        'azureAd' => 'getAzureAd',
        'apple' => 'getApple',
        'saml' => 'getSaml'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('ldap', $data ?? [], null);
        $this->setIfExists('google', $data ?? [], null);
        $this->setIfExists('oauth', $data ?? [], null);
        $this->setIfExists('oidc', $data ?? [], null);
        $this->setIfExists('jwt', $data ?? [], null);
        $this->setIfExists('github', $data ?? [], null);
        $this->setIfExists('githubEs', $data ?? [], null);
        $this->setIfExists('gitlab', $data ?? [], null);
        $this->setIfExists('gitlabSelfHosted', $data ?? [], null);
        $this->setIfExists('azureAd', $data ?? [], null);
        $this->setIfExists('apple', $data ?? [], null);
        $this->setIfExists('saml', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets options
     *
     * @return \Zitadel\Client\Model\Zitadelidpv2Options|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \Zitadel\Client\Model\Zitadelidpv2Options|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets ldap
     *
     * @return \Zitadel\Client\Model\V2LDAPConfig|null
     */
    public function getLdap()
    {
        return $this->container['ldap'];
    }

    /**
     * Sets ldap
     *
     * @param \Zitadel\Client\Model\V2LDAPConfig|null $ldap ldap
     *
     * @return self
     */
    public function setLdap($ldap)
    {
        if (is_null($ldap)) {
            throw new \InvalidArgumentException('non-nullable ldap cannot be null');
        }
        $this->container['ldap'] = $ldap;

        return $this;
    }

    /**
     * Gets google
     *
     * @return \Zitadel\Client\Model\V2GoogleConfig|null
     */
    public function getGoogle()
    {
        return $this->container['google'];
    }

    /**
     * Sets google
     *
     * @param \Zitadel\Client\Model\V2GoogleConfig|null $google google
     *
     * @return self
     */
    public function setGoogle($google)
    {
        if (is_null($google)) {
            throw new \InvalidArgumentException('non-nullable google cannot be null');
        }
        $this->container['google'] = $google;

        return $this;
    }

    /**
     * Gets oauth
     *
     * @return \Zitadel\Client\Model\V2OAuthConfig|null
     */
    public function getOauth()
    {
        return $this->container['oauth'];
    }

    /**
     * Sets oauth
     *
     * @param \Zitadel\Client\Model\V2OAuthConfig|null $oauth oauth
     *
     * @return self
     */
    public function setOauth($oauth)
    {
        if (is_null($oauth)) {
            throw new \InvalidArgumentException('non-nullable oauth cannot be null');
        }
        $this->container['oauth'] = $oauth;

        return $this;
    }

    /**
     * Gets oidc
     *
     * @return \Zitadel\Client\Model\V2GenericOIDCConfig|null
     */
    public function getOidc()
    {
        return $this->container['oidc'];
    }

    /**
     * Sets oidc
     *
     * @param \Zitadel\Client\Model\V2GenericOIDCConfig|null $oidc oidc
     *
     * @return self
     */
    public function setOidc($oidc)
    {
        if (is_null($oidc)) {
            throw new \InvalidArgumentException('non-nullable oidc cannot be null');
        }
        $this->container['oidc'] = $oidc;

        return $this;
    }

    /**
     * Gets jwt
     *
     * @return \Zitadel\Client\Model\V2JWTConfig|null
     */
    public function getJwt()
    {
        return $this->container['jwt'];
    }

    /**
     * Sets jwt
     *
     * @param \Zitadel\Client\Model\V2JWTConfig|null $jwt jwt
     *
     * @return self
     */
    public function setJwt($jwt)
    {
        if (is_null($jwt)) {
            throw new \InvalidArgumentException('non-nullable jwt cannot be null');
        }
        $this->container['jwt'] = $jwt;

        return $this;
    }

    /**
     * Gets github
     *
     * @return \Zitadel\Client\Model\V2GitHubConfig|null
     */
    public function getGithub()
    {
        return $this->container['github'];
    }

    /**
     * Sets github
     *
     * @param \Zitadel\Client\Model\V2GitHubConfig|null $github github
     *
     * @return self
     */
    public function setGithub($github)
    {
        if (is_null($github)) {
            throw new \InvalidArgumentException('non-nullable github cannot be null');
        }
        $this->container['github'] = $github;

        return $this;
    }

    /**
     * Gets githubEs
     *
     * @return \Zitadel\Client\Model\V2GitHubEnterpriseServerConfig|null
     */
    public function getGithubEs()
    {
        return $this->container['githubEs'];
    }

    /**
     * Sets githubEs
     *
     * @param \Zitadel\Client\Model\V2GitHubEnterpriseServerConfig|null $githubEs githubEs
     *
     * @return self
     */
    public function setGithubEs($githubEs)
    {
        if (is_null($githubEs)) {
            throw new \InvalidArgumentException('non-nullable githubEs cannot be null');
        }
        $this->container['githubEs'] = $githubEs;

        return $this;
    }

    /**
     * Gets gitlab
     *
     * @return \Zitadel\Client\Model\V2GitLabConfig|null
     */
    public function getGitlab()
    {
        return $this->container['gitlab'];
    }

    /**
     * Sets gitlab
     *
     * @param \Zitadel\Client\Model\V2GitLabConfig|null $gitlab gitlab
     *
     * @return self
     */
    public function setGitlab($gitlab)
    {
        if (is_null($gitlab)) {
            throw new \InvalidArgumentException('non-nullable gitlab cannot be null');
        }
        $this->container['gitlab'] = $gitlab;

        return $this;
    }

    /**
     * Gets gitlabSelfHosted
     *
     * @return \Zitadel\Client\Model\V2GitLabSelfHostedConfig|null
     */
    public function getGitlabSelfHosted()
    {
        return $this->container['gitlabSelfHosted'];
    }

    /**
     * Sets gitlabSelfHosted
     *
     * @param \Zitadel\Client\Model\V2GitLabSelfHostedConfig|null $gitlabSelfHosted gitlabSelfHosted
     *
     * @return self
     */
    public function setGitlabSelfHosted($gitlabSelfHosted)
    {
        if (is_null($gitlabSelfHosted)) {
            throw new \InvalidArgumentException('non-nullable gitlabSelfHosted cannot be null');
        }
        $this->container['gitlabSelfHosted'] = $gitlabSelfHosted;

        return $this;
    }

    /**
     * Gets azureAd
     *
     * @return \Zitadel\Client\Model\V2AzureADConfig|null
     */
    public function getAzureAd()
    {
        return $this->container['azureAd'];
    }

    /**
     * Sets azureAd
     *
     * @param \Zitadel\Client\Model\V2AzureADConfig|null $azureAd azureAd
     *
     * @return self
     */
    public function setAzureAd($azureAd)
    {
        if (is_null($azureAd)) {
            throw new \InvalidArgumentException('non-nullable azureAd cannot be null');
        }
        $this->container['azureAd'] = $azureAd;

        return $this;
    }

    /**
     * Gets apple
     *
     * @return \Zitadel\Client\Model\V2AppleConfig|null
     */
    public function getApple()
    {
        return $this->container['apple'];
    }

    /**
     * Sets apple
     *
     * @param \Zitadel\Client\Model\V2AppleConfig|null $apple apple
     *
     * @return self
     */
    public function setApple($apple)
    {
        if (is_null($apple)) {
            throw new \InvalidArgumentException('non-nullable apple cannot be null');
        }
        $this->container['apple'] = $apple;

        return $this;
    }

    /**
     * Gets saml
     *
     * @return \Zitadel\Client\Model\V2SAMLConfig|null
     */
    public function getSaml()
    {
        return $this->container['saml'];
    }

    /**
     * Sets saml
     *
     * @param \Zitadel\Client\Model\V2SAMLConfig|null $saml saml
     *
     * @return self
     */
    public function setSaml($saml)
    {
        if (is_null($saml)) {
            throw new \InvalidArgumentException('non-nullable saml cannot be null');
        }
        $this->container['saml'] = $saml;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


