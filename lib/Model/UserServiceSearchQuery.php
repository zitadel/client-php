<?php
/**
 * UserServiceSearchQuery
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * UserServiceSearchQuery Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserServiceSearchQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserServiceSearchQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'userNameQuery' => '\Zitadel\Client\Model\UserServiceUserNameQuery',
        'firstNameQuery' => '\Zitadel\Client\Model\UserServiceFirstNameQuery',
        'lastNameQuery' => '\Zitadel\Client\Model\UserServiceLastNameQuery',
        'nickNameQuery' => '\Zitadel\Client\Model\UserServiceNickNameQuery',
        'displayNameQuery' => '\Zitadel\Client\Model\UserServiceDisplayNameQuery',
        'emailQuery' => '\Zitadel\Client\Model\UserServiceEmailQuery',
        'stateQuery' => '\Zitadel\Client\Model\UserServiceStateQuery',
        'typeQuery' => '\Zitadel\Client\Model\UserServiceTypeQuery',
        'loginNameQuery' => '\Zitadel\Client\Model\UserServiceLoginNameQuery',
        'inUserIdsQuery' => '\Zitadel\Client\Model\UserServiceInUserIDQuery',
        'orQuery' => '\Zitadel\Client\Model\UserServiceOrQuery',
        'andQuery' => '\Zitadel\Client\Model\UserServiceAndQuery',
        'notQuery' => '\Zitadel\Client\Model\UserServiceNotQuery',
        'inUserEmailsQuery' => '\Zitadel\Client\Model\UserServiceInUserEmailsQuery',
        'organizationIdQuery' => '\Zitadel\Client\Model\UserServiceOrganizationIdQuery',
        'phoneQuery' => '\Zitadel\Client\Model\UserServicePhoneQuery'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'userNameQuery' => null,
        'firstNameQuery' => null,
        'lastNameQuery' => null,
        'nickNameQuery' => null,
        'displayNameQuery' => null,
        'emailQuery' => null,
        'stateQuery' => null,
        'typeQuery' => null,
        'loginNameQuery' => null,
        'inUserIdsQuery' => null,
        'orQuery' => null,
        'andQuery' => null,
        'notQuery' => null,
        'inUserEmailsQuery' => null,
        'organizationIdQuery' => null,
        'phoneQuery' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'userNameQuery' => false,
        'firstNameQuery' => false,
        'lastNameQuery' => false,
        'nickNameQuery' => false,
        'displayNameQuery' => false,
        'emailQuery' => false,
        'stateQuery' => false,
        'typeQuery' => false,
        'loginNameQuery' => false,
        'inUserIdsQuery' => false,
        'orQuery' => false,
        'andQuery' => false,
        'notQuery' => false,
        'inUserEmailsQuery' => false,
        'organizationIdQuery' => false,
        'phoneQuery' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userNameQuery' => 'userNameQuery',
        'firstNameQuery' => 'firstNameQuery',
        'lastNameQuery' => 'lastNameQuery',
        'nickNameQuery' => 'nickNameQuery',
        'displayNameQuery' => 'displayNameQuery',
        'emailQuery' => 'emailQuery',
        'stateQuery' => 'stateQuery',
        'typeQuery' => 'typeQuery',
        'loginNameQuery' => 'loginNameQuery',
        'inUserIdsQuery' => 'inUserIdsQuery',
        'orQuery' => 'orQuery',
        'andQuery' => 'andQuery',
        'notQuery' => 'notQuery',
        'inUserEmailsQuery' => 'inUserEmailsQuery',
        'organizationIdQuery' => 'organizationIdQuery',
        'phoneQuery' => 'phoneQuery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userNameQuery' => 'setUserNameQuery',
        'firstNameQuery' => 'setFirstNameQuery',
        'lastNameQuery' => 'setLastNameQuery',
        'nickNameQuery' => 'setNickNameQuery',
        'displayNameQuery' => 'setDisplayNameQuery',
        'emailQuery' => 'setEmailQuery',
        'stateQuery' => 'setStateQuery',
        'typeQuery' => 'setTypeQuery',
        'loginNameQuery' => 'setLoginNameQuery',
        'inUserIdsQuery' => 'setInUserIdsQuery',
        'orQuery' => 'setOrQuery',
        'andQuery' => 'setAndQuery',
        'notQuery' => 'setNotQuery',
        'inUserEmailsQuery' => 'setInUserEmailsQuery',
        'organizationIdQuery' => 'setOrganizationIdQuery',
        'phoneQuery' => 'setPhoneQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userNameQuery' => 'getUserNameQuery',
        'firstNameQuery' => 'getFirstNameQuery',
        'lastNameQuery' => 'getLastNameQuery',
        'nickNameQuery' => 'getNickNameQuery',
        'displayNameQuery' => 'getDisplayNameQuery',
        'emailQuery' => 'getEmailQuery',
        'stateQuery' => 'getStateQuery',
        'typeQuery' => 'getTypeQuery',
        'loginNameQuery' => 'getLoginNameQuery',
        'inUserIdsQuery' => 'getInUserIdsQuery',
        'orQuery' => 'getOrQuery',
        'andQuery' => 'getAndQuery',
        'notQuery' => 'getNotQuery',
        'inUserEmailsQuery' => 'getInUserEmailsQuery',
        'organizationIdQuery' => 'getOrganizationIdQuery',
        'phoneQuery' => 'getPhoneQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('userNameQuery', $data ?? [], null);
        $this->setIfExists('firstNameQuery', $data ?? [], null);
        $this->setIfExists('lastNameQuery', $data ?? [], null);
        $this->setIfExists('nickNameQuery', $data ?? [], null);
        $this->setIfExists('displayNameQuery', $data ?? [], null);
        $this->setIfExists('emailQuery', $data ?? [], null);
        $this->setIfExists('stateQuery', $data ?? [], null);
        $this->setIfExists('typeQuery', $data ?? [], null);
        $this->setIfExists('loginNameQuery', $data ?? [], null);
        $this->setIfExists('inUserIdsQuery', $data ?? [], null);
        $this->setIfExists('orQuery', $data ?? [], null);
        $this->setIfExists('andQuery', $data ?? [], null);
        $this->setIfExists('notQuery', $data ?? [], null);
        $this->setIfExists('inUserEmailsQuery', $data ?? [], null);
        $this->setIfExists('organizationIdQuery', $data ?? [], null);
        $this->setIfExists('phoneQuery', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userNameQuery
     *
     * @return \Zitadel\Client\Model\UserServiceUserNameQuery|null
     */
    public function getUserNameQuery()
    {
        return $this->container['userNameQuery'];
    }

    /**
     * Sets userNameQuery
     *
     * @param \Zitadel\Client\Model\UserServiceUserNameQuery|null $userNameQuery userNameQuery
     *
     * @return self
     */
    public function setUserNameQuery($userNameQuery)
    {
        if (is_null($userNameQuery)) {
            throw new \InvalidArgumentException('non-nullable userNameQuery cannot be null');
        }
        $this->container['userNameQuery'] = $userNameQuery;

        return $this;
    }

    /**
     * Gets firstNameQuery
     *
     * @return \Zitadel\Client\Model\UserServiceFirstNameQuery|null
     */
    public function getFirstNameQuery()
    {
        return $this->container['firstNameQuery'];
    }

    /**
     * Sets firstNameQuery
     *
     * @param \Zitadel\Client\Model\UserServiceFirstNameQuery|null $firstNameQuery firstNameQuery
     *
     * @return self
     */
    public function setFirstNameQuery($firstNameQuery)
    {
        if (is_null($firstNameQuery)) {
            throw new \InvalidArgumentException('non-nullable firstNameQuery cannot be null');
        }
        $this->container['firstNameQuery'] = $firstNameQuery;

        return $this;
    }

    /**
     * Gets lastNameQuery
     *
     * @return \Zitadel\Client\Model\UserServiceLastNameQuery|null
     */
    public function getLastNameQuery()
    {
        return $this->container['lastNameQuery'];
    }

    /**
     * Sets lastNameQuery
     *
     * @param \Zitadel\Client\Model\UserServiceLastNameQuery|null $lastNameQuery lastNameQuery
     *
     * @return self
     */
    public function setLastNameQuery($lastNameQuery)
    {
        if (is_null($lastNameQuery)) {
            throw new \InvalidArgumentException('non-nullable lastNameQuery cannot be null');
        }
        $this->container['lastNameQuery'] = $lastNameQuery;

        return $this;
    }

    /**
     * Gets nickNameQuery
     *
     * @return \Zitadel\Client\Model\UserServiceNickNameQuery|null
     */
    public function getNickNameQuery()
    {
        return $this->container['nickNameQuery'];
    }

    /**
     * Sets nickNameQuery
     *
     * @param \Zitadel\Client\Model\UserServiceNickNameQuery|null $nickNameQuery nickNameQuery
     *
     * @return self
     */
    public function setNickNameQuery($nickNameQuery)
    {
        if (is_null($nickNameQuery)) {
            throw new \InvalidArgumentException('non-nullable nickNameQuery cannot be null');
        }
        $this->container['nickNameQuery'] = $nickNameQuery;

        return $this;
    }

    /**
     * Gets displayNameQuery
     *
     * @return \Zitadel\Client\Model\UserServiceDisplayNameQuery|null
     */
    public function getDisplayNameQuery()
    {
        return $this->container['displayNameQuery'];
    }

    /**
     * Sets displayNameQuery
     *
     * @param \Zitadel\Client\Model\UserServiceDisplayNameQuery|null $displayNameQuery displayNameQuery
     *
     * @return self
     */
    public function setDisplayNameQuery($displayNameQuery)
    {
        if (is_null($displayNameQuery)) {
            throw new \InvalidArgumentException('non-nullable displayNameQuery cannot be null');
        }
        $this->container['displayNameQuery'] = $displayNameQuery;

        return $this;
    }

    /**
     * Gets emailQuery
     *
     * @return \Zitadel\Client\Model\UserServiceEmailQuery|null
     */
    public function getEmailQuery()
    {
        return $this->container['emailQuery'];
    }

    /**
     * Sets emailQuery
     *
     * @param \Zitadel\Client\Model\UserServiceEmailQuery|null $emailQuery emailQuery
     *
     * @return self
     */
    public function setEmailQuery($emailQuery)
    {
        if (is_null($emailQuery)) {
            throw new \InvalidArgumentException('non-nullable emailQuery cannot be null');
        }
        $this->container['emailQuery'] = $emailQuery;

        return $this;
    }

    /**
     * Gets stateQuery
     *
     * @return \Zitadel\Client\Model\UserServiceStateQuery|null
     */
    public function getStateQuery()
    {
        return $this->container['stateQuery'];
    }

    /**
     * Sets stateQuery
     *
     * @param \Zitadel\Client\Model\UserServiceStateQuery|null $stateQuery stateQuery
     *
     * @return self
     */
    public function setStateQuery($stateQuery)
    {
        if (is_null($stateQuery)) {
            throw new \InvalidArgumentException('non-nullable stateQuery cannot be null');
        }
        $this->container['stateQuery'] = $stateQuery;

        return $this;
    }

    /**
     * Gets typeQuery
     *
     * @return \Zitadel\Client\Model\UserServiceTypeQuery|null
     */
    public function getTypeQuery()
    {
        return $this->container['typeQuery'];
    }

    /**
     * Sets typeQuery
     *
     * @param \Zitadel\Client\Model\UserServiceTypeQuery|null $typeQuery typeQuery
     *
     * @return self
     */
    public function setTypeQuery($typeQuery)
    {
        if (is_null($typeQuery)) {
            throw new \InvalidArgumentException('non-nullable typeQuery cannot be null');
        }
        $this->container['typeQuery'] = $typeQuery;

        return $this;
    }

    /**
     * Gets loginNameQuery
     *
     * @return \Zitadel\Client\Model\UserServiceLoginNameQuery|null
     */
    public function getLoginNameQuery()
    {
        return $this->container['loginNameQuery'];
    }

    /**
     * Sets loginNameQuery
     *
     * @param \Zitadel\Client\Model\UserServiceLoginNameQuery|null $loginNameQuery loginNameQuery
     *
     * @return self
     */
    public function setLoginNameQuery($loginNameQuery)
    {
        if (is_null($loginNameQuery)) {
            throw new \InvalidArgumentException('non-nullable loginNameQuery cannot be null');
        }
        $this->container['loginNameQuery'] = $loginNameQuery;

        return $this;
    }

    /**
     * Gets inUserIdsQuery
     *
     * @return \Zitadel\Client\Model\UserServiceInUserIDQuery|null
     */
    public function getInUserIdsQuery()
    {
        return $this->container['inUserIdsQuery'];
    }

    /**
     * Sets inUserIdsQuery
     *
     * @param \Zitadel\Client\Model\UserServiceInUserIDQuery|null $inUserIdsQuery inUserIdsQuery
     *
     * @return self
     */
    public function setInUserIdsQuery($inUserIdsQuery)
    {
        if (is_null($inUserIdsQuery)) {
            throw new \InvalidArgumentException('non-nullable inUserIdsQuery cannot be null');
        }
        $this->container['inUserIdsQuery'] = $inUserIdsQuery;

        return $this;
    }

    /**
     * Gets orQuery
     *
     * @return \Zitadel\Client\Model\UserServiceOrQuery|null
     */
    public function getOrQuery()
    {
        return $this->container['orQuery'];
    }

    /**
     * Sets orQuery
     *
     * @param \Zitadel\Client\Model\UserServiceOrQuery|null $orQuery orQuery
     *
     * @return self
     */
    public function setOrQuery($orQuery)
    {
        if (is_null($orQuery)) {
            throw new \InvalidArgumentException('non-nullable orQuery cannot be null');
        }
        $this->container['orQuery'] = $orQuery;

        return $this;
    }

    /**
     * Gets andQuery
     *
     * @return \Zitadel\Client\Model\UserServiceAndQuery|null
     */
    public function getAndQuery()
    {
        return $this->container['andQuery'];
    }

    /**
     * Sets andQuery
     *
     * @param \Zitadel\Client\Model\UserServiceAndQuery|null $andQuery andQuery
     *
     * @return self
     */
    public function setAndQuery($andQuery)
    {
        if (is_null($andQuery)) {
            throw new \InvalidArgumentException('non-nullable andQuery cannot be null');
        }
        $this->container['andQuery'] = $andQuery;

        return $this;
    }

    /**
     * Gets notQuery
     *
     * @return \Zitadel\Client\Model\UserServiceNotQuery|null
     */
    public function getNotQuery()
    {
        return $this->container['notQuery'];
    }

    /**
     * Sets notQuery
     *
     * @param \Zitadel\Client\Model\UserServiceNotQuery|null $notQuery notQuery
     *
     * @return self
     */
    public function setNotQuery($notQuery)
    {
        if (is_null($notQuery)) {
            throw new \InvalidArgumentException('non-nullable notQuery cannot be null');
        }
        $this->container['notQuery'] = $notQuery;

        return $this;
    }

    /**
     * Gets inUserEmailsQuery
     *
     * @return \Zitadel\Client\Model\UserServiceInUserEmailsQuery|null
     */
    public function getInUserEmailsQuery()
    {
        return $this->container['inUserEmailsQuery'];
    }

    /**
     * Sets inUserEmailsQuery
     *
     * @param \Zitadel\Client\Model\UserServiceInUserEmailsQuery|null $inUserEmailsQuery inUserEmailsQuery
     *
     * @return self
     */
    public function setInUserEmailsQuery($inUserEmailsQuery)
    {
        if (is_null($inUserEmailsQuery)) {
            throw new \InvalidArgumentException('non-nullable inUserEmailsQuery cannot be null');
        }
        $this->container['inUserEmailsQuery'] = $inUserEmailsQuery;

        return $this;
    }

    /**
     * Gets organizationIdQuery
     *
     * @return \Zitadel\Client\Model\UserServiceOrganizationIdQuery|null
     */
    public function getOrganizationIdQuery()
    {
        return $this->container['organizationIdQuery'];
    }

    /**
     * Sets organizationIdQuery
     *
     * @param \Zitadel\Client\Model\UserServiceOrganizationIdQuery|null $organizationIdQuery organizationIdQuery
     *
     * @return self
     */
    public function setOrganizationIdQuery($organizationIdQuery)
    {
        if (is_null($organizationIdQuery)) {
            throw new \InvalidArgumentException('non-nullable organizationIdQuery cannot be null');
        }
        $this->container['organizationIdQuery'] = $organizationIdQuery;

        return $this;
    }

    /**
     * Gets phoneQuery
     *
     * @return \Zitadel\Client\Model\UserServicePhoneQuery|null
     */
    public function getPhoneQuery()
    {
        return $this->container['phoneQuery'];
    }

    /**
     * Sets phoneQuery
     *
     * @param \Zitadel\Client\Model\UserServicePhoneQuery|null $phoneQuery phoneQuery
     *
     * @return self
     */
    public function setPhoneQuery($phoneQuery)
    {
        if (is_null($phoneQuery)) {
            throw new \InvalidArgumentException('non-nullable phoneQuery cannot be null');
        }
        $this->container['phoneQuery'] = $phoneQuery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


