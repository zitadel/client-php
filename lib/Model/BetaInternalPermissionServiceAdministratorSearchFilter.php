<?php
/**
 * BetaInternalPermissionServiceAdministratorSearchFilter
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Zitadel SDK
 *
 * The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * BetaInternalPermissionServiceAdministratorSearchFilter Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BetaInternalPermissionServiceAdministratorSearchFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BetaInternalPermissionServiceAdministratorSearchFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'and' => '\Zitadel\Client\Model\BetaInternalPermissionServiceAndFilter',
        'changeDate' => '\Zitadel\Client\Model\BetaInternalPermissionServiceTimestampFilter',
        'creationDate' => '\Zitadel\Client\Model\BetaInternalPermissionServiceTimestampFilter',
        'inUserIdsFilter' => '\Zitadel\Client\Model\BetaInternalPermissionServiceInIDsFilter',
        'not' => '\Zitadel\Client\Model\BetaInternalPermissionServiceNotFilter',
        'or' => '\Zitadel\Client\Model\BetaInternalPermissionServiceOrFilter',
        'resource' => '\Zitadel\Client\Model\BetaInternalPermissionServiceResourceFilter',
        'role' => '\Zitadel\Client\Model\BetaInternalPermissionServiceRoleFilter',
        'userDisplayName' => '\Zitadel\Client\Model\BetaInternalPermissionServiceUserDisplayNameFilter',
        'userOrganizationId' => '\Zitadel\Client\Model\BetaInternalPermissionServiceIDFilter',
        'userPreferredLoginName' => '\Zitadel\Client\Model\BetaInternalPermissionServiceUserPreferredLoginNameFilter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'and' => null,
        'changeDate' => null,
        'creationDate' => null,
        'inUserIdsFilter' => null,
        'not' => null,
        'or' => null,
        'resource' => null,
        'role' => null,
        'userDisplayName' => null,
        'userOrganizationId' => null,
        'userPreferredLoginName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'and' => false,
        'changeDate' => false,
        'creationDate' => false,
        'inUserIdsFilter' => false,
        'not' => false,
        'or' => false,
        'resource' => false,
        'role' => false,
        'userDisplayName' => false,
        'userOrganizationId' => false,
        'userPreferredLoginName' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'and' => 'and',
        'changeDate' => 'changeDate',
        'creationDate' => 'creationDate',
        'inUserIdsFilter' => 'inUserIdsFilter',
        'not' => 'not',
        'or' => 'or',
        'resource' => 'resource',
        'role' => 'role',
        'userDisplayName' => 'userDisplayName',
        'userOrganizationId' => 'userOrganizationId',
        'userPreferredLoginName' => 'userPreferredLoginName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'and' => 'setAnd',
        'changeDate' => 'setChangeDate',
        'creationDate' => 'setCreationDate',
        'inUserIdsFilter' => 'setInUserIdsFilter',
        'not' => 'setNot',
        'or' => 'setOr',
        'resource' => 'setResource',
        'role' => 'setRole',
        'userDisplayName' => 'setUserDisplayName',
        'userOrganizationId' => 'setUserOrganizationId',
        'userPreferredLoginName' => 'setUserPreferredLoginName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'and' => 'getAnd',
        'changeDate' => 'getChangeDate',
        'creationDate' => 'getCreationDate',
        'inUserIdsFilter' => 'getInUserIdsFilter',
        'not' => 'getNot',
        'or' => 'getOr',
        'resource' => 'getResource',
        'role' => 'getRole',
        'userDisplayName' => 'getUserDisplayName',
        'userOrganizationId' => 'getUserOrganizationId',
        'userPreferredLoginName' => 'getUserPreferredLoginName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('and', $data ?? [], null);
        $this->setIfExists('changeDate', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('inUserIdsFilter', $data ?? [], null);
        $this->setIfExists('not', $data ?? [], null);
        $this->setIfExists('or', $data ?? [], null);
        $this->setIfExists('resource', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('userDisplayName', $data ?? [], null);
        $this->setIfExists('userOrganizationId', $data ?? [], null);
        $this->setIfExists('userPreferredLoginName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets and
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceAndFilter|null
     */
    public function getAnd()
    {
        return $this->container['and'];
    }

    /**
     * Sets and
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceAndFilter|null $and and
     *
     * @return self
     */
    public function setAnd($and)
    {
        if (is_null($and)) {
            throw new \InvalidArgumentException('non-nullable and cannot be null');
        }
        $this->container['and'] = $and;

        return $this;
    }

    /**
     * Gets changeDate
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceTimestampFilter|null
     */
    public function getChangeDate()
    {
        return $this->container['changeDate'];
    }

    /**
     * Sets changeDate
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceTimestampFilter|null $changeDate changeDate
     *
     * @return self
     */
    public function setChangeDate($changeDate)
    {
        if (is_null($changeDate)) {
            throw new \InvalidArgumentException('non-nullable changeDate cannot be null');
        }
        $this->container['changeDate'] = $changeDate;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceTimestampFilter|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceTimestampFilter|null $creationDate creationDate
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets inUserIdsFilter
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceInIDsFilter|null
     */
    public function getInUserIdsFilter()
    {
        return $this->container['inUserIdsFilter'];
    }

    /**
     * Sets inUserIdsFilter
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceInIDsFilter|null $inUserIdsFilter inUserIdsFilter
     *
     * @return self
     */
    public function setInUserIdsFilter($inUserIdsFilter)
    {
        if (is_null($inUserIdsFilter)) {
            throw new \InvalidArgumentException('non-nullable inUserIdsFilter cannot be null');
        }
        $this->container['inUserIdsFilter'] = $inUserIdsFilter;

        return $this;
    }

    /**
     * Gets not
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceNotFilter|null
     */
    public function getNot()
    {
        return $this->container['not'];
    }

    /**
     * Sets not
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceNotFilter|null $not not
     *
     * @return self
     */
    public function setNot($not)
    {
        if (is_null($not)) {
            throw new \InvalidArgumentException('non-nullable not cannot be null');
        }
        $this->container['not'] = $not;

        return $this;
    }

    /**
     * Gets or
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceOrFilter|null
     */
    public function getOr()
    {
        return $this->container['or'];
    }

    /**
     * Sets or
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceOrFilter|null $or or
     *
     * @return self
     */
    public function setOr($or)
    {
        if (is_null($or)) {
            throw new \InvalidArgumentException('non-nullable or cannot be null');
        }
        $this->container['or'] = $or;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceResourceFilter|null
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceResourceFilter|null $resource resource
     *
     * @return self
     */
    public function setResource($resource)
    {
        if (is_null($resource)) {
            throw new \InvalidArgumentException('non-nullable resource cannot be null');
        }
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceRoleFilter|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceRoleFilter|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets userDisplayName
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceUserDisplayNameFilter|null
     */
    public function getUserDisplayName()
    {
        return $this->container['userDisplayName'];
    }

    /**
     * Sets userDisplayName
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceUserDisplayNameFilter|null $userDisplayName userDisplayName
     *
     * @return self
     */
    public function setUserDisplayName($userDisplayName)
    {
        if (is_null($userDisplayName)) {
            throw new \InvalidArgumentException('non-nullable userDisplayName cannot be null');
        }
        $this->container['userDisplayName'] = $userDisplayName;

        return $this;
    }

    /**
     * Gets userOrganizationId
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceIDFilter|null
     */
    public function getUserOrganizationId()
    {
        return $this->container['userOrganizationId'];
    }

    /**
     * Sets userOrganizationId
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceIDFilter|null $userOrganizationId userOrganizationId
     *
     * @return self
     */
    public function setUserOrganizationId($userOrganizationId)
    {
        if (is_null($userOrganizationId)) {
            throw new \InvalidArgumentException('non-nullable userOrganizationId cannot be null');
        }
        $this->container['userOrganizationId'] = $userOrganizationId;

        return $this;
    }

    /**
     * Gets userPreferredLoginName
     *
     * @return \Zitadel\Client\Model\BetaInternalPermissionServiceUserPreferredLoginNameFilter|null
     */
    public function getUserPreferredLoginName()
    {
        return $this->container['userPreferredLoginName'];
    }

    /**
     * Sets userPreferredLoginName
     *
     * @param \Zitadel\Client\Model\BetaInternalPermissionServiceUserPreferredLoginNameFilter|null $userPreferredLoginName userPreferredLoginName
     *
     * @return self
     */
    public function setUserPreferredLoginName($userPreferredLoginName)
    {
        if (is_null($userPreferredLoginName)) {
            throw new \InvalidArgumentException('non-nullable userPreferredLoginName cannot be null');
        }
        $this->container['userPreferredLoginName'] = $userPreferredLoginName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


