<?php
/**
 * V2AuthRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * merged spec
 *
 * merged spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Zitadel\Client\Model;

use \ArrayAccess;
use \Zitadel\Client\ObjectSerializer;

/**
 * V2AuthRequest Class Doc Comment
 *
 * @category Class
 * @package  Zitadel\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class V2AuthRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'v2AuthRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'creationDate' => '\DateTime',
        'clientId' => 'string',
        'scope' => 'string[]',
        'redirectUri' => 'string',
        'prompt' => '\Zitadel\Client\Model\V2Prompt[]',
        'uiLocales' => 'string[]',
        'loginHint' => 'string',
        'maxAge' => 'string',
        'hintUserId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'creationDate' => 'date-time',
        'clientId' => null,
        'scope' => null,
        'redirectUri' => null,
        'prompt' => null,
        'uiLocales' => null,
        'loginHint' => null,
        'maxAge' => null,
        'hintUserId' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'creationDate' => false,
        'clientId' => false,
        'scope' => false,
        'redirectUri' => false,
        'prompt' => false,
        'uiLocales' => false,
        'loginHint' => false,
        'maxAge' => false,
        'hintUserId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'creationDate' => 'creationDate',
        'clientId' => 'clientId',
        'scope' => 'scope',
        'redirectUri' => 'redirectUri',
        'prompt' => 'prompt',
        'uiLocales' => 'uiLocales',
        'loginHint' => 'loginHint',
        'maxAge' => 'maxAge',
        'hintUserId' => 'hintUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'creationDate' => 'setCreationDate',
        'clientId' => 'setClientId',
        'scope' => 'setScope',
        'redirectUri' => 'setRedirectUri',
        'prompt' => 'setPrompt',
        'uiLocales' => 'setUiLocales',
        'loginHint' => 'setLoginHint',
        'maxAge' => 'setMaxAge',
        'hintUserId' => 'setHintUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'creationDate' => 'getCreationDate',
        'clientId' => 'getClientId',
        'scope' => 'getScope',
        'redirectUri' => 'getRedirectUri',
        'prompt' => 'getPrompt',
        'uiLocales' => 'getUiLocales',
        'loginHint' => 'getLoginHint',
        'maxAge' => 'getMaxAge',
        'hintUserId' => 'getHintUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
        $this->setIfExists('clientId', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('redirectUri', $data ?? [], null);
        $this->setIfExists('prompt', $data ?? [], null);
        $this->setIfExists('uiLocales', $data ?? [], null);
        $this->setIfExists('loginHint', $data ?? [], null);
        $this->setIfExists('maxAge', $data ?? [], null);
        $this->setIfExists('hintUserId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the authorization request
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime|null $creationDate Time when the auth request was created
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param string|null $clientId OIDC client ID of the application that created the auth request
     *
     * @return self
     */
    public function setClientId($clientId)
    {
        if (is_null($clientId)) {
            throw new \InvalidArgumentException('non-nullable clientId cannot be null');
        }
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string[]|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string[]|null $scope Requested scopes by the application, which the user must consent to.
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets redirectUri
     *
     * @return string|null
     */
    public function getRedirectUri()
    {
        return $this->container['redirectUri'];
    }

    /**
     * Sets redirectUri
     *
     * @param string|null $redirectUri Base URI that points back to the application
     *
     * @return self
     */
    public function setRedirectUri($redirectUri)
    {
        if (is_null($redirectUri)) {
            throw new \InvalidArgumentException('non-nullable redirectUri cannot be null');
        }
        $this->container['redirectUri'] = $redirectUri;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return \Zitadel\Client\Model\V2Prompt[]|null
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param \Zitadel\Client\Model\V2Prompt[]|null $prompt Prompts that must be displayed to the user
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        if (is_null($prompt)) {
            throw new \InvalidArgumentException('non-nullable prompt cannot be null');
        }
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets uiLocales
     *
     * @return string[]|null
     */
    public function getUiLocales()
    {
        return $this->container['uiLocales'];
    }

    /**
     * Sets uiLocales
     *
     * @param string[]|null $uiLocales End-User's preferred languages and scripts for the user interface, represented as a list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value [fr-CA, fr, en] represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported.
     *
     * @return self
     */
    public function setUiLocales($uiLocales)
    {
        if (is_null($uiLocales)) {
            throw new \InvalidArgumentException('non-nullable uiLocales cannot be null');
        }
        $this->container['uiLocales'] = $uiLocales;

        return $this;
    }

    /**
     * Gets loginHint
     *
     * @return string|null
     */
    public function getLoginHint()
    {
        return $this->container['loginHint'];
    }

    /**
     * Sets loginHint
     *
     * @param string|null $loginHint Login hint can be set by the application with a user identifier such as an email or phone number.
     *
     * @return self
     */
    public function setLoginHint($loginHint)
    {
        if (is_null($loginHint)) {
            throw new \InvalidArgumentException('non-nullable loginHint cannot be null');
        }
        $this->container['loginHint'] = $loginHint;

        return $this;
    }

    /**
     * Gets maxAge
     *
     * @return string|null
     */
    public function getMaxAge()
    {
        return $this->container['maxAge'];
    }

    /**
     * Sets maxAge
     *
     * @param string|null $maxAge Specifies the allowable elapsed time in seconds since the last time the End-User was actively authenticated. If the elapsed time is greater than this value, or the field is present with 0 duration, the user must be re-authenticated.
     *
     * @return self
     */
    public function setMaxAge($maxAge)
    {
        if (is_null($maxAge)) {
            throw new \InvalidArgumentException('non-nullable maxAge cannot be null');
        }
        $this->container['maxAge'] = $maxAge;

        return $this;
    }

    /**
     * Gets hintUserId
     *
     * @return string|null
     */
    public function getHintUserId()
    {
        return $this->container['hintUserId'];
    }

    /**
     * Sets hintUserId
     *
     * @param string|null $hintUserId User ID taken from a ID Token Hint if it was present and valid.
     *
     * @return self
     */
    public function setHintUserId($hintUserId)
    {
        if (is_null($hintUserId)) {
            throw new \InvalidArgumentException('non-nullable hintUserId cannot be null');
        }
        $this->container['hintUserId'] = $hintUserId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


